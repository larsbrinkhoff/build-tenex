;<MON>SCHED.MAC;12    19-APR-77 15:39:25    EDIT BY SWEER
;un half killed some symbols for anal program
;<SCHULZ>SCHED.MAC;10     2-DEC-76 15:45:10    EDIT BY SWEER
; SAVE AND RESTORE IMECHF AND LINKF IN PSB
;<SCHULZ>SCHED.MAC;9    23-NOV-76 16:43:36    EDIT BY SWEER
;ADDED PUSHJ P,KILUPT IN LDJB4
;<MON>SCHED.MAC			7/75		EDIT BY HEATHMAN
;ADDED CALL TO TYMNET CODE AT JOBSRT TO HANG UP LINE ON NEW FORK FAILURE
;<MON>SCHED.MAC;25    21-MAY-75 16:44:42    EDIT BY HEDBERG
;Added reason for downage to SYSTAT table
;<MON>SCHED.MAC;21    26-FEB-75 17:13:03    EDIT BY LIEB
;ADDED SKDLV8 CALL TO VDHCHK FOR PACKET BUFFER SERVICE
;<MON>SCHED.MAC;19		4-FEB-75	EDIT BY HEATHMAN
; ADDED CALL TO SAVE IMAGE (CRSHSV) FROM SWHLT
;<MON>SCHED.PAT;2    29-JAN-75 01:14:43    EDIT BY LIEB
;CHANGED 2ND LEVEL CLOCKS TO WORK WITH IMPDV.133 AND ADDED STMINQ ROUTINE
;WHICH IS MERELY NOP'D FOR NOW--LIEB
;<MON>SCHED.MAC;16		4-FEB-75	EDIT BY HEATHMAN
;MANY EDITS FROM 6/74 TO 2/75 SEE <MON>SCHED.CHANGES;1 @ SUMEX FOR DETAILS
;<TENEX-130>SCHED.MAC;133     5-JAN-73 10:53:58	EDIT BY TOMLINSON
;<TENEX-130>SCHED.MAC;132    28-DEC-72 15:44:04	EDIT BY TOMLINSON
;<TENEX-130>SCHED.MAC;131    27-DEC-72 14:37:17	EDIT BY TOMLINSON
;<TENEX-130>SCHED.MAC;130    27-DEC-72 14:29:54	EDIT BY TOMLINSON
; FIXED FSHBS BUG
;<TENEX-130>SCHED.MAC;129    12-DEC-72 14:17:27	EDIT BY TOMLINSON
;<TENEX-130>SCHED.MAC;128    11-DEC-72 17:33:44	EDIT BY TOMLINSON
;<TENEX-130>SCHED.MAC;127    11-DEC-72 15:36:58	EDIT BY TOMLINSON
;<TENEX-130>SCHED.MAC;126     7-DEC-72 11:57:35	EDIT BY TOMLINSON
; ADDED CODE TO FLUSH ALL JOBS FROM BALSET
;<TENEX-130>SCHED.MAC;125     4-DEC-72 23:36:39	EDIT BY TOMLINSON
; ADDED TAG AT SWHLT1
;<TENEX-130>SCHED.MAC;124    21-NOV-72 15:41:29	EDIT BY WALLACE
;<TENEX-130>SCHED.MAC;123    20-NOV-72 17:17:40	EDIT BY WALLACE
;<TENEX-130>SCHED.MAC;122    20-NOV-72 14:54:20	EDIT BY TOMLINSON
; ADJUSTED FOR NEW TITLE
;<TENEX-130>SCHED.MAC;121    20-NOV-72 11:43:32	EDIT BY WALLACE
;<TENEX-130>SCHED.MAC;120     8-NOV-72 22:31:41	EDIT BY CLEMENTS
;<TENEXDLM>SCHED.MAC;119    30-OCT-72 19:05:52	EDIT BY CLEMENTS
;<TENEXDLM>SCHED.MAC;118    14-SEP-72 16:57:57	EDIT BY MURPHY
;<TENEXDLM>SCHED.MAC;117    23-AUG-72 20:31:28	EDIT BY MURPHY
;<TENEXDLM>SCHED.MAC;116     8-AUG-72 21:14:38	EDIT BY MURPHY
;5 JUL 72, 1339:

	SEARCH PROLOG
	TITLE MON

;TENEX SCHEDULER - D. MURPHY

	EXTERN DNJOBS,MSCNT1,JOBISK,JOBQNT,JOBLIM,ISKIN1,ISKIN2
	EXTERN ISKTCK,ISKDMS,TTRUBA,ISKPT1
	EXTERN AUTONX
	EXTERN PRIMRY
	EXTERN TTCH7,TTPSI,TADSEC,LSTERR,FACTSW,FLOGO
	EXTERN DIRLCK,DIRUSE,TCITST,TCOTST,TTEMES,FRZWT,CAPMSK,CAPENB
	EXTERN KSELF,LOGTOT,LOGDES,OTYLIN
	EXTERN TTFORK,EXEC0
	EXTERN BHC,BITS,CH6TAB
	EXTERN DDERS
	EXTERN TTYCKK
	EXTERN IMECHF,LINKF

IFDEF TYMSW,<EXTERN TYMNFK>
IFN SUMEX,<EXTERN TTCLZ>

	INTERN STMINQ	;ADDED FOR IMPDV SERVICE--LIEB
	INTERN SWHLT,SAVRT,DISMT,QNTDM1
	INTERN ARCSQ
	INTERN BLOCK0,BLOCK1
	INTERN ITRAP,DISGE,DISGET,DISL,DISLT,RSKP,R,JRET,JSKP,NJOBS
	INTERN PJMPG,PJMA,PPMPG,PPMA,PSB,JSB
	INTERN FREJPA,FREJP,JFNPC0,RJFN,MJFN,SJFN,SWPMA0
	INTERN NNAMES,SCDIN,ILIST,SCHEDP,.DISMS,SCHED0
	INTERN SCDRQ7,JOBSRT,TTPSRQ,PSIT1A,GETCHA,.DEBRK
	INTERN DISE,DISET,DISN,DISNT
	INTERN ASSFK,WTFPGS,WTSPT,SUSFKR,SUSWT,UCLOCK,ITRAP1
	INTERN STIME,ETIME,NSTAT,SETOVF,MAXQ,DISG,DISGT,BLOCKW
	INTERN SUPERP,PARALP,INFERP,PSILOB,TMZONE,DISLE,DISLET
	INTERN FFF,P1,P2,INDFLG
	INTERN .HALTF,EDISMS,HALTF1,HALTT
	INTERN HLTJB,HLTFK1,CLRM0,FRZB1,FRZB2,FRZBB
	INTERN PSIRQ0,PSIRQF,PSIRQB,CHNSON,PSIR4,FORCTM,PSIRQ,PIRQR

NBP=^D15		;MAX NUMBER PROCESSES IN BAL SET

NSKDP=40		;LOCAL PUSH LIST
NSCDRQ==60		;SIZE OF SCHEDULER REQUEST QUEUE

MINNR==3		;MIN SIZE OF RPLQ FOR LOADING FORK

;SEQUENCE TO UPDATE PROCESS AND SCHEDULER CLOCKS

IFN KAFLG,<
DEFINE UDCLK
<	SKIPE PIAPRX		;1 MS TICK LATELY?
	AOSA APCLKC		;YES, REQUEST UPDATE ON CH 7
	CAIA
	ISB SCDCHN
>>
IFN KIFLG,<
DEFINE UDCLK <
	SKIPE PIAPRX
	PUSHJ P,APCLKI
>>


;STORAGE

LS SKDPDL,NSKDP		;SCHEDULER LOCAL PDL
LS SKDPD1,NSKDP		;SCHEDULER PDL FOR CPU1
KS PI7P,1		;SCHED PDL PER PROCESSOR

LS ARCSQL,1		;SAVE PC FOR ARCSQ
KS MSCNT,1		;INDEX TO MSEC/TICK TABLE
IFN IMSSS,<
LS MSCTSA ,2
LS MSCTTY,17
>

LS NBTIM,1		;TIME FOR WAIT LIST SCAN
LS REMFLG,1		;FLAG THAT JOB HAS BEEN REMOVED OUT OF BALSET
KS PGUNTF,1		;PAGE UNTRAP FLAG FOR SCHEDULER
;
KS APCLKC,1		;COMMUNICATION TO CH7 FROM CH1 CLOCK INTERRUPT
KS CLKAC2,1		;CLOCK ROUTINE TEMP
KS CLKAC1,1		;  "
LS SYNCC,1		;  "
KS OLDTCK,1		;  "
KS PISC7R,2
LS FKPT6M,1		;-FKPT(6)

KS FORKX,1		;INDEX OF CURRENTLY RUNNING FORK

GS FKPGS,NFKS		;PTB,,PSB   SPT NUMBERS
GS FKSTAT,NFKS		;FORK WAIT TEST
GS FKWSP,NFKS		;WORKING SET PARAMETERS - TAV,,N
GS FKPGST,NFKS		;TEST WORD WHILE IN PAGE WAIT
GS FKQ,NFKS		;FORK SCHEDULING QUANTITIES
GS FKPT,NFKS		;LOCATION OF FORK,,FORK QUEUE POINTERS
GS FKINT,NFKS		;FORK INTERRUPT COMMUNICATION REG
GS FKINTB,NFKS		;INTERRUPT CHANNELS REQUEST
GS FKJOB,NFKS		;JOB NUMBER ,, JSB
GS FKNR,NFKS		;AGE,,BALANCE SET SIZE (RESERVE)
GS FKTIME,NFKS		;TIME AT WHICH FORK WAS PUT ON CURRENT QUEUE
GS FKCNO,NFKS		; BIT 0 = USER MODE FOR SCHED. ,, CORE NUMBER
GS FKINTT,NFKS		;TIMER INTERRUPT
GS FKINTW,NFKS		;TIMER INTERRUPT
LS FREFK,1		;LIST OF FREE FORKS
GS SYSIFG,1		;SYSTEM HAS BEEN INITIALIZED IF NOT 0
GS ACCIFG,1		;ACCOUNTING INITIALIZED WHEN NON-0
GS ENTFLG,1		;PERMIT NEW JOB ON ^C IF NON-0
GS PWRDWN,1		;POWER FAILURE DETECTED IF .G. 0, DONE IF .L. 0

GS JOBDIR,NJOBS		;ATTACHED DIRECTORY,,LOGIN DIRECTORY
GS JOBNAM,NJOBS		;JOB SUBSYSTEM NAME INDEX FOR SETNM
GS JOBRT,NJOBS		;JOB RUN TIME
GS JOBPT,NJOBS		;CONTROL TTY,,TOP FORK
IFN SUMEX,<
GS  JOBAL,NJOBS		;TIME IN BALANCE SET
GS  JOBGO,NJOBS		;TIME ON GOLIST
GS  JOBTAL,NJOBS	;TOTAL TIME IN BAL. SET FOR ALL FORKS
GS  JOBTIM,NJOBS	;TIME OF LAST CHANGE
LS  JOBTGO,NJOBS	;TOTAL TIME ON GOLIST FOR ALL FORKS
LS  JOBQNM,NJOBS	;# FORKS IN BAL.SET,,# FORKS ON GOLIST
LS  BALTIM,1		;TIME SINCE QUE CHANGE
>
IFN IMSSS,<GS KIDNUM,NJOBS>
LS FREJOB,1		;LIST OF FREE JOBS

LS WTLST,1		;WAITING FORK LIST
LS WTLSTL,1		; ... LAST

LS GOLST,1		;RUNNABLE FORK LIST
LS GOLSTL,1		; ... LAST
LS LOLST,1		;LOW PRIORITY RUNNABLE FORK LIST
LS LOLSTL,1		; ... LAST

LS JB0FLG,1		;RUN JOB 0 REQUEST
LS FRECB,1		;FREE CORE NUMBER BITS

;BALANCE SET VARIABLES

LS BALSET,NBP		;BALANCE SET LIST **DO NOT REORDER BALSET, NBT**
LS NBT,NBP		;TIME OF ENTERING BALSET
LS NBW,NBP		;TOD OF START OF LAST WAIT
IFN KIFLG,<LS KITBL,NBP>;POINTER TO UPT
LS FBALS,1		;1 + HIGHEST BALSET SLOT IN USE
LS NBPROC,1		;NUMBER OF PROCESSES IN BAL SET
LS NBRUN,1		;NUMBER RUNNABLE FORKS IN BALSET -1
LS NBWT,1		;NUMBER WAITING FORKS IN BALSET
LS NDSKW,1		;NUMBER FORKS WAITING FOR DSK
LS FXBST,1		;BEST FORK IN BALSET WHETHER WAITING OR NOT
LS NRBST,1		;FKNR OF BEST FORK NOT IN BALSET OR 0
LS MAXBSQ,1		;Q OF WORST PROCESS IN BAL SET
LS MAXBP,1		;MAX NUMBER OF JOBS IN BAL SET

GS TOTRC,1		;TOTAL NUMBER REAL CORE PAGES
GS SUMNR,1		;SUM OF RESERVE PAGES, ALL PROCESSES
GS BALSHC,1		;COUNT OF PAGES IN BALSET BECAUSE OF SHARING
GS PUBCL,1		;PROCESS USE BITS TO BE CLEARED AT GCCOR
GS NRPMIN,1		;MINIMUM VALUE OF NRPLQ
GS NRPLEV,1		;HIGHEST NORMAL LEVEL OF NRPLQ
GS MAXNR,1		;MAX VALUE OF SUMNR
GS CGFLG,1		;DEASSIGNED PAGES MAY EXIST IF >0
LS NEBAL,1		;NUMBER OF PROCESSES NOW ENTERING BALSET
KS RUNT1,1		;RUNTIME SINCE FORK BEGAN EXECUTION
LS NXTLJT,1		;EARLIEST TIME FORK CAN FORCE ENTER BALSET

GS NRPLQ,1		;NUMBER OF PAGES ON REPLACABLE QUEUE
GS RPLQ,1		;REPLACABLE QUEUE    END,,BGN

GS NPMAX,1		;MAX NUMBER OF PAGES IN CORE FOR ONE PROCESS
GS SNPMAX,1		;SMALL NPMAX FOR LOADED CONDITIONS
GS SJSIZ,1		;'SMALL' JOB SIZE
GS IRJAV,1		;NEAREST INTEGER TO RJAV

;SCHEDULER VARIABLES

KS SKEDF1,1		;START PROCESS VIA CH7 BREAK IN 1
KS SKEDF3,1		;PROCESS CLOCK COUNTED TO 0
KS INSKED,1		;IN SCHEDULER IF NON-ZERO
LS SSKED,1		;LAST JOB RUNNING HAS STOPLK

GS PSKED,1		;PAGE TRANSFER COMPLETED
GS ISKED,1		;SCHEDULE REQUEST FLAG
GS FSHBAL,1		; FLUSH BALSET REQUEST FLAG

LS NGOJOB,1		;NUMBER OF RUNNABLE JOBS
LS NLOJOB,1		;NUMB. OF RUNNABLE JOBS ON LOW QUEUE

LS BSCTIM,1		;TIME AT LAST CHANGE TO NBPROC
LS RJTTIM,1		;TIME AT LAST UPDATE TO RJTSUM
LS RJATIM,1		;TIME OF NEXT RJAV UPDATE
LS RJAVS1,1		;RJTSUM AT LAST RJAV UPDATE

;TABLES FOR SETNM

NNAMES==^D75		;NUMBER OF NAMES ALLOWED

GS SNAMES,NNAMES	;SIXBIT NAME OF SUBSYSTEM
GS STIMES,NNAMES	;ACCUMULATED RUNTIME OF SUBSYSTEM
GS SPFLTS,NNAMES	;ACCUMULATED PAGE FAULTS OF SUBSYSTEM
GS SWAKES,NNAMES	;WAKEUPS 0-14, SIZE INTEGRAL 15-35
GS SBLKTM,NNAMES	; BLOCKED FOR TTY TIME

;MONITOR STATISTICS
;DO NOT SEPARATE THE FOLLOWING - THEY ARE A DOCUMENTED
;GETAB TABLE...
KS SKDTM0,1		;TIME SPENT IN SKED WITH NO RUNNABLE JOBS
KS SKDTM1,1		;TIME SPENT IN SKED WITH 1 OR MORE RUNNABLE JOBS
KS SKDTM2,1		;TIME SPENT IN GCCOR
KS SPTTIM,1		;TIME SPENT IN PAGER TRAP CODE

GS SKDTMX,4		;GLOBALS FOR ABOVE FOR PROCESSOR LOCATIONS

GS DRMRD,1		;NUMBER OF DRUM READS
GS DRMWR,1		;NUMBER OF DRUM WRITES
GS DSKRD,1		;NUMBER OF DISK READS
GS DSKWR,1		;NUMBER OF DISK WRITES

GS TTYBKS,1		;NUMBER OF TTY WAKEUPS
GS TTINTS,1		;NUMBER OF TERMINAL INTERRUPTS
GS BSTSUM,1		;INTEGRAL OF NBPROC DT
GS RJTSUM,1		;INTEGRAL OF NBPROC+NGOJOB DT

NRJAVS==3		;NUMBER OF EXPONENTIAL AVERAGES MAINTAINED
GS RJAV,NRJAVS		;EXPONENTIAL AVERAGE OF NUMBER RUNNABLE FORKS

GS DSKWT,1		;SUM OF PROCESS DSK WAIT TIMES
GS DRMWT,1		;SUM OF PROCESS DRUM WAIT TIMES

GS NTTYIN,1		;TOTAL NUMBER TERMINAL INPUT CHARS
GS NTTYOT,1		;TOTAL NUMBER TERMINAL OUTPUT CHARS

GS NGCCOR,1		;COUNT OF GCCOR'S
GS PPGTIM,1		;INTEGRAL OF POSTPURGE TIME
GS NREMJ,1		;COUNT OF FORCED BALSET REMOVALS
GS BSWT,1		;SUM OF PROCESS WAIT TIMES

GS HSYST1,1		;TIME OF SYSTEM SHUTDOWN PENDING (GTAD FORMAT)
GS HSYST4,1		;AND GTAD TIME SYSTEM SCHEDULED BACK UP (OR 0)
GS HSYST5,1		;4 BIT CODE FOR REASON FOR DOWNTIME

NSTAT==27+NRJAVS		;NUMBER OF STATISTICS WORDS
;END OF SYSTAT GETAB TABLE ... LENGTH DEFINED BY NSTAT.
GS SPTIM1,1		;SPECIAL TIMER FOR I/O WAIT		SCHED. OVERHEAD
GS SPTIM2,1		;SPECIAL TIMER FOR I/O WAIT		NOSKED
GS SPTIM3,1		;SPECIAL TIMER FOR I/O WAIT		WAITING

GS QSUM,5		;ACCUMULATED TIME OF JOBS OF RESPECTIVE Q'S

;CLOCKS COUNTED DOWN AND TESTED, PARALLEL TO PCLKT, DON'T REORDER

KS RJQNT,1		;RUNNING JOB REMAINING QUANTUM
;
BEGCLK=ISKCLK		;BEGINNING CLOCK TO UPDATE IN LOOP
;   I4 CHANGE
GS ISKCLK,1		;ISK'S TIME REMAINING TO NEXT TICK
;
GS TTBTIM,1		;TIME TO NEXT TTY BIG BUFFER SERVICE
GS TIM2,1		;SECOND CLOCK, 100 MS

KS JOBRTT,1		;JOB RUNTIME SINCE LAST UPDATE

LS SCDRQI,1		;SCHEDULER REQUEST QUEUE
LS SCDRQO,1
LS SCDRQB,NSCDRQ

GS TODCLK,1		;MILLISECOND CLOCK, MONOTONICALLY INCREASING
GS CHKTIM,1		;TWO MINUTES PAST LAST JOB 0 CHECK

LS SCDRN1,1			;RUN ONLY FORK N IF N > -1

;PATCH SPACE FOR RES MON

SCDV1==1		;IF DEFINED MEANS ASSEMBLING MON
SCDVE==.-1		;UPPER LIMIT FOR CORE CLEAR ON STARTUP

FFF:
P1:
P2:	REPEAT 140,<0>

INDFLG:	0			; .NE. 0 MEANS LOCK JSB
				; .L. 0 MEANS USE NO INDIRECT PTRS

;SCHEDULER INITIALIZATION

SCDIN:	SETZM SYSIFG
	SETZM AUTONX
	SETZM PWRDWN
	SETZM ENTFLG
	MOVE 1,[JRST SCDRQ0]
	MOVEM 1,SCDRQ+1		;DISPATCH FOR JSR-CALLED ROUTINE
	MOVEI 1,GOLST
	MOVEM 1,GOLSTL
	MOVEI 1,WTLST
	MOVEM 1,WTLSTL
	MOVEI 1,LOLST
	MOVEM 1,LOLSTL
	MOVNI 1,FKPT		;BECAUSE MACRO DOESN'T HAVE NEG RELOC'N
	HRLI 1,6
	MOVEM 1,FKPT6M		;-FKPT(6)
	MOVEI 1,SCDRQB
	MOVEM 1,SCDRQI
	MOVEM 1,SCDRQO
	MOVEI 1,FKPT
	MOVEI 2,NFKS
	CALL ILIST		;INIT FREE FORK LIST
	MOVEM 1,FREFK
	MOVEI 1,JOBPT
	MOVEI 2,NJOBS
	CALL ILIST
	MOVEM 1,FREJOB		;INIT FREE JOB LIST
	SETOM JOBRT
	MOVE 1,[XWD JOBRT,JOBRT+1]
	BLT 1,JOBRT+NJOBS-1
	SETZM 20
	SETOM SCDRN1
	SETOM FORKX
	SETOM TADSEC
	SETOM SSKED
	MOVE 1,[XWD 000377,777777] ;BITS IN PROCESS USE REG.
	MOVEM 1,FRECB
	MOVEI 1,BALSET
	MOVEM 1,FBALS
	MOVEM 1,INSKED
	MOVE 1,[FACTON]
	MOVEM 1,FACTSW		;FACT FILE ON AND INIT THE RESET=0
	MOVSI 1,(1B1)
	MOVEM 1,CHKTIM		;PREVENT JOB 0 ALARM UNTIL INITIALIZED
	SETZM PGUNTF	;RESET SCHEDULER FLAG FOR TRAP LOGIC
	RET

ILIST:	ADDI 1,-1(2)
	SETZM 0(1)		;INIT FREE LIST, BLOCK ADR IN AC1,
	SOJLE 2,ILIST1		;  SIZE OF BLOCK IN 2
	MOVEM 1,-1(1)
	SUBI 1,1
	SOJG 2,.-2
ILIST1:	RET

;CHANNEL 7 INTERRUPT
;CLOCK, POSSIBLE RESCHEDULING, OR START PROCESS FROM SCHEDULER

PISC7:	XWD PISC7R,.+1
;
   IFN KIFLG,<
	CLSB SCDCHN		;ISB MUST BE EXPLICITLY CLEARED ON KI
>
	SKIPE PGUNTF		;TRAP LOGIC REQUEST
	JRST SCDR		;YES
IFN KIFLG,<
	MOVEM 1,KIP7A
	SKIPE KIP7Q		;REQUEST FROM KI RETURN?
	JRST [	MOVE 1,KIP7P	;YES, GET PC AND FLAGS
		MOVEM 1,PISC7R	;SET TO GO THERE
		SETZM KIP7Q	;CLEAR REQUEST
		SETZM KIP7F
		JRST .+1]
	MOVE 1,PISC7R
	TLNE 1,UMODF		;IN USER MODE?
	JRST KIP71		;YES,OK TO INTERRUPT
	MOVEI 1,0(1)
	CAIGE 1,KIEPT+1000
	CAIGE 1,KIEPT		;EXECUTING IN MAP PAGE
	JRST .+2
	JRST KIP72
	CAIL 1,KIBGN		;IN PAGER SIMULATION CODE?
	CAIL 1,KIEND
KIP71:	SKIPA 1,KIP7A		;NO,OK TO INTERRUPT
KIP72:	JRST [	AOS KIP7F	;YES,REMEMBER INTERRUPT NEEDED
		MOVE 1,KIP7A
		JEN @PISC7R]>

	SKIPE ISKED
	AOSA SKEDF3		;RESKED REQUEST
	SKIPE APCLKC		;CLOCK TICK?
	JRST APCLK		;SERVICE IT
APCLKX:	SKIPE SKEDF1		;INITIATED BY SCHEDULER?
	JRST SCDR		;YES, GO START PROCESS
	SKIPG INSKED		;IN SCHEDULER NOW, OR
	SKIPG SKEDF3		;NO SCHEDULING REQUESTS?
	JEN @PISC7R		;IGNORE INTERRUPT
	SKIPN TRAPPC		;PAGER TRAP STARTING?
	SKIPE NSKED		;OK TO RESCHEDULE?
	JRST SCDW		;NO, GO SET TRAPS
	MOVEM 17,PAC+17		;YES, SAVE PROCESS AC'S
	MOVEI 17,PAC
	BLT 17,PAC+16
	MOVE 1,KI40
	MOVEM 1,PSB40
	MOVE 1,IMECHF		;COPY FROM KIEPT TO PSB
	MOVEM 1,PSBIME
	SETZM IMECHF
	MOVE 1,LINKF
	MOVEM 1,PSBLIN
	SETZM LINKF
	MOVE 1,PISC7R
	MOVEM 1,PPC
	AOS INSKED
	IFN KIFLG,<JSP 7,KISSAV>	;SAVE STUFF PECULIAR TO KI-10
	JEN @[SCHED0]

SCDW:	MOVEM 1,RSKED		;SAVE AC1
	MOVE 1,RSKEDT		;GET TRAP INSTRUCTION
	EXCH 1,RSKED		;LEAVE IT TO GET EXECUTED
	JEN @PISC7R

RSKEDN:	JFCL 0			;NO-TRAP CONTENTS OF RSKED
RSKEDT:	JSYS RSKD0		;TRAP CONTENTS OF RSKED

;SETUP AND RESUME PROCESS

SCDR:	SETZM SKEDF1		;CLEAR LOCAL FLAG
;	SKIPE ISKED		;ANY REQUESTS LATELY?
;	JEN @[SCHED0]		;YES, RESCHEDULE AGAIN
	SETZM INSKED		;NO LONGER IN SCHEDULER
	SETOM SSKED
	SKIPE PGUNTF		;TRAP LOGIC REQUEST
	JRST SCDR1		;YES
	SETOM MSCNT1		;INSURE JOB GETS ENOUGH TIME
	SOS MSCNT1
	IFN KIFLG,<JSP 7,KISLOD>	;LOAD STUFF PECULIAR TO KI-10
	MOVE 1,PSB40
	MOVEM 1,KI40
	MOVE 1,PSBIME		;COPY FROM PSB TO KIEPT
	MOVEM 1,IMECHF
	MOVE 1,PSBLIN
	MOVEM 1,LINKF
	MOVSI 17,PAC		;RESTORE PROCESS AC'S
	BLT 17,17
SCDR1:	SETZM PGUNTF	;RESET TRAP FLAG
	JEN @PPC		;RUN PROCESS

;VARIOUS WAYS OF ENTERING SCHEDULER

;JSYS HALTF - DISMISS FORK UNTIL INTERRUPT OR EXTERNALLY RESTARTED

.HALTF:	JSYS MENTR
HALTF1:	CALL FKTMI		;FORK TERM INTERRUPT
HALTX:	MOVEI 1,HALTT
	JSYS EDISMS
	JRST MRETN		;IF CONTINUED

HALTT:	JRST 0(4)		;IDENTIFIABLE TEST FOR HALTED FORK

;EXEC DISMISS - AC1 CONTAINS  XWD DATA,TEST ROUTINE ADR

EDISMS:	XWD FPC,EDMSQ
EDMSQ:	AOS INSKED
	ENTSKD		;ENTER SCHEDULER
DISMS1:	MOVE 2,FPC		;USE JSYS RETURN AS PPC
	MOVEM 2,PPC
DISMSE:	SKIPE NSKED		;CHECK FOR BUGGY DISMISS
	BUG(HLT,<DISMISS WHILE NOSKED>)
	PUSH P,1
	LSH 1,-^D9
	ANDI 1,777
	CAML 1,MONCOR
	BUG(HLT,<DISMISS WITH NON-RES TEST ADDRESS>)
	POP P,1
	MOVEM 1,FKSTAT(7)	;PUT IN TEST WORD
	CALL SAVRT
	SETZM JOBCK0		;INIT MEASURING INTERVAL
	HRRZ 2,FKNR(7)
	IMULI 2,^D20		;RETAIN FORK IN BALSET FOR 20*NR MS
	CAMLE 2,MAXBSH		;IMPOSE LIMIT
	MOVE 2,MAXBSH
	HRRZ 1,FKSTAT(7)
	CAIE 1,BLOCKM
	CAIN 1,BLOCKT		;DISMISSED FOR WAIT .G. 500 MS?
	SETZ 2,			;YES, DON'T RETAIN IN BALSET
	MOVE 1,TODCLK
	ANDI 1,377777
	ADDI 1,0(2)
	MOVSI 1,0(1)
	HRRI 1,DISMT
	MOVEM 1,FKPGST(7)
	JRST SCHP3

MAXBSH:	0		;MAX BALSET 'HYSTERESIS'

;SET QUEUE INTERNAL JSYS

ARCSQ:	XWD ARCSQL,ARCSQ1
ARCSQ1:	JSR BUGCHK
	CAIL 1,0
	CAIL 1,5
	MOVEI 1,4		;FIX HIM
	PUSH	P,2		;SAVE 2
	NOSKED
	HRL	1,FORKX		;FUNNY STUFF TO SAVE A PUSH
	MOVE 2,QBASE+1(1)
	HRLI 2,0(1)		;QUEUE,,TIME
	MOVSS	1,1		;GET FORKX
	MOVEM 2,FKSTAT(1)	;SET HIS QUEUE STATUS
	MOVSS	1,1		;GET QUE NUM AGAIN
	MOVEI 2,0(2)
	SUB 2,QBASE(1)		;AND QUANTUM
	MOVEM 2,RJQNT
	MOVE 2,TODCLK
	MOVSS	1,1		;FORKX AGAIN
	MOVEM 2,FKTIME(1)	;AND TIME ON QUEUE
	OKSKED
	POP	P,2		;RESTORE 2
	JRST @ARCSQL


;RESCHEDULE ON PAGE WAIT

SCHEDP:	XWD SKDPC,.+1
	SKIPE INSKED
	BUG(HLT,<CALL TO SCHEDULER WHEN ALREADY IN SCHEDULER>)
	AOS INSKED
	ENTSKD
SCHP1:	PUSH P,1
	MOVE 1,SKDPC
	MOVEM 1,PPC
	MOVE 1,0(P)
	CALL SAVRT
	POP P,1
	MOVEM 1,FKPGST(7)
SCHP3:	HRRZ 10,FKPT(7)
	MOVE 1,TODCLK		;REMEMBER TIME WAIT STARTED
	MOVEM 1,NBW(10)
	MOVSI 1,400000
	CALL SCHP2
	JRST SCHED0

SCHP2:
	AOS OVERH
	AOSE GENLCK
	JRST .-1		;EXAMINE STOPLK
	SKIPL STOPLK		;ONLY RUN FORK OWNING IT
	JRST [CAMN 7,STOPLK+1
		MOVEM 7,SSKED	;WE OWN STOPLK
		JRST .+1]
	SETOM GENLCK
	SOS OVERH
	HRRZ 10,FKPT(7)		;PROCESS NUMBER
	SKIPN NSWAP		;NON-SWAPPABLE?
	SKIPE NSKED		;NON-RESCHEDULABLE?
	TLO 1,200000		;YES
	HLLM 1,BALSET(10)	;WAITING FLAG
	HRRZS FKPT(7)
	MOVNI 7,1
	XOR 7,CPUID		;SET FORKX TO -1 FOR CPU0,-2 FOR CPU1
	MOVEM 7,FORKX
	RET

;DO OKSKED AND RESCHEDULE

SCHEDR:	XWD SKDPC,.+1
	SKIPE INSKED
	BUG(HLT,<CALL TO SCHEDULER WHEN ALREADY IN SCHEDULER>)
	AOS INSKED
	ENTSKD
	SOSGE NSKED
	BUG(HLT,<OKSKED WHEN NOT NOSKED>)
	JRST SCHP1

;DEFERRED SCHEDULING REQUEST TRAP

RSKD0:	XWD SKDPC,.+1
	AOS INSKED
	ENTSKD		;ENTER SCHEDULER
	MOVE 1,SKDPC
RSKD2:	MOVEM 1,PPC
RSKD3:	MOVE 1,RSKEDN
	MOVEM 1,RSKED
	JRST SCHED0

RSKD1:	AOS INSKED
	ENTSKD		;FROM PGUNTP
   IFN KIFLG,<
	HRRZ 1,PPC		;SEE IF NOW OK TO SCHEDULE
	CAIL 1,KIEPT
	CAIL 1,KIEPT+1000	;MAP PAGE
	JRST .+2
	JRST SCHED4
	CAIL 1,KIBGN
	CAIL 1,KIEND>		;WITHIN PROTECTED AREA?
	SKIPE NSKED		;OR FLAG SET?
	JRST SCHED4
	HRRZ 1,MJRSTF
	CAIN 1,FPC		;DEFERRED INTERRUPT WAITING?
	JRST RSKD3		;NO
	MOVEI 1,PSISV2		;YES
	EXCH 1,PPC		;SET TO CHECK IT NEXT RUNNING
	MOVEM 1,PIPC
	JRST RSKD3

;COMMON SCHEDULER ENTER ROUTINE, SAVE AC'S AND SET INSKED FLAG

ENSKED:	XWD ENSKR,.+1
	AOS INSKED		;PREVENT ACTION BY CH7 BREAK
	MOVEM 17,PAC+17		;SAVE PROCESS AC'S
	MOVEI 17,PAC
	BLT 17,PAC+16
	MOVE 7,KI40
	MOVEM 7,PSB40
	MOVE 7,IMECHF		;COPY FROM KIEPT TO PSB
	MOVEM 7,PSBIME
	SETZM IMECHF
	MOVE 7,LINKF
	MOVEM 7,PSBIME
	SETZM LINKF
	IFN KIFLG,<JSP 7,KISSAV>	;SAVE STUFF PECULIAR TO KI-10
	MOVE 7,FORKX		;GET INDEX OF CURRENT FORK
	MOVE P,PI7P		;GET PDL POINTER
	JRST @ENSKR

;INSTRUCTION TRAP - TRAP PC IN FPC, ASSUMED TO BE I +1

ITRAP1:	MOVEM 1,LSTERR		;SAVE ERROR CODE GIVEN IN 1
ITRAP:	SKIPE INSKED
	BUG(HLT,<INSTRUCTION TRAP WHILE IN SCHEDULER>)
	SKIPL FORKX		;NO FORK RUNNING, OR
	CONSZ PI,177B27		;PI IN PROGRESS?
	BUG(HLT,<INSTRUCTION TRAP WHILE PI IN PROGRESS OR IN SCHEDULER>)
	SKIPGE SLOWF		;NOW IN SLOW CODE?
	JSYS MENTR		;NO, ENTER
ITR3:	MOVE 1,MPP		;STACK PTR ON ENTERING THIS CONTEXT
	MOVE 2,0(1)		;RETURN PC
	TLNN 2,UMODF		;PREVIOUS CONTEXT INTERRUPTABLE?
	SKIPGE -2(1)		;I.E. USER MODE, OR INTDF .L. 0
	JRST ITR2		;YES, OK
	SKIPA
	BUG(CHK,<INSTRUCTION TRAP AND PREVIOUS CONTEXT WAS NOINT>)
ITR2:	SETZM NSKED
	SETOM TRAPC		;CLEAR FLAGS AND COUNTERS
	SETZM INTDF		;SET TO 1 LEVEL NOINTERRUPT
	MOVE 1,JOBNO		;MAKE SURE THIS FORK HASN'T LEFT
				;JOBLCK LOCKED
	MOVE 2,FORKX
	AOS OVERH
	PIOFF
	AOSE GENLCK		;PROTECT FROM OTHER JOBLCK'RS
	JRST .-1
	SKIPL JOBLCK(1)
	CAME 2,JOBLKF(1)
	SKIPA
	SETOM JOBLCK(1)		;IF LOCKED BY THIS FORK, RESET
	SETOM GENLCK
	PION
	SOS OVERH

	MOVE 1,CHNSON
	ANDCAM 1,PSIBW		;FLUSH PREVIOUS PANIC BREAKS
	MOVEI 1,^D15		;INITIATE CHANNEL 15 INTERRUPT
	CALL PSIRQ0
	RESKED			;GET THE INTERRUPT "SEEN"
	OKINT			;INTERRUPT SHOULD TAKE HERE
	MOVE P,UPP		;RETURN TO USER IF CONTINUED
	ADD P,BHC+2
	JRST MRETN

;BLOCK UNTIL CONDITION SATISFIED
;BLOCK0 - STAYS IN BALSET,  BLOCK1 - LEAVES BALSET

BLOCK0:	XWD SKDPC,.+1
	AOS INSKED
	ENTSKD
	CALL BLOCKS
	JRST SCHP1

BLOCK1:	XWD SKDPC,.+1
	AOS INSKED
	ENTSKD
	CALL BLOCKS
	MOVE 2,SKDPC
	MOVEM 2,PPC
	JRST DISMSE

BLOCKS:	MOVNI 1,^D100
	ADDM 1,RJQNT		;CHARGE Q TO PREVENT HOGGING
	MOVNI 1,2
	ADDM 1,SKDPC		;MAKE RETURN TO INSTRUCTION BEFORE CALL
	MOVE 1,TODCLK
	ANDI 1,377777
	ADDI 1,^D100		;ADD 100 MILLISECS
	MOVSI 1,0(1)
	HRRI 1,BLOCKW
	RET

BLOCKM:	JFCL			;SCHED TEST FOR .5 TO 64 SEC.
BLOCKW:	MOVE 2,TODCLK		;SCHEDULER TEST, GET TIME
	ANDI 2,377777
	SUB 1,2			;DESIRED - NOW = WAIT LEFT
BLK2:	JUMPLE 1,1(4)		;NO WAIT TIME LEFT
	CAIGE 1,200000		;BIG DIFFERENCE?
	JRST 0(4)		;NO, KEEP WAITING
	SUBI 1,400000		;YES, COMPENSATE FOR WRAPAROUND
	JRST BLK2

;DISMISS UNTIL WORD .GE. 0

DISGE:	PUSH P,1
	HRLI 1,DISGET		;GIVEN MON ADDRESS IN 1
DISXE:	MOVS 1,1
	JSYS EDISMS
	POP P,1
	RET

DISGET:	SKIPGE 0(1)
	JRST 0(4)
	JRST 1(4)

;DISMISS UNTIL WORD .L. 0

DISL:	PUSH P,1
	HRLI 1,DISLT
	JRST DISXE

DISLT:	SKIPL 0(1)
	JRST 0(4)
	JRST 1(4)

;DISMISS UNTIL WORD .G. 0

DISG:	PUSH P,1
	HRLI 1,DISGT
	JRST DISXE

DISGT:	SKIPG 0(1)
	JRST 0(4)
	JRST 1(4)

;DISMISS UNTIL WORD .LE. 0

DISLE:	PUSH P,1
	HRLI 1,DISLET
	JRST DISXE

DISLET:	SKIPLE 0(1)
	JRST 0(4)
	JRST 1(4)

;DISMISS UNTIL WORD .E. 0

DISE:	PUSH P,1
	HRLI 1,DISET
	JRST DISXE

DISET:	SKIPE 0(1)
	JRST 0(4)
	JRST 1(4)

;DISMISS UNTIL WORD .N. 0

DISN:	PUSH P,1
	HRLI 1,DISNT
	JRST DISXE

DISNT:	SKIPN 0(1)
	JRST 0(4)
	JRST 1(4)

;DISMISS FOR SPECIFIED TIME JSYS

.DISMS:	JSYS MENTR
	JUMPLE 1,MRETN
	CAIL 1,100000		;LONG OR SHORT TIME?
	JRST TDIS1		;LONG
	MOVE 2,TODCLK
	ANDI 2,377777
	ADDI 2,0(1)		;COMPUTE TIME TO RESTART
	CAIGE 1,^D500		;USE BLOCKW FOR WAIT .L. 500 MS
	SKIPA 1,[BLOCKW]
	MOVEI 1,BLOCKM		;BLOCKM OTHERWISE
	HRLI 1,0(2)
TDIS2:	JSYS EDISMS		;DISMISS WITH SPECIFIED TEST
	JRST MRETN

TDIS1:	CAML 1,[XWD 400,0]
	MOVSI 1,400		;APPROX 17 HRS IS MAX PERMITTED
	MOVE 2,TODCLK
	TLZ 2,777000
	ADD 2,1			;COMPUTE TIME TO RESTART
	LSH 2,-^D10		;DIVIDE BY 1024
	MOVSI 1,0(2)
	HRRI 1,BLOCKT
	JRST TDIS2		;GO COMPLETE DISMISSAL

;SCHEDULER WAIT TEST FOR LONG WAIT

BLOCKT:	LSH 1,^D10		;RESTORE WAKEUP TIME TO FULL SIZE
	MOVE 2,TODCLK		;GET TIME NOW
	TLZ 2,777000
	SUB 1,2			;DESIRED-NOW = TIME LEFT TO WAIT
BLKT1:	JUMPLE 1,1(4)		;WAKEUP IF NEGATIVE
	CAMG 1,[XWD 400,0]	;VERY LARGE DIFFERENCE?
	JRST 0(4)		;NO, KEEP WAITING
	SUB 1,[XWD 1000,0]	;COMPENSATE FOR WRAPAROUND
	JRST BLKT1		;CHECK AGAIN

;SCHEDULER

SCHED0:	SETZ 0,			;FOR PEOPLE WATCHING LIGHTS
SCH0:	CONSZ PI,177B27		;ANY PI IN PROGRESS?
	BUG(HLT,<ENTERED SCHEDULER WITH PI IN PROGRESS>)
	MOVE P,PI7P		;SETUP LOCAL PDL

;	MAKE STOP CHECKS SINCE WE ARE NOW AT CONVENIENT PLACE
;	TO STOP IF REQUESTED

	SKIPE CP1ON		;CPU1 HALT REQUEST
	SKIPN CPUID
	JRST SCH04		;NO
	CALL DISMSJ
	HLLZS 21
	MOVE 1,21		;FORCE DISPLAY
	SETZM CP1INF		;NOT RUNNING
	MOVE 1,[MOVSI 16,-100]
	MOVE 2,[AOBJN 16,2]
	MOVE 3,[SKIPE CP1ON]
	MOVE 4,[JRST 1]
	MOVE 5,[JRST .+2]
	JRST 1
	SETOM CP1INF
SCH04:	SKIPGE FORKX
	JRST [ SKIPN CPUID
		HRRZS 21
		SKIPE CPUID
		HLLZS 21
		MOVE 1,21	;FORCE DISPLAY
		JRST .+1 ]
	SKIPL DDTLCK		;STOP FOR DDT BREAKPOINT?
	SKIPN DDTFLG		;SEE IF OPTION SAYS TO STOP FOR DDT
	JRST .+2		;DON'T HAVE TO STOP
	JRST .-3
;
	SKIPL STOPLK		;STOP CPU REQUEST?
	CALL PRTST		;YES-CHECK FURTHER
;
	SKIPE CPUID
	JRST SCH01		;SKIP UPDATES ON CPU1
	MOVE 1,NBPROC
	ADD 1,NGOJOB
	MOVE 2,TODCLK
	SUBM 2,RJTTIM		;REAL TIME SINCE LAST UPDATE TO RJTSUM
	EXCH 2,RJTTIM
	IMUL 2,1		;COMPUTE NBPROC+NGOJOB DT
	ADDM 2,RJTSUM
	MOVE 2,TODCLK
	CAML 2,RJATIM		;TIME FOR RJAV UPDATE?
	CALL DORJAV		;YES
	LSH 1,^D9
	ADD 1,NBPROC
	HRLI 0,0(1)		;DISPLAY NRUN, NBPROC IN LH 0
	MOVEM 0,22		;AND 22
SCH01:
	MOVE 1,TODCLK
	SUB 1,OLDTCK		;MAKE SURE CLOCKS GET UPDATED
	CAIG 1,^D100
	JRST SCH0X
	UDCLK
SCH0X:
	SKIPG RJQNT		;DISMISS FORK IF QUANTUM EXCEEDED
	CALL QNTDMS
	SKIPE CPUID
	JRST SCH02
	MOVSI 16,-NPCLKS	;SCAN PROCESS CLOCKS
	SKIPG BEGCLK(16)	;EXHAUSTED?
	XCT PCLKT(16)		;YES, SERVICE WHATEVER
	AOBJN 16,.-2
SCH02:
	SETZM SKEDF3
	SOS OVERH
	SLOCK RQOLCK		;LOCK OUTPUT REQUEST QUEUE
	JRST  [AOS OVERH
		JRST SCH03]	;DIDN'T GET LOCK-CONTINUE AROUND THIS
	AOS OVERH
	MOVE 4,SCDRQO
	CAME 4,SCDRQI		;ANY REQUESTS?
	CALL SCDRQ1		;YES
	ULOCK RQOLCK		;UNLOCK LOCK
SCH03:
;
;
	SKIPGE 7,FORKX		;HAVE A FORK
	JRST SCHX1		;NO--NOTHING TO DISMISS
	HLRZ 1,FKQ(7)		;GET PRIORITY
	JUMPE 1,SCH1		;TOP PRI--DONT DISMISS
;
;
	SKIPN ISKED		;SCHED REQUEST?
	SKIPE PSKED		;OR SWAP COMPLETED?
	CALL DISMSJ		;YES, STOP RUNNING CURRENT FORK
SCHX1:
	SKIPN ISKED		;SCHED REQUEST?
	SKIPN NBPROC		;ANYONE RUNNING
	JRST .+2		;YES- BETTER SEE
	JRST SCH1		;NO
	SOS OVERH
	SLOCK SKDLCK		;LOCK THIS CODE
	JRST [ AOS OVERH
		JRST SCH1 ]
	AOS OVERH
	MOVE 1,TODCLK
	CAMGE 1,NBTIM		;TIME YET
	SKIPN NBPROC		;OR NOBODY RUNNING
	JRST .+2
	JRST SCHX2		;DONT DO
	ADDI 1,^D20		;TRY 10MS LATER
	MOVEM 1,NBTIM
	CALL SCHED1		;CHECK WAITING FORKS
SCHX2:	ULOCK SKDLCK		;UNLOCK LOCK

SCH1:	SKIPE PWRDWN		;POWER FAIL DETECTED?
	JRST SCHPRF		;YES
	SOS OVERH
	HLOCK SW20LK		;LOCK WHILE EXAMINING SWITCHES
	AOS OVERH
	SKIPE 1,20		;REQUEST FROM SWITCHES?
	JSP 4,SWTST		;YES
	HULOCK SW20LK
	SKIPL 7,FORKX		;JOB TO CONTINUE?
	JRST SCHED3		;YES
	SOS OVERH
	SLOCK SKDLCK		;LOCK SCHEDULING PROCEDURE
	JRST	[ AOS OVERH
		JRST SCH0 ]
	AOS OVERH
	CALL SKDJOB		;NO, GO SCHEDULE ONE

SCHED3:	
	HLOCKI PSILCK
	SKIPGE 1,FKINT(7)	;INTERRUPT REQUEST?
	TLNE 1,200000		;AND NOT ONE IN PROGRESS
	JRST SCHE14
	MOVSI 1,200000		;CLEAR WORD EXCEPT FOR PI IN PROG
	EXCH 1,FKINT(7)
	MOVEM 1,PIMSK		;PASS REQUEST WORD TO SERVICE ROUTINE
	MOVEI 1,PIRQ		;PSEUDO-INTERRUPT SERVICE
	IFN KIFLG,<TLO 1,(1B6)>	;SO UXCT GOES TO USER
	EXCH 1,PPC
	MOVEM 1,PIPC		;SAVE OLD PC
SCHE14:	HULOCK PSILCK
	OKPI
SCHED4:	JSP 3,UCLK1	;KEEP CLOCKS UP TO DATE
	AOS SKEDF1		;SET FLAG FOR CH7 ROUTINE
	ISB SCDCHN		;LET IT START PROCESS
	JRST .-1		;JUST IN CASE ....

	DEFINE ECALL (D)
<IFDEF D'CHN,<EXTERN D'CHK
	CALL D'CHK
	GS D'TIM
>>

;TABLE OF SERVICE CALLS FOR PROCESS CLOCKS

PCLKT:
;	I4 ROUTINES
	CALL ISKTCK	;INTERVAL SCHED OVERFLW
;
BKGNDT:	CALL SKDLV8		;EVERY TICK STUFF ('LEVEL 8')
	CALL CLK2		;SECOND LEVEL CLOCK
NPCLKS==.-PCLKT
NBKR==.-BKGNDT		;THE (LAST) N OF THESE TO RUN ANYTIME

SKDLV8:	;;;ECALL IMP		;NETWORK
	CALL DDERS		;CHECK FOR RECOVERABLE DISK/DRUM ERRORS
				;!! MAH @ SUMEX 7/75 !!
	JRST TTCH7		;TTY BIG BUFFER

;SECOND PROCESS CLOCK, LESS PRECISE, UPDATES EVERY 100 MS

CLK2:	MOVSI 1,(1B1)
	SKIPL SCDRN1		;RUNNING SPECIFIC JOB?
	MOVEM 1,CHKTIM		;YES, DISABLE JOB 0 CHECK
	MOVE 1,TODCLK
	JRST .+2
;;;	CAML 1,CHKTIM		;JOB 0 OVERDUE?
	BUG(HLT,<JOB 0 NOT RUN FOR TOO LONG, PROBABLE SWAPPING HANGUP>)
;;;	MOVEI 15,^D100
	MOVEI 15,^D300
	EXCH 15,TIM2		;SET NEW TIME, GET OLD
;;;	SUBI 15,^D100		;COMPUTE ACTUAL TIME SINCE LAST UPDATE
	SUBI 15,^D300
	MOVSI 14,-N2CLKS	;SET TO SCAN SECOND LEVEL CLOCKS
CLK21:	ADDM 15,DSKTIM(14)	;UPDATE CLOCK
	SKIPG DSKTIM(14)	;COUNTED OUT?
	XCT CLK2CL(14)		;YES, DO WHATEVER
	AOBJN 14,CLK21
	AOS ISKED		;DO COMPLETE RESKED AT LEAST THIS OFTEN
	RET

;TABLE OF CALLS FOR SECOND LEVEL CLOCKS

CLK2CL:	ECALL DSK		;DISK RE-QUEUE CHECK
IFDEF IMPCHN,<		;IMP
	EXTERN IMPCHK
	CALL IMPCHK
	GS IMPTM2,1 >
	ECALL MTA		;MAG TAPE
	ECALL PTP		;PAPER TAPE PUNCH
	ECALL PLT		;PLOTTER
	ECALL DTA		;DECTAPE
	ECALL LPT		;PHYSICAL LPT
	
	ECALL PCM
IFDEF AUDN,<
	EXTERNAL AUDCHK
	CALL AUDCHK
	GS AUDTIM
>

N2CLKS==.-CLK2CL

RSKP:	AOS 0(P)		;RETURN (VIA PDL) SKIPPING
R:	RET

PI7P0:	IOWD NSKDP,SKDPDL
PI7P1:	IOWD NSKDP,SKDPD1

;UPDATE RUNNABLE JOB AVERAGES

DORJAV:	MOVEI 2,^D1000
	ADDM 2,RJATIM		;SET TIME OF NEXT UPDATE
	MOVE 4,RJTSUM		;CURRENT INTEGRAL OF NBPROC+NGOJOB
	SUBM 4,RJAVS1		;DIFFERENCE FROM LAST UPDATE
	EXCH 4,RJAVS1
	FSC 4,233		;FLOAT IT
	FDVRI 4,(1000.0)	;AVERAGE OVER LAST 1000 MS
	JOV .+1			;CLEAR OV FLAG
	MOVSI 2,-NRJAVS
SCHC1:	MOVE 3,EXPFF(2)
	FMPRM 3,RJAV(2)		;SUM*EXP(-T/C) -) SUM
	JOV [	SETZM RJAV(2)	;THAT MAY HAVE UNDERFLOWED,
		JRST .+1]	;IF SO, CLEAR IT TO 0
	MOVE 3,4
	FMPR 3,EXPGF(2)
	FADRM 3,RJAV(2)		;TERM*(1-EXP(-T/C)) + SUM -) SUM
	AOBJN 2,SCHC1
	MOVE 2,RJAV		;1 MIN AV.
	FADRI 2,(0.5)		;ROUND
	MULI 2,400		;FLOAT-TO-FIX
	ASH 3,-243(2)
	MOVEM 3,IRJAV		;MAINTAIN INTEGER VALUE
	RET

;TABLE OF EXP(-T/C) FOR T = 1 SEC.

EXPFF:	EXP 0.983471454		;C = 1 MIN
	EXP 0.996672216		;C = 5 MIN
	EXP 0.998889506		;C = 15 MIN

;TABLE OF 1-EXP(-T/C) FOR T = 1 SEC

EXPGF:	EXP 0.0165285462	;C = 1 MIN
	EXP 0.00332778395	;C = 5 MIN
	EXP 0.00111049406	;C = 15 MIN

;TEST WORD DEPOSITED BY SWITCHES IN 20

SWTST:	SETZM 20
	JFFO 1,.+1
	CAIGE 2,NSWTT
	XCT SWTT(2)
SWTST1:	JRST 0(4)		;RESUME SCHEDULER

SWTT:	JRST SWHLT		;HALT T.S.
	JRST SWRUN1		;RUN ONLY SPECIFIED JOB
	JRST SWCRSH		;INITIATE JOB0 FUNCTION
IFN SUMEX,<JRST SWSVIM>		;SAVE TENEX CORE IMAGE
NSWTT==.-SWTT

SWHLT:	CALL DISMSJ		;DISMISS CURRENT JOB
	PUSH P,DCHKSW
	SETOM DCHKSW
	MOVNI 0,1
	BUG(CHK,<SCHED HALTED>)	;GO TO DDT
SWHLT1:	POP P,DCHKSW
IFN IMSSS,< SKIPE DBUGSW >
	SKIPE DDTPRS
	JRST .
	HULOCK SW20LK		;UNLOCK LOCK
	JRST SCHED0

SWRUN1:	HRREI 1,0(1)		;-1 OR JOB NUMBER IN RH
	JUMPL 1,SWRUN2		;-1 MEANS RESTORE TO NORMAL
	CAIGE 1,NJOBS		;LEGAL JOB NUMBER?
	SKIPGE JOBRT(1)		;RIGHT HALF OF SWITCHES SPECIFIES JOB
	JRST SWTST1		;EXCEPT THAT JOB DOESN'T EXIST
SWRUN2:	MOVEM 1,SCDRN1		;ALLOW ONLY THAT JOB TO RUN
	CALL DISMSJ		;DISMISS CURRENT FORK
	JRST SWTST1

SWCRSH:	SETZM NXTDMP		;DO DDMP
	SETZB 1,DDTIME
	AOS JB0FLG		;DO JOB 0
	JRST SWTST1

IFN SUMEX,<			;!! MAH @ SUMEX 2/75 !!
SWSVIM:	PIOFF			;DUMP IMAGEE OF SYS ONTO DISK
	JSR CRSHSV
	PION
	JRST SWTST1
> ;END IFN SUMEX

;POWER FAIL DETECTED

SCHPRF:	CALL DISMSJ		;FLUSH CURRENT FORK
	MOVE 1,TODCLK
	ADDI 1,2	;WAIT 2MS FOR IO TO STOP
	CAMLE 1,TODCLK
	JRST .-1
	PIOFF 610000		;CLEAR WORLD
	CONO APR,1B19
	SETOM PWRDWN		;SAYS WE FINISHED PWR DWN SEQUENCE
	JRST 4,.		;SYSTEM SHOULD BE RESTARTABLE AT SYSRST

;SCHEDULER REQUEST PROCESSOR

;SCDRQ7 CALLED BY ROUTINES HAVING PDL POINTER IN P

SCDRQ7:	NOPI
	JSR SCDRQ
	OKPI
	RET

;SCDRQ CALLED BY JSR AFTER HAVING TURNED OFF PI SYSTEM

KS SCDRQ,2

SCDRQ0:
	AOS OVERH		;PROTECT Q BY LOCKING IT
	AOSE RQILCK
	JRST .-1
	SOS OVERH
	MOVEM 1,@SCDRQI
	MOVE 1,SCDRQI
	ADDI 1,1
	CAIN 1,SCDRQB+NSCDRQ
	MOVEI 1,SCDRQB
	MOVEM 1,SCDRQI
	HULOCK RQILCK
	JRST @SCDRQ

;PROCESS SCHEDULER REQUESTS

SCDRQ1:	CAMN 4,SCDRQI
	RET
	MOVE 2,0(4)		;WORD CONTAINS DATA,,DISPATCH ADR
	HLRZ 1,2
	CALL 0(2)
	AOS 4,SCDRQO
	CAIE 4,SCDRQB+NSCDRQ
	JRST SCDRQ1
	MOVEI 4,SCDRQB
	MOVEM 4,SCDRQO
	JRST SCDRQ1

;SCHEDULER REQUESTS

JOBSRT:	MOVE 2,SPTC		;CURRENT SPT COUNT
	CAIL 2,SSPT-NOFN-100	;NEARLY FULL?
	JRST JOBSR1		;YES, DON'T PERMIT LOGIN
	MOVE 2,DRMFRE
	CAMG 2,DRMIN0		;ENOUGH DRUM SPACE?
	JRST JOBSR1		;NO
	SKIPE FREJOB		;ROOM FOR NEW JOB
	SKIPN FREFK		;AND NEW FORK?
	JRST JOBSR1		;NO
;
	MOVE 2,DNJOBS
	CAML 2,JOBLIM	;TOO MANY JOBS (OPERATOR DETERMINED)
	JRST [MOVEI 2,0(1)   ;ALLOW OPERATOR TO GET ON
    	      CAIE 2,CTYLIN
	      CAMN 2,OTYLIN
	      JRST .+1
	      JRST JOBSR1   ]   ;GIVE FULL MESSAGE
;
	PUSH P,1		;START JOB (FROM TTY SRV)
	CALL ASSFK		;GET A FORK
	POP P,1
	HRLI 1,NEWJBF
	IORM 1,FKINT(7)		;LEAVE TTY NUMBER FOR STARTUP ROUTINE
	ULOCK SKDLCK
	RET

JOBSR1:	MOVEI 2,0(1)		;LINE NUMBER
	MOVE 1,[POINT 7,[ASCIZ /FULL
/]]
	CALL TTYCKK		;GET TTY LOCK
	JRST [ SETOM TTFORK(2)
		JRST JOBSR2]	;COULDNT GET IT
	CALL TTEMES		;GIVE USER BAD NEWS
IFE SUMEX,<
	SETOM TTFORK(2)		;CLEAR TTY
>
IFN SUMEX,<
	CALL TTCLZ
>
	ULOCK TTYLCK
JOBSR2:
IFDEF TYMSW,<
	CAIL 2,TYMTTL
	CAIL 2,TYMTTL+NTYMTT
	 RET
	JRST TYMNFK
>
IFNDEF TYMSW,<RET>

;ASSIGN FORK SLOT

ASSFK:
	HLOCKI PILCK		;LOCK PILCK
	SKIPN FREFK		;SHOULDNT RUN OUT
	JSR BUGHLT
	HRRZ 7,@FREFK
	EXCH 7,FREFK		;GET FORK, UPDATE LIST
	HULOCK PILCK
	OKPI
	SUBI 7,FKPT
	MOVEI 1,JSKP
	MOVEM 1,FKSTAT(7)	;MAKE STATUS RUNNABLE AT NEXT TEST
	MOVE 1,QBASE+1
	MOVEM 1,FKQ(7)		;ESTABLISH QUEUE
	MOVE 1,TODCLK
	MOVEM 1,FKTIME(7)
	MOVSI 1,400000+NEWFKF
	MOVEM 1,FKINT(7)	;LEAVE INTERRUPT REQUEST
	SETZM FKINTB(7)
	SETZM FKPGS(7)		;CLEAR PT AND PSB WORD
	SETZM FKJOB(7)
	SETZM FKWSP(7)
	SETZM FKINTT(7)	;CLEAR TIMER INTERRUPT
	SETZM FKINTW(7)
	MOVE 1,[XWD 100100,3]	;INIT AGE TO 100, W.S. TO 3
	MOVEM 1,FKNR(7)
	SKIPN INSKED
	JRST [ 	MOVE 1,FORKX	;HAVE TO DO HERE BECAUSE OF CPU1
		MOVE 1,FKJOB(1)
		MOVEM 1,FKJOB(7)
		JRST .+1]
ASSFK1:	SLOCK SKDLCK
	JRST [ CALL PRTST
		JRST ASSFK1 ]	;MAKE SURE DONT NEED TO STOP
	CALL WTCONC		;PUT ON WAIT QUEUE
	AOS ISKED
	SKIPE INSKED
	RET
	ULOCK SKDLCK		;LET SCHEDULER GO
	RET

;PROCESSOR INTERRUPTS REFERRED FROM APR PI SERVICE

P7OV:	MOVEI 2,6		;OVERFLOW, FLOATING OVERFLOW
	JRST P7PI1

P7FOV:	MOVEI 2,7		;FLOATING OVERFLOW CHANNEL
	JRST P7PI1

P7POV:	MOVEI 2,^D9		;PDL OVERFLOW
P7PI1:	EXCH 1,2		;FORK NUMBER LEFT BY APR ROUTINE
	CALL PSIRQ
	RET

MPEINT:	MOVEI 2,^D11		;GIVES IO ERROR INTERRUPT
	JRST P7PI1

;BALANCE SET SCHEDULER
;CALLED TO SELECT JOB TO RUN

SKDJOB:	MOVE 1,21		;CLEAR JOB-NOW-RUNNING DISPLAY

LDJB5:	SKIPE FSHBAL		; WANT TO FLUSH EVERYTHING FROM BALSET
	 CALL FSHBS		; YES, CLEAR OUT BALSET AND RECLAIM
	MOVE 1,NOF
	CAIG 1,NOFN-10		;TOO MANY FILES OPEN
	SKIPGE CGFLG		;FORCED GC?
	CALL GCCOR		;YES
	MOVE 1,MAXNR		;MAX PERMISSABLE CONTINUING SUMNR
	MOVE 2,NBPROC
	CAMG 2,MAXBP		;BAL SET FULL?
	CAMGE 1,SUMNR		;OVER RESERVED?
	JRST REMJOB		;YES, REMOVE A PROCESS
LDJ51:	SKIPL SSKED		;WAIT FOR NOSKED JOB?
	JRST SKDJ7		;YES, DONT CONSIDER ADDING TO BALSET
	SKIPN NLOJOB
	SKIPE NGOJOB		;JOB WAITING TO ENTER BALSET?
	JRST LDJOB		;YES, GO LOOK AT IT

SKDJ7:	MOVE 1,NRPLQ
	ADD 1,IOIP		;DO GC IF FREE PAGES (INCLUDING
	CAMG 1,NRPMIN		;WRITES IN PROGRESS) IS BELOW MINIMUM
	CALL GCCOR		; YES, GARBAGE COLLECT CORE
	SKIPE REMFLG		;JOB REMOVED OUT OF BALSET LATELY
	JRST [ MOVE 1,NRPLQ
		ADD 1,IOIP
		CAILE 1,50	;IF LESS THAN 50 PAGES 
		JRST .+1
		SETOM CGFLG
		CALL GCCOR
		JRST .+1 ]
	MOVEI 10,BALSET		;SETUP TO SELECT BEST JOB IN B.S.
	SETOB 5,6		;GETS BEST FORK, BEST RUNNABLE FORK
	SETOM NBRUN		;N RUNNABLE -1
	SETZM NBWT		;N WAITING
	SETZM NDSKW		;N WAITING FOR DSK
	SETZM PSKED
SKDJ1:	CAML 10,FBALS		;ALL JOBS EXAMINED?
	JRST SKDJ2		;YES
	MOVE 1,KIECPU
	HRRZ 2,0(10)
	CAMN 2,FORKX-KIEPT(1)
	JRST SKDJ5		;RUNNING ON OTHER CPU
	SKIPGE 7,0(10)		;THIS ONE RUNNABLE?
	JRST SKDJ3		;NO, GO TEST IT
SKDJ4:	AOS NBRUN		;COUNT A RUNNABLE ONE
SKDJW1:	
	SKIPL 2,SSKED		;NOSKED FORK HERE?
	JRST [	CAIE 2,0(7)	;YES, THIS ONE?
		JRST SKDJ5	;NO, NOT INTERESTED
		JRST SKDHQ2]	;YES, SELECT IT

;		TEST FOR CONDITIONS PREVENTING FROM RUNNING ON THIS CPU
SKDHQ2:	AOS OVERH
	AOSE GENLCK
	JRST .-1
	HRRZ 2,7		;GET CLEAN FORK NO
	HLRZ 1,FKJOB(7)		;IS THIS FORK'S JOBLCK LOCKED
	SKIPL JOBLCK(1)
	CAMN 2,JOBLKF(1)	;YES-OK IF IT HAS IT LOCKED
	SKIPA
	JRST SKDJW2		;CAN'T RUN YET
	MOVSI 1,(1B1)
	SKIPE CPUID
	MOVSI 1,(1B2)
	MOVE 3,FKCNO(7)		;CHECK FORCED-CPU FLAG
	TLNE 3,(3B2)		;CHECK TEMP FLAGS FIRST
	JRST SKDJW5		;ONE OF THEM IS SET
	LSH 1,-2		;CHECK PERMANENT CPU FLAGS
	TLNE 3,(3B4)
SKDJW5:	TDNE 3,1		;CORRECT CPU BIT SET
	JRST SKDJW3
SKDJW2:	SETOM GENLCK
	SOS OVERH
	JRST SKDJ5		;CAN'T RUN YET
SKDJW3:
	SETOM GENLCK
	SOS OVERH

 	SKIPL SCDRN1		;RUN SPECIAL JOB?
	JRST [	HLRZ 1,FKJOB(7)	;YES, GET JOB NUMBER OF THIS FORK
		CAME 1,SCDRN1	;CORRECT ONE?
		JRST SKDJ5	;NO
		JRST .+1]	;YES
	CALL CORFCT		;GET PRIORITY VALUE
	CAIL 1,0(5)		;LESS THAN MIN OF ALL FORKS?
	JRST .+3		;NO
	MOVEI 5,0(1)		;YES, REMEMBER VALUE
	HRLI 5,0(7)		;AND FORK INDEX
	JUMPL 7,SKDJ5		;LOOK NO FURTHER IF NOT RUNNABLE

	AOS OVERH
	AOSE GENLCK
	JRST .-1
	SKIPL SYSLCK		;RUN SYSLCK FORK FIRST
	JRST [	HRRZ 2,7
		CAME 2,SYSLCK+1
		JRST .+1	;THIS ISN'T IT
		SETOM GENLCK
		SOS OVERH
		MOVEI 6,0(1)
		HRLI 6,0(7)
		JRST SKDJ2]	;RUN THIS ONE
	SETOM GENLCK
	SOS OVERH

	CAIL 1,0(6)		;LESS THAN MIN SO FAR?
	JRST SKDJ5		;NO
	MOVEI 6,0(1)		;YES, REMEMBER VALUE
	HRLI 6,0(7)		;AND FORK INDEX
SKDJ5:	AOJA 10,SKDJ1

SKDJW:	HRRZ 2,FKPGST(7)	;WAIT ROUTINE
	CAIN 2,DSKRT		;DSK?
	AOS NDSKW		;YES, COUNT ONE WAITING FOR DSK
	AOS NBWT		;COUNT WAITING ONE
	JRST SKDJW1

; FLUSH ALL JOBS FROM BALSET, THEN CALL GCALC

FSHBS:	JSR BUGCHK
	MOVEI 10,BALSET		; START FROM BEGINNING
FSHBSL:	CAML 10,FBALS		; UNTIL WE GET TO THE END
	 JRST GCALC		; AND THEN STOP
	SKIPGE 7,0(10)		; THE THE BALSET ENTRY
	 JRST FSHBSW		; WAITING, TRY TO GET IT TO STOP
FSHBSD:	TLNE 7,(1B1)		; UNSCHEDULABLE?
	 AOJA 10,FSHBSL		; TRY NEXT
	HRRZ 1,FKNR(7)
	TLNE 7,(1B3)		; "FORCED OUT"
	 ADDM 1,SUMNR		; UNDO THIS SO REMBSF CAN REDO IT
	CALL REMBSF		; REMOVE FROM BALSET
	CALL GOCONC		; ONTO GOLIST
	JRST FSHBS		; START OVER CAUSE AC 10 SMASHED

FSHBSW:	TLNE 7,(1B2)		; EMTYP SLOT?
	 AOJA 10,FSHBSL		; GO TO NEXT
	HRRZ 2,FKPGST(7)	; GET BALSET WAIT TEST
	CAIE 2,DISMT		; EDISMS?
	 JRST FSHBSS		; NO, MUST HANG TIL SUCCESS
	TLNE 7,(1B1)
	 AOJA 10,FSHBSL
	HRRZ 1,FKNR(7)
	TLNE 7,(1B3)
	ADDM 1,SUMNR
	CALL REMBSF
	CALL WTCONC		; THIS GOES ONTO WAIT LIST
	JRST FSHBS		; START OVER 'CAUSE AC10 SMASHED

FSHBSS:	HLRZ 1,FKPGST(7)
	JSP 4,0(2)		; PERFORM TEST
	 JRST FSHBSL		; AND KEEP TRYING
	JRST FSHBSD		; AND MOVE IT TO GO LIST

;UPDATE FOR PROCESS FINISHED ENTERING BALSET

SOSNEB:	HLRZ 1,FKWSP(7)		;PRELOAD SIZE AS DETERMINED BY LDJOB
	MOVN 1,1
;;;	ADDM 1,NRPMIN		;REMOVE FROM CORE RESERVE
	SOS NEBAL
	RET

;CHECK FORK HAVING DONE EDISMS, BEING HELD IN BALSET

DISMT:	TLNE 7,(1B3)		;FORCED REMOVAL?
	JRST [	HRRZ 1,FKNR(7)	;YES, FIXUP NR
		ADDM 1,SUMNR
		JRST DISMT2]
	HLRZ 1,FKPGST(7)
	JSP 4,BLOCKW		;SEE IF GRACE PERIOD OVER
	JRST DISMT1		;NO
DISMT2:	PUSH P,NBP+NBP(10)	;NBW - SAVE TIME THAT WAIT STARTED
	MOVE 1,TODCLK		;FINISH REMOVAL FROM BALSET
	SUB 1,NBP+NBP(10)	;ACCOUNT WAITING TIME
	ADDM 1,BSWT
	CALL REMBSJ		;REMOVE JOB FROM BAL SET
IFDEF CRSUM,<
;   THIS CODE ADDED FOR TIME IN BALANCE SET AND ON GOLIST (& LOLIST)
	HLRZ 6,FKJOB(7)		;GET JOB NUMBER
	HRLZI 1,1
	ADDM 1,JOBQNM(6)	;WAS REMOVED FROM BAL SET WHILE WAITING
	MOVN 1,BALTIM		;CORRECT TIME AND NUMBER OF FORKS IN
	ADDM 1,JOBAL(6)		;BALANCE SET
;   END OF CODE FOR TIME IN BALANCE SET AND ON GOLIST
>
	CALL WTCONC		;PUT ON WAIT LIST
	POP P,FKPGST(7)		;SAVE TOD OF DISMISS FOR NEWST
	HRRZ 1,FKCNO(7)		;CORE NUMBER
	MOVE 1,BITS(1)		;PROCESS USE BIT
	IORM 1,PUBCL		;CLEAR BIT AT NEXT GC
	JRST SKDJ7		;START OVER

DISMT1:	MOVE 2,FKSTAT(7)	;SEE IF EDISMS WAIT FINISHED
	HLRZ 1,2
	JSP 4,0(2)
	CAIA			;NO
	JRST DISMT3		;YES
	SKIPGE 1,FKINT(7)	;SEE IF INTERRUPT PENDING
	TLNE 1,(1B1)		;AND ACCEPTABLE
	JRST SKDJW		;NO
	MOVSI 1,PSIWTF		;YES, REMEMBER FORK WAS WAITING
	IORM 1,FKINT(7)
	JRST DISMT3		;LET IT RUN

;TEST WAITING BALSET FORK

SKDJ3:	
	TLNE 7,100000		;UNUSED ENTRY?
	JRST SKDJ5		;YES
	HRRZ 2,FKPGST(7)
	CAIN 2,DISMT		;FORK LEAVING BALSET?
	JRST DISMT		;YES
	HLRZ 1,FKPGST(7)	;SETUP TEST DATA
	JSP 4,0(2)		;CALL TEST ROUTINE
	JRST SKDJW		;STILL WAITING
DISMT3:	TLZ 7,400000
	MOVEM 7,0(10)
	MOVE 1,TODCLK		;COMPUTE LENGTH OF TIME WAITED
	SUB 1,NBP+NBP(10)	;INDEXES NBW
	HRRZ 2,FKPGST(7)	;WAIT TEST ADR
	CAIE 2,SWPINT		;SWAPIN?
	CAIN 2,SWPRT		;OR SWAP?
	ADDM 1,DRMWT		;YES, CHARGE TO DRUM
	CAIE 2,DISGET		;UTILITY DSK? OR
	CAIN 2,DSKRT		;DSK?
	ADDM 1,DSKWT		;YES, CHARGE TO DSK
	ADDM 1,BSWT		;ACCUMULATE TOTAL WAIT
	CALL BSMEAS		;KEEP BSTSUM UP TO DATE
IFDEF CRSUM,<
;   THIS CODE ADDED FOR TIME IN BALANCE SET AND ON GOLIST (& LOLIST)
	PUSH P,10
	CALL TIMMES		;INCREMENT GOLIST TOTALS AND BAL. SET TOTALS
	ADD 2,[XWD 1,0]		;INCREMENT # FORKS IN BAL SET
	MOVEM 2,JOBQNM(10)	;SAVE UPDATE QUE NUMBERS
	POP P,10
;   END OF CODE FOR TIME IN BALANCE SET AND ON GOLIST
>
	TLNN 7,(1B3)		;THIS FORK DESIGNATED FOR REMOVAL?
	JRST SKDJSD		;NO
	HRRZ 1,FKPGST(7)
	CAIN 1,SWPINT		;FORK WAS ENTERING BALSET?
	CALL SOSNEB		;YES, CLEAN UP
	HRRZ 1,FKNR(7)		;BUMP RESERVE SO REMBSJ CAN REDUCE IT
	ADDM 1,SUMNR
	CALL REMBSF		;REMOVE FROM BAL SET
	CALL GOCONC		;ADD TO READY LIST
	JRST SKDJ7		;START OVER

SKDJSD:	HRRZ 1,FKPGST(7)
	CAIE 1,SWPINT		;WAS BEING LOADED?
	JRST SKDJ4		;NO
	SKIPN PRELDF		;YES, PRELOADING DESIRED?
	JRST SKDJS1		;NO
	HLRZ 1,FKWSP(7)		;YES, ENOUGH CORE TO PRELOAD?
	CAMLE 1,NRPLQ
	JRST [	SKIPG IOIP	;NO, FREE PAGES ON THE WAY?
		JRST .+1	;NO, LOAD AS MUCH AS POSSIBLE NOW
		TLO 7,400000	;YES, MAKE FORK WAIT MORE
		MOVEM 7,0(10)
		MOVE 1,TODCLK	;RESET TIME OF START OF WAIT
		MOVEM 1,NBP+NBP(10)
		AOS CGFLG	;SAY WE NEED CORE
		JRST SKDJW]
	PUSH P,5
	PUSH P,6
	CALL PRELD		;PRELOAD WS
	POP P,6
	POP P,5
SKDJS1:	CALL SOSNEB		;PROCESS FINISHED ENTERING BALSET
	JRST SKDJ4

SKDJ2:	HLRZM 5,FXBST		;REMEMBER BEST FORK FOUND
;;;	SKIPE PSKED		;PAGE TRANSFER FINISHED LATELY?
;;;	JRST SKDJ7		;YES, RECHECK
;;;	JUMPL 6,BKGND1		;-1 MEANS FOUND NO JOB TO RUN
;
	JUMPL 6,[SKIPE PSKED
		JRST SKDJ7
		JRST BKGND1]
;
	HLRZ 7,6		;BEST RUNNABLE FORK
	SKIPL SSKED		;CAN RUN ANY JOB?
	JRST SKDHQ3		;NO, ONLY NOSKED ONE
	SKIPL SCDRN1		;RUN SPECIAL JOB?
	JRST [	HLRZ 1,FKJOB(7)	;GET SELECTED FORKS JOB NO
		CAME 1,SCDRN1	;CORRECT ONE?
		JRST REMJOB	;NO, REMOVE FROM BAL SET
		JRST .+1]
SKDHQ4:
SETRT:
	HRRZ 7,7		;CLEAN UP FORK NO
	UDCLK			;UPDATE CLOCKS
	HRRZM 7,FORKX
	HLRZ 1,FKJOB(7)		;SEE IF JOBLCK GOT LOCKED WHILE
	SKIPL JOBLCK(1)		;WE WERE SCHEDULING
	JRST [	CAMN 7,JOBLKF(1)
		JRST .+1	;THIS FORK HOLDS LOCK
		MOVNI 1,1
		XOR 1,CPUID
		MOVEM 1,FORKX	;RESET FORKX
		JRST SKDJ7]
	CALL TIMET	;TEST TIMER INTERRUPT
IFDEF CRSUM,<
;   THIS CODE ADDED FOR TIME IN BALANCE SET AND ON GOLIST (& LOLIST)
	CALL TIMMES		;UPDATE TOTAL GOLIST AND BALSET
	MOVE 1,BALTIM		;GET TIME DIFFERENCE
	ADDM 1,JOBAL(10)	;ADD TO TIME IN BALANCE SET
	SUB 2,[XWD 1,0]		;DECREMENT # FORKS IN BAL SET
	MOVEM 2,JOBQNM(10)	;SAVE UPDATED QUE NUMBERS
;   END OF CODE FOR TIME IN BALANCE SET AND ON GOLIST
>
	HRRZ 10,FKPT(7)
	HRRZS BALSET(10)	;CLEAR ANY FLAGS
	HRRZS FKPT(7)
	ULOCK SKDLCK
	CALL SETPPG		;SETUP PAGER FOR THIS PROCESS
	HLRZ 2,FKQ(7)		;SETUP REMAINING TIME
	HRRZ 3,FKQ(7)
	SUB 3,QBASE(2)
	MOVEM 3,RJQNT
	SETZB 2,RUNT1
	EXCH 2,JOBRTT
	ADDM 2,SKDTM1		;CHARGE TIME TO SCHEDULER
	ADDM 2,SPTIM1		;CHARGE TIME AS SCHEDULING
	HLRZ 1,FKQ(7)		;QUEUE LEVEL OF FORK
	HLRZ 1,FKJOB(7)		;JOB NUMBER OF FORK
	SKIPN CPUID
	HRLM 1,21
	SKIPE CPUID
	HRRM 1,21
	MOVE 1,21
   IFN KAFLG,<
SETOVF:	MOVEI 2,5B29+5B32	;CLEAR OV AND FOV FLAGS
	MOVE 1,PSICHM		;GET THIS FORKS CHANNEL MASK
	TLNE 1,(1B6)		;CHANNEL 6?
	TRC 2,6B32		;YES, ENABLE OVERFLOW
	TLNE 1,(1B7)		;CHANNEL 7?
	TRC 2,6B29		;YES, ENABLE FLOATING OVERFLOW
	CONO APR,APRCHN(2)	;SET APR ACCORDING TO FORGOING
	RET

>
   IFN KIFLG,<JRST SETOVF>	;IN KISRV

;BACKGROUND ACTIVITIES, IF NO PROCESS TO RUN

SKDHQ3:	CAMN 7,SSKED		;THE NOSKED FORK?
	JRST SKDHQ4		;YES, RUN IT
BKGND1:	AOS ISKED
	UDCLK			;UPDATE CLOCKS
	SETZ 1,
	EXCH 1,JOBRTT		;GET TIME SINCE LAST UPDATE
	SKIPE 2,NBPROC		;RUNNABLE JOBS IN EXISTENCE?
	JRST	[ CAIE 2,1
		JRST [ ADDM 1,SKDTM1
			JRST BKGND2 ]
		MOVE 3,KIECPU
		MOVE 3,FORKX-KIEPT(3)
		JUMPGE 3,.+1	;NULL CLOCK
		ADDM 1,SKDTM1	;INEFFICIENCY CLOCK
		JRST BKGND2 ]
	ADDM 1,SKDTM0		;NO, CHARGE 'NULL' CLOCK
BKGND2:	SKIPL SSKED		;CAN RUN ANY JOB
	ADDM 1,SPTIM2		;NO CHARGE TO NOSKED
	SKIPE NBPROC		;NO JOBS TO RUN
	ADDM 1,SPTIM3		;YES CHARGE TO WAIT
	ULOCK SKDLCK		;UNLOCK SKDLCK
	AOJA 0,SCH0		;TRY AGAIN

;CORE OVER RESERVED, SELECT JOB TO REMOVE
;SELECT THE ONE WITH LARGEST Q VALUE

REMJOB:	MOVE 2,NBPROC
	CAIG 2,1		;MORE THAN 1 PROCESS IN BALSET?
	JRST REMA1		;NO, DUBIOUS SITUATION
REMA2:	MOVEI 10,BALSET
	SETZB 6,5
REMJ2:	CAML 10,FBALS
	JRST REMJ1
	HRRZ 7,0(10)		;GET FORK INDEX
	SKIPL SCDRN1		;RUNNING SPECIAL JOB?
	JRST [	HLRZ 1,FKJOB(7)	;YES, GET THIS FORKS JOB NO
		CAMN 1,SCDRN1	;THIS ONE?
		AOJA 10,REMJ2	;YES, DON'T REMOVE IT
		JRST .+1]
	MOVE 1,KIECPU
	HRRZ 2,0(10)
	CAMN 2,FORKX-KIEPT(1)
	AOJA 10,REMJ2		;BETTER NOT - RUNNING ON OTHER CPU
	SKIPL SYSLCK
	CAME 2,SYSLCK+1
	JRST .+2
	AOJA 10,REMJ2		;HAS SYSLCK
	SKIPL STOPLK
	CAME 2,STOPLK+1
	JRST .+2
	AOJA 10,REMJ2		;HAS STOPLK
	MOVE 2,0(10)
	TLNE 2,240000		;RESCHEDULABLE AND NOT REMOVED?
	AOJA 10,REMJ2		;NO
	MOVE 1,TODCLK
	CAMGE 1,NBP(10)		;BEEN IN BALSET LONG ENOUGH?
;;;	JRST [	HLRZ 1,FKQ(7)	;NO, MAKE FORK HIGH PRIORITY, USE Q
;;;		JRST .+2]
	JRST REMJ8
IFNDEF I4SW,<
	HRRZ 1,FKNR(7)		;YES, SEE IF NR CAN BE REDUCED
	HRRZ 2,FKWSP(7)
	CAIL 1,^D20		;SMALL PROCESS?
	CAIG 1,^D10(2)		;RESERVE WITHIN 10 OF IN-USE?
	JRST REMJ6		;YES, DON'T CHANGE NR
	ADDI 2,^D10		;THIS FORK'S NR TOO LARGE, RESET TO
	HRRM 2,FKNR(7)		;CURRENT IN-USE PLUS 10
	SUB 2,1			;ADJUST SUMNR ACCORDINGLY
	ADDM 2,SUMNR
	JRST LDJB5		;SEE IF CORE STILL TOO FULL
>; END OF I4SW

REMJ6:	CALL CORFCT		;GET WEIGHTED FORK STATUS
;
	ADDI 1,^D1000
;
	CAMGE 1,6		;MAX SO FAR?
	AOJA 10,REMJ2		;NO
REMJ3:
	MOVEI 5,0(10)		;YES, SAVE PROC NUMBER AND VALUE
	MOVEI 6,0(1)
	AOJA 10,REMJ2

REMA1:	MOVE 1,NRPLQ		;TIGHT ON CORE?
	CAILE 1,MINNR
	JRST LDJ51		;NO, LEAVE BALSET AS IS
	HRROS CGFLG		;YES, DO GC
	JRST REMA2
;
;
REMJ8:
	HRRZ 1,FKWSP(7)
	CAIL 6,^D1000
	AOJA 10,REMJ2
	CAMLE 6,1
	JRST REMJ3
	AOJA 10,REMJ2
;
;

REMJ1:	JUMPE 5,REMJ5		;NO REMOVABLE JOB FOUND
	AOS NREMJ		;COUNT OF THIS OCCURRANCE
	SUBI 5,BALSET
	SKIPGE 7,BALSET(5)	;FORK IN PAGE WAIT?
	JRST REMJ4		;YES
	CALL REMBSF		;REMOVE JOB FROM BAL SET
	CALL GOCONC		;PUT ON READY LIST
	JRST LDJB5

REMJ4:	MOVSI 1,1B21		;INDICATE FORK DESIGNATED FOR REMOVAL
	IORM 1,BALSET(5)
	HRRZ 1,FKNR(7)		;GET RESERVE
	MOVN 1,1
	ADDM 1,SUMNR		;RELEASE IT
	JRST LDJB5

REMJ5:	JRST SKDJ7		;DO NOTHING

;MAINTAIN INTEGRAL NBPROC DT

BSMEAS:	MOVE 1,TODCLK
	SUBM 1,BSCTIM		;DT - TIME SINCE LAST UPDATE
	EXCH 1,BSCTIM
	IMUL 1,NBPROC		;NBPROC * DT
	ADDM 1,BSTSUM
	RET


IFDEF CRSUM,<
;   THIS CODE ADDED FOR TIME IN BALANCE SET AND ON GOLIST (& LOLIST)
TIMMES:	HLRZ 10,FKJOB(7)	;GET JOB NUMBER
	MOVE 1,TODCLK		;GET TIME
	EXCH 1,JOBTIM(10)	;UPDATE QUE CHANGE TIME
	SUB 1,JOBTIM(10)	;CALCULATE TIME SINCE LAST CHANGE
	MOVM 1,1
	MOVEM 1,BALTIM		;SAVE DIFFERENCE
	SKIPN 2,JOBQNM(10)	;GET NUMBER OF FORKS THIS JOB IN BAL SET
	RET
	TLNN 2,-1		;ANYTHING IN BALANCE SET
	JRST TIMME1
	MOVSS	2
	IMULI 1,0(2)
	ADDM 1,JOBTAL(10)	;UPDATE FORKS*BAL.SET
	MOVE 1,BALTIM		;GET TIME DIFFERENCE
	MOVSS 2
	TRNN 2,-1		;ANYTHING IN GOLIST
	RET
TIMME1:	IMULI 1,0(2)
	ADDM 1,JOBTGO(10)	;ADD TO FORKS * GOLST
	RET
;   END OF CODE FOR TIME IN BALANCE SET AND ON GOLIST
>

;REMOVE JOB FROM BALANCE SET

REMBSF:	TDZA 3,3		;0 FLAG, PROCESS FORCED OUT OF BALSET
REMBSJ:	SETO 3,			;NON-0 FLAG, PROCESS BEING DISMISSED
	HRRZ 10,FKPT(7)		;GET PROCESS POINTER
	HRRZ 2,FKNR(7)		;GET RESERVE
	MOVN 1,2
	ADDM 1,SUMNR		;REDUCE BALSET SIZE
	MOVE 1,3		;PASS FLAG TO POSTPG
	CALL POSTPG		;CHECK WS WORDS, ETC.
	HLRZ 2,FKJOB(7)		;MAINTAIN SUBSYSTEM INFO...
	HRRZ 2,JOBNAM(2)
	HRRZ 1,FKNR(7)
	HRLI 1,(1B14)		;COUNT NUMBER OF REMOVALS FROM BALSET
	ADDM 1,SWAKES(2)	;AND INTEGRATE SIZE
	MOVSI 2,-PLKV
	SKIPN INDFLG		;LOCKING JSB'S?
	JRST REMB1		;NO
	HRRZ 1,FKJOB(7)		;GET JSB SPT INDEX
	MOVE 1,SPT(1)		;CORE ADR
	ADDM 2,CST1(1)		;DECREASE LOCK COUNT
REMB1:	HRRZ 1,FKPGS(7)
	MOVE 1,SPT(1)
	ADDM 2,CST1(1)		;UNLOCK PSB
	HLRZ 1,FKPGS(7)
	JUMPE 1,.+3
	MOVE 1,SPT(1)
	ADDM 2,CST1(1)		;UNLOCK PT
	MOVE 4,FBALS
	SETOM BALSET(10)	;SET PROCESS WORD TO EMPTY
	CALL BSMEAS		;UPDATE MEASUREMENTS
IFDEF CRSUM,<
;   THIS CODE ADDED FOR TIME IN BALANCE SET AND ON GOLIST (& LOLIST)
	PUSH P,10		;SAVE 10
	CALL TIMMES		;UPDATE TOTAL GOLIST AND BALSET
	MOVE 1,BALTIM		;GET TIME ON QUE
	ADDM 1,JOBAL(10)	;ADD TO TIME IN BALANCE SET
	SUB 2,[XWD 1,0]		;DECREMENT # FORKS IN BAL SET
	MOVEM 2,JOBQNM(10)	;SAVE UPDATED QUE NUMBERS
	POP P,10		;RESTORE 10
;   END OF CODE FOR TIME IN BALANCE SET AND ON GOLIST
>
	SOSG NBPROC		;BALSET NOW EMPTY?
	CALL REMBSB		;YES, CHECK SUMNR
	CAIN 4,BALSET+1(10)	;LAST WORD IN USE?
	JRST REMBS3		;YES, GO ADJUST LIMITS OF TABLE
REMBS2:	AOS REMFLG		;FLAG THAT JOB HAS BEEN REMOVED
	RET

REMBS3:	SETO 1,
REMBS1:	SOS 4,FBALS		;ADJUST END OF TABLE POINTER
	CAIN 4,BALSET		;TABLE EMPTY?
	JRST REMBS2		;YES
	CAME 1,-1(4)		;LAST ENTRY EMPTY?
	JRST REMBS2		;NO
	JRST REMBS1		;YES, KEEP CHECKING

REMBSB:	MOVE 1,BALSHC
	CAME 1,SUMNR		;SUMNR CORRECT?
;;;	BUG(CHK,<SUMNR INCORRECT>)
	JFCL
	MOVEM 1,SUMNR
	RET

;ADD JOB TO BALANCE SET IF POSSIBLE

LDJOB:	CALL SCDRUN		;SELECT BEST RUNNABLE FORK
	SETZM NRBST
	JUMPL 7,SKDJ7		;WASN'T ONE
	HRRZ 1,FKNR(7)		;CHECK RESERVE BEFORE LOADING
	CAML 1,SNPMAX		;TOO BIG?
	MOVE 1,SNPMAX		;YES, BUMP DOWN
	HRRZ 2,FKWSP(7)		;PAGES NOW ASSIGNED
	CAIGE 1,0(2)
	MOVEI 1,0(2)		;NR MUST BE AT LEAST THAT
	HRRM 1,FKNR(7)
	SKIPG NBPROC		;BALSET NOW EMPTY?
	JRST LDJB6		;YES, LOAD RUNNABLE FORK
	MOVE 1,TODCLK
	CAMGE 1,NXTLJT		;TIME TO CHECK PRIORITY?
	JRST LDJB3		;NO
	CALL GETMBQ		;COMPUTE MAX FKSTAT OF BALSET FORKS
	CALL CORFCT		;GET WEIGHTED FKSTAT OF NEW PROCESS
	CAMGE 1,MAXBSQ		;BETTER THAN WORST NOW IN BAL SET?
	JRST LDJB6		;YES, LOAD IT
LDJB3:	MOVE 1,NBPROC
	CAML 1,MAXBP		;ROOM IN BALSET?
	JRST LDJB1		;NO, DON'T LOAD
	CAIG 1,1		;1 JOB NOW IN BALSET?
	JRST [	HRRZ 1,FKNR(7)	;YES, SPECIAL CASE
		CAMGE 1,SJSIZ	;'SMALL' FORK?
		JRST LDJB6	;YES, OK TO LOAD
		MOVE 1,SUMNR	;NO, SEE IF FORK NOW IN BALSET IS SMALL
		CAMGE 1,SJSIZ
		JRST LDJB6	;YES, OK TO LOAD
		JRST .+1]	;NO, USE REGULAR CHECK
	HRRZ 1,FKNR(7)		;GET RESERVE
	MOVEI 2,0(1)
	ASH 2,-3
	ADDB 1,2		;COMPUTE 9/8 CURRENT RESERVE FOR BUFFER
	ADD 1,SUMNR		;SEE IF THIS FORK WILL FIT IN BALSET
	CAML 1,MAXNR
	JRST [	MOVEM 2,NRBST	;NO, REMEMBER SIZE OF FORK NOT FITTING
		JRST LDJB1]	;AND DON'T LOAD IT
LDJB6:	MOVE 3,NRPLQ		;PAGES NOW ON REPLACABLE
	CAIGE 3,MINNR*3		;ENOUGH TO LOAD PSB AND UPT?
	JRST LDJB7		;NO
	MOVEI 10,BALSET		;SELECT PROCESS NUMBER
	SETO 1,
LDJB2:	CAML 10,FBALS
	JRST [	AOS FBALS	;INCREASE END OF TABLE POINTER
		JRST LDJB4]
	CAME 1,0(10)		;DELETED ENTRY?
	AOJA 10,LDJB2		;NO

LDJB4:	SUBI 10,BALSET
	MOVEM 7,BALSET(10)	;YES, STORE FORK INDEX IN SLOT
	HRRZM 10,FKPT(7)	;REMEMBER PROCESS POINTER
	CALL BSMEAS
	AOS NBPROC		;COUNT NUMBER OF PROCESSES
	HRRZ 1,FKNR(7)		;GET WORKING SET SIZE
	HRRZ 2,FKWSP(7)		;PAGES NOW ASSIGNED
	ADDM 1,SUMNR		;UPDATE SUM OF NR
	SUBI 1,0(2)
	HRLM 1,FKWSP(7)		;AMOUNT OF REPLACABLE PAGES TO BE HELD
;;;	ADDM 1,NRPMIN		;ON REPLACABLE QUEUE
	AOS NEBAL		;COUNT ENTERING PROCESSES
	MOVEI 1,^D1500		;FORK MUST STAY IN BALSET 1.5 SEC
	ADD 1,TODCLK
	MOVEM 1,NBT(10)

	DLOCK SYSLCK		;GET SYSLCK

	PUSHJ P,KILUPT		;SET UP UPT

	HRRZ 1,FKPGS(7)		;GET PSB INTO CORE
	JUMPN 1,.+3
	CALL ASSPT		;NO PSB, GO ASSIGN ONE
	HRRZM 1,FKPGS(7)
	CALL SWPIN0
	HLRZ 1,FKPGS(7)
	JUMPN 1,.+3
	CALL ASSPT		;NO UPT, ASSIGN ONE
	HRLM 1,FKPGS(7)
	CALL SWPIN0
	HRRZ 1,FKJOB(7)		;GET JSB SPTN
	JUMPN 1,.+3		;IS ONE?
	CALL ASSPT		;NO, ASSIGN FOR NEW JOB
	HRRM 1,FKJOB(7)
	SKIPE INDFLG		;LOCKING JSB'S?
	CALL SWPIN0		;SWAP IT IN AND LOCK IT
	CALL USYSLK		;UNLOCK SYSLCK
	MOVEI 1,SWPINT
	MOVEM 1,FKPGST(7)	;SET TEST TO WAIT FOR PSB AND PT
	MOVSI 1,400000
	HLLM 1,BALSET(10)
	MOVE 1,TODCLK
	MOVEM 1,NBW(10)		;TIME THAT WAIT STARTED
	MOVEI 1,^D1000		;NO FORCED ENTRIES FOR 1 SEC
	ADD 1,TODCLK
	MOVEM 1,NXTLJT
IFN KIFLG,<MOVSI 1,400000
		IORM 1,KITBL(10)>;RESET KIUPT
	JRST LDJB5		;CONTINUE SCHEDULING

LDJB1:	CALL GOCONC		;PUT PROCESS BACK ON READY LIST
	JRST SKDJ7

LDJB7:	;;;ADD 3,IOIP		;ADD WRITES NOW IN PROGRESS
;;;	CAIL 3,MINNR		;ENOUGH WHEN THEY COMPLETE?
;;;	JRST LDJB6		;YES, WAIT TILL THEY DO
	CALL GOCONC		;NO, PUT FORK BACK ON GOLST
	CALL GCCOR		;GET SOME PAGES
;;;	JRST LDJOB
	JRST SKDJ7

;COMPUTE MAX Q OF PROCESSES NOW IN BALSET (I.E. LEAST PREFERABLE FORK)

GETMBQ:	PUSH P,7
	MOVEI 5,BALSET
	SETZ 6,
GMB1:	CAML 5,FBALS		;LOOKED AT ALL?
	JRST [	MOVEM 6,MAXBSQ	;YES, SAVE MAX
		POP P,7
		RET]
	HRRZ 7,0(5)		;GET FORK NUMBER
	CAIN 7,-1		;SLOT IN USE?
	AOJA 5,GMB1		;NO
	MOVE 1,TODCLK
	CAMGE 1,NBP(5)		;FORK BEEN IN BALSET LONG ENOUGH?
	AOJA 5,GMB1		;NO, TREAT AS HIGHEST PRIORITY
	CALL CORFCT		;GET WEIGHTED FKSTAT
	CAIL 1,0(6)		;MAX?
	MOVEI 6,0(1)		;YES
	AOJA 5,GMB1

;DISMISS JOB FOR RESCHEDULING
QNTDMS:
DISMSJ:	MOVE 7,FORKX
	JUMPL 7,R		;NO JOB
IFN SUMEX,<
;   THIS CODE ADDED FOR TIME IN BALANCE SET AND ON GOLIST (& LOLIST)
	SETZ 1,			;FLAG THAT IT WAS NOT A WAIT
;   END OF CODE FOR TIME IN BALANCE SET AND ON GOLIST
>
	CALL SAVRT		;UPDATE QUEUE AND QUANTUM
QNTDM1:	SETZ 1,
	JRST SCHP2

;DISMISS FORK ON QUANTUM OVERFLOW

;QNTDMS:	MOVE 7,FORKX
;	JUMPL 7,R
;	CALL SAVRT		;UPDATE QUEUE VALUE
;	JRST QNTDM1

;TIMER ROUTINES

;	JSP 4,STIME	;STARTS TIMING
;	..		;PROGRAM
;	JSP 4,ETIME	;ENDS TIMING, RETURNS TIME IN 1
;	ADDM 1,CLOCK	;ADD TIME TO APPROPRIATE CLOCK

STIME:	UDCLK			;UPDATE CLOCKS
	SETZ 1,
	EXCH 1,JOBRTT		;GET AND RESET RUNTIME
	PUSH P,1
	JRST 0(4)

ETIME:	UDCLK			;UPDATE CLOCKS
	POP P,1			;OLD RUNTIME
	EXCH 1,JOBRTT		;RESTORE OLD RUNTIME, GET RUNTIME OF
	JRST 0(4)		;TIMED CODE AND RETURN IT

;UPDATE QUEUE NUMBER AND TIME USED VALUE

SAVRT:
IFN SUMEX,<
;   THIS CODE ADDED FOR TIME IN BALANCE SET AND ON GOLIST (& LOLIST)
	MOVE 4,1		;SAVE REASON FOR CALL
;   END OF CODE FOR TIME IN BALANCE SET AND ON GOLIST
>
	JSP 3,UCLOCK		;UPDATE CLOCKS
	MOVE 2,PPC
	MOVSI 1,400000
	TLNE 2,UMODF
	JRST [ IORM 1,FKCNO(7)
		JRST .+2 ]
	ANDCAM 1,FKCNO(7)
IFDEF CRSUM,<
;   THIS CODE ADDED FOR TIME IN BALANCE SET AND ON GOLIST (& LOLIST)
	CALL TIMMES		;UPDAT TOTAL GOLIST AND BALSET
	SKIPN 4			;ARE WE GOING TO WAIT
	ADD 2,[XWD 1,0]		;NO INCREMENT # FORKS IN BAL SET
	MOVEM 2,JOBQNM(10)	;SAVE UPDATED QUE NUMBERS
;   END OF CODE FOR TIME IN BALANCE SET AND ON GOLIST
>
	HLRZ 2,FKQ(7)		;CURRENT QUEUE NUMBER
	HRLOI 1,377777		;LARGEST NUMBER
	EXCH 1,RJQNT		;GET REMAINING QUANTUM
	MOVE 3,RUNT1		;RUNTIME THIS RUNNING
	ADDM 3,QSUM(2)		;ACCUMULATE STATISTIC
	JUMPG 1,DISMJ1		;NOT EXHAUSTED
	MOVE 1,JOBNO
	SKIPE JOBCK0		;GUARANTEE WORDS INIT'ED?
	JRST SAVRT7		;YES, GO CHECK CURRENT PERFORMANCE
	MOVE 3,TODCLK		;INITIALIZE TIME QUARANTEE WORDS
	MOVEM 3,JOBCK0
	MOVE 3,JOBRT(1)
	MOVEM 3,JOBCK1
SAVRT7:	LDB 3,[POINT 7,JOBBIT,17] ;GET GUARANTEE PERCENTAGE
	JUMPE 3,SAVRT8		;NOT SPECIAL
	MOVE 4,JOBRT(1)		;COMPUTE RUNTIME DURING TEST INTERVAL
	SUB 4,JOBCK1
	MOVE 1,TODCLK		;COMPUTE REAL TIME OF TEST INTERVAL
	SUB 1,JOBCK0
	IMULI 4,^D100		;COMPUTE RUNTM*100%/PCT TO GET
	IDIV 4,3		;EXPECTED REAL TIME
	SUB 4,1			;EXCESS OR DEFICIT OF REAL TIME
	MOVEM 4,23		;FOR LIGHT WATCHERS
	HRLM 2,23		; ..
	JUMPGE 4,SAVRT5		;.G. 0 MEANS BETTER THAN GUARANTEE
	MOVEI 2,0		;KEEP ON QUEUE 0 TO GET EXCLUSIVE TIME
	JRST SAVRT9

SAVRT8:	SETZM FKTIME(7)
	LDB 3,[POINT 6,JOBBIT,35] ;GET MAX Q FOR THIS JOB
	CAIL 2,0(3)		;IF REACHED MAX Q, AND 
	JUMPN 3,[LDB 2,[POINT 6,JOBBIT,29] ;PRIORITY WORD NOT 0,
		MOVEM 7,23	;FOR DISPLAY
		JRST SAVRT9]	;SET NEW Q AS SPECIFIED
	CAIGE 2,MAXQ		;NOW ON MAX Q?
	AOJA 2,SAVRT9		;NO, GO TO NEXT ONE
SAVRT9:	MOVSM 2,FKQ(7)
	MOVE 3,TODCLK
	SKIPN FKTIME(7)		;TIME ON QUEUE ALREADY SET?
	MOVEM 3,FKTIME(7)	;NO, SET IT
	SKIPA 1,QBASE+1(2)	;NEXT QUEUE TIME
DISMJ1:	ADD 1,QBASE(2)		;INCREASE BY BASE TIME
	HRRM 1,FKQ(7)
	RET

;4 NOW CONTAINS TIME SUCH THAT AFTER THAT REAL-TIME INTERVAL,
;WITH NO RUNNING OF PROGRAM, ACTUAL PCT WILL EXACTLY EQUAL DESIRED PCT

SAVRT5:	CAIGE 4,LOWQT		;ACCUMULATED EXCESS .GE. LOW-Q QUANT?
	JRST [	CAIGE 2,MAXQ-1	;NO, STILL ON HIGHER QUEUES?
		JRST SAVRT8	;YES, FOLLOW NORMAL ALGORITHM
		MOVEI 2,MAXQ-1	;STAY ON SECOND LOWEST QUEUE
		SETZM FKTIME(7)
		JRST SAVRT9]
	CAIGE 4,2*LOWQT		;ACCUMULATED LARGE EXCESS?
	JRST SAVRT6		;NO
	SUBI 4,2*LOWQT		;YES, REMOVE EXCESS OVER 2*LOWQT
	MOVN 4,4
	ADDM 4,JOBCK0		;FROM CONSIDERATION
	MOVEI 4,2*LOWQT
SAVRT6:	ADD 4,TODCLK		;COMPUTE WHEN TO RUN AGAIN
	MOVEM 4,FKTIME(7)
	MOVEI 2,0		;AND RUN ON 0 AT THAT TIME
	JRST SAVRT9


;THIS ROUTINE ACCEPTS AN ARGUMENT IN AC1. IF THIS ARGUMENT IS
;NON-ZERO, THE CALLING FORK IS PLACED ON QUEUE 0. IN ANY CASE,
;THE ARGUMENT IS DEPOSITED IN JOBBIT IN THE SIX BIT BYTE ENDING AT
;BIT 23. THE SCHEDULER TREATS THIS BYTE AS A MINIMUM QUEUE IF NON-ZERO
;THIS ROUTINE IS INTENDED FOR USE BY MONITOR ROUTINES WHICH ARE
;ABOUT TO USE A CRITICAL RESOURCE (SUCH AS LOCKING A DIRECTORY)
;AND WANT TO INSURE PROMPT COMPLETION.

STMINQ:	RET	;THIS HAS BEEN NOPED UNTIL WE HAVE TIME TO TEST IT ALONE--LIEB
;UPDATE USER CLOCKS ON REQUEST
;CALLED WITH  JSP 3,UCLOCK

UCLOCK:	UDCLK			;UPDATE CLOCKS
UCLK1:	MOVE 2,JOBNO
	SETZ 1,
	EXCH 1,JOBRTT		;RUN TIME SINCE LAST UPDATE
	JUMPE 1,0(3)		;RETURN NOW IF NO CHANGE
;
;  I4 CHANGE
	SUBM 1,JOBQNT(2)	;DECREMENT INTERVALL
	MOVNS JOBQNT(2)		;QUANTUM REMAINING
;
	ADDM 1,JOBRT(2)		;ACCOUNT FOR JOB
	ADDM 1,FKRT		;ACCOUNT FOR FORK
	ADDM 1,RUNT1		;LOCAL RUNTIME
	ADDM 1,IFTIM		;INTERFAULT TIME
	HRRZ 2,JOBNAM(2)	;GET SUBSYSTEM INDEX
	ADDM 1,STIMES(2)	;ACCUMULATE SUBSYSTEM TIME
	ADDB 1,PGTIM		;CORE MGT CLOCK
	CAIGE 1,AGTICK		;TIME TO TICK AGE CLOCK?
	JRST 0(3)		;NO
	IDIVI 1,AGTICK		;YES, COMPUTE NUMBER TICKS IN INTERVAL
	MOVEM 2,PGTIM		;LEAVE REMAINDER
	CAIL 1,^D1000/AGTICK	;STRANGELY LONG INTERVAL?
	MOVEI 1,^D1000/AGTICK	;YES, NORMALIZE
	MOVE 2,FORKX
	LDB 2,[POINT 9,FKNR(2),17] ;CURRENT AGE
	ADDI 1,0(2)		;ADD TICKS
	TRNE 1,777000		;OVERFLOW 9 BIT FIELD?
	SUBI 1,1000-100		;YES, WRAPAROUND
	MOVE 2,FORKX
	DPB 1,[POINT 9,FKNR(2),17] ;SET NEW AGE
	DPB 1,[POINT 9,PGR72,8]	;FOR PAGER
	PGRLAG		;LOAD NEW AGE
	JRST 0(3)

WTCONC:	MOVE 1,TODCLK		;SAVE TIME FORK WAS PUT INTO WAITING
	MOVEM 1,FKPGST(7)
	HRRZ 1,FKWSP(7)
	JUMPN 1,WTCON1		;NO PAGES IN CORE?
	HRRZ 1,FKCNO(7)		;YES, HAS CORE NUMBER?
	JUMPE 1,WTCON1
	MOVE 1,BITS(1)		;YES, DEASSIGN IT
	IORM 1,FRECB
	HLLZS FKCNO(7)
WTCON1:	MOVEI 1,WTLST
	HRLZM 1,FKPT(7)		;REMEMBER WHERE FORK IS
	MOVEI 6,FKPT(7)		;PUT FORK ON WAIT LIST
	HRRM 6,@WTLSTL
	MOVEM 6,WTLSTL
	RET

;TEST ALL WAITING JOBS FOR READY (CONDITION SATISFIED)

SCHED1:	SETZM ISKED
	MOVEI 6,WTLST		;HEAD OF WAITING LIST
SCHEDA:	MOVEI 5,0(6)		;KEEP POINTER TO LAST ONE IN 5,
SCHEDB:	HRRZ 6,0(5)		;POINTER TO CURRENT ONE IN 6
	JUMPE 6,R		;DONE, LIST EMPTY
	MOVEI 7,@FKPT6M		;FORK INDEX

	CALL TIMET		;TEST FOR TIMER INTERRUPT
	SOS OVERH		;DO NOT CHARGE OVERHEAD
	HLOCKI PSILCK
	AOS OVERH
	SKIPGE 1,FKINT(7)	;INTERRUPT REQUESTED?
	JRST [	TLNE 1,(1B1)	;AND ACCEPTABLE?
		JRST .+1	;NOW DEFERRING...
		MOVSI 1,PSIWTF
		IORM 1,FKINT(7)	;REMEMBER WAS IN WAIT STATE
		HULOCK PSILCK
		OKPI
		JRST SCHEDJ]	;LET IT RUN
	HULOCK PSILCK
	OKPI
	MOVE 2,FKSTAT(7)	;FKSTAT/  TEST VALUE,,ADR OF TEST ROUTINE
	HLRZ 1,2
	JSP 4,0(2)		;CALL TEST ROUTINE
	JRST SCHEDA
	AOS TTYBKS		;NOW RUNNABLE, COUNT UNBLOCKS
SCHEDJ:	CALL NEWST		;ESTABLISH NEW QUEUE STATUS
	HRRZ 2,0(6)		;REMOVE FROM WAIT LIST
	HRRM 2,0(5)
	CAMN 6,WTLSTL
	MOVEM 5,WTLSTL
	CALL GOCONC		;PUT ON READY LIST
	JRST SCHEDB

TIMET:	SKIPE 1,FKINTT(7)	;TIMER SET
	CAMLE 1,TODCLK
	RET
	MOVE 1,FKINTW(7)
	MOVEI 2,0(7)
	SETZM FKINTT(7)
	CALL PSIRQB
	RET

GOCONC:	
IFDEF CRSUM,<
;   THIS CODE ADDED FOR TIME IN BALANCE SET AND ON GOLIST (& LOLIST)
	PUSH P,1
	CALL TIMMES		;UPDAT TOTAL GOLIST AND BALSET
	JUMPE 2,GOCON3		;ARE THERE ANY FORKS
	MOVE 1,BALTIM		;GET TIME ON QUE
	TLNN 2,-1		;ANY FORKS IN BALANCE SET
	JRST .+3
	ADDM 1,JOBAL(10)	;ADD TO TIME IN BALANCE SET
	JRST GOCON3
	ADDM 1,JOBGO(10)	;ADD TO TIME IN GOSET
GOCON3:	AOS 2			;INCREMENT # OF FORKS ON GOLIST
	MOVEM 2,JOBQNM(10)	;SAVE UPDATED QUE NUMBERS
	POP P,1
GOCONT:
;   END OF CODE FOR TIME IN BALANCE SET AND ON GOLIST
>
	HLRZ 2,FKJOB(7)
	SKIPGE FKCNO(7)
	SKIPL JOBQNT(2)
	JRST .+2		;DONT PUT ON LOLST IF IN MONITOR
	JRST GOCON2		;PUT ON LOW QUEUE
	MOVEI 2,GOLST		;REMEMBER WHERE FORK IS
	HRLZM 2,FKPT(7)
	MOVEI 6,FKPT(7)
	HRRM 6,@GOLSTL		;ADD TO READY LIST
	MOVEM 6,GOLSTL
	AOS NGOJOB		;KEEP COUNT OF READY JOBS
GOCON1:	HRRZ 2,FKCNO(7)
	JUMPN 2,R		;HAS CORE NUMBER ALREADY?
	PUSH P,3		;NO, ASSIGN ONE
	MOVE 2,FRECB
	JFFO 2,.+2
	MOVEI 3,^D35		;NONE AVAILABLE, USE 35
	MOVE 2,BITS(3)
	ANDCAM 2,FRECB		;MAKE IT NO LONGER FREE
	HRRM 3,FKCNO(7)
	POP P,3
	RET

GOCON2:	MOVEI 2,LOLST
	HRLZM 2,FKPT(7)
	MOVEI 6,FKPT(7)
	HRRM 6,@LOLSTL
	MOVEM 6,LOLSTL
	AOS NLOJOB
	JRST GOCON1

JSKP:	JRST 1(4)
JRET:	JRST 0(4)

;COMPUTE PRIORITY NUMBER FOR FORK

FNCTST:	0		;FLAG FOR DETERMINING
			;WHICH ALGOR. TO USE
CORFCT:
	HLRZ 1,FKJOB(7)
	SKIPGE FKCNO(7)
	SKIPL JOBQNT(1)
	JRST .+2		;DONT INVOKE ALG. IF IN MONITOR
	JRST CORFCA		;EXHAUSTED GUAR. TIME
;
	HLRZ 1,FKQ(7)	;ONLY DO THIS FOR LOW PRI FORKS
	CAIGE 1,MAXQ-1
	RET
;
	MOVE 1,FKTIME(7)	;TIME ON CURRENT QUEUE
	SUB 1,TODCLK		;NEGATIVE OF INTERVAL ON CURRENT QUEUE
	JUMPG 1,[MOVEI 1,100000	;NOT YET TIME TO RUN, RETURN VERY LOW
		RET]		;PRIORITY NUMBER
	PUSH P,2
	HLRZ 2,FKQ(7)		;CURRENT QUEUE NUMBER
	ASH 1,@TFACTR(2)	;DIVIDE TIME AS FUNCTION OF QUEUE
	ADD 1,TBASE(2)
	CAIGE 1,MAXQ-1
	MOVEI 1,MAXQ-1
;;;	CAILE 1,MAXQ
;;;	MOVEI 1,MAXQ
	POP P,2
	RET

CORFCA:	PUSH P,2
	PUSH P,3
	SKIPN FNCTST		;TEST FOR ALGOR. TO USE
	JRST CORFCB
	MOVEI 2,<MAXQ+1>*^D100	;DET. PRIORITY ON FIXED ASSIGNM.
	HRRZ 3,JOBISK(1)
	IDIVI 2,0(3)
CORFC1:	ADDI 2,100000
	HLRZ 1,FKQ(7)		;ADD QUEUE VALUE
	ADD 1,2
	POP P,3
	POP P,2
	RET

;DETERM. PRIORITY ON SLIDING SCALE

CORFCB:	MOVN 2,JOBQNT(1)	;GET ABS. VALUE OF QUANTUM
	IMULI 2,^D10
	HRRZ 3,JOBISK(1)
	IMUL 3,ISKPT1
	IDIV 2,3
	JRST CORFC1


;QUEUE PARAMETER TABLES

	RADIX 10

MAXQ==4			;HIGHEST NUMBERED QUEUE

QBASE:	0
	100
	500
	2500
	4500
	14500

LOWQT=10000			;TIME QUANTUM OF LOWEST QUEUE

TBASE:	1000
	3000
	8000
	10500
	16750

TFACTR:	Z 0			;INDIRECTED TO BY ASH INSTRUCTION
	Z -1
	Z -2
	Z -3
	Z -4

	RADIX 8

;HEURISTIC FOR ADJUSTING QUEUE LEVEL AFTER I/O WAIT

;THIS ROUTINE IS THE PRINCIPLE CONTROL OVER THE EXTENT TO WHICH
;'INTERACTIVE' OR 'COMPUTE-BOUND' JOBS ARE FAVORED.  IT GIVES
;PRIORITY 'CREDIT' TO A FORK AS A RESULT OF WAITING.  THE MORE
;CREDIT GIVEN FOR A CERTAIN LENGTH WAIT (OR THE SHORTER THE WAIT
;REQUIRED TO BECOME HIGH-Q), THE MORE THE SYSTEM WILL FAVOR
;INTERACTIVE FORKS, AND THE GREATER THE CHANCE THAT FREQUENT OR
;WELL-TIMED INTERACTIONS WILL GIVE A PROCESS AN EXCESSIVELY LARGE
;SHARE OF COMPUTE TIME.  IT HAS BEEN DEMONSTRATED HOWEVER, THAT
;A COMPLETELY 'FAIR' ALGORITHM HERE, I.E. ONE WHICH PREVENTS AN
;INTERACTIVE FORK FROM GETTING ANY GREATER SHARE OF THE MACHINE
;THAN A COMPUTE-BOUND FORK, IS HIGHLY UNSATISFACTORY TO INTERACTIVE
;USERS UNDER MEDIUM AND HEAVY LOADS (AND ALL USERS ARE INTERACTIVE
;SOMETIMES), AND RESULTS IN EXPONENTIALLY INCREASING LEVELS OF
;FRUSTRATION, CURSING AND BEATING OF TERMINALS, ETC.  THEREFORE
;THIS ROUTINE IS GENUINELY A HEURISTIC, MODIFIED AS A RESULT OF
;PRESSURES BROUGHT TO BEAR ON SYSTEM PROGRAMMERS.

;THE FOLLOWING DESCRIBES THE CURRENT PRACTICE:
; 1. TTY INPUT WAITS OF .GE. 1 SEC GIVE HIGH-Q.  GREATLY REDUCES
;    USER FRUSTRATION LEVEL.
; 2. WAITS BY FORKS ON QUEUE 0 RESULT IN NO CHANGE TO Q VALUE
; 3. FORKS ON QUEUES 1 TO MAXQ-1 WILL BE HIGH-Q IF WAITING TIME IS
;    LONGER THAN LAST RUNTIME AS IMPLIED BY Q LEVEL.  THIS LIMITS
;    'WELL-TIMED' INTERACTIONS TO ABOUT 1/2 THE CPU.
; 4. FORKS ON MAXQ WILL BE HIGH-Q IF WAITING TIME IS LONGER THAN
;    THE MAXQ QUANTUM, AND WILL BE MOVED UP TO MAXQ-1 IF WAITING
;    TIME IS LONGER THAN SOME 'MINIMAL' TIME (500 MS)

;POSSIBLE ADJUSTMENTS INCLUDE:
; 1. INCLUDE NJOB WEIGHTING BY INCLUDING IDIV AT NEWST+3
; 2. REDUCE CPU LIMIT IN 3 ABOVE BY INCLUDING IDIVI 1,M AT NEWST2
;    MAX CPU USE WILL THEN BE 1-M/(M+1), E.G. 1/3 FOR M=2

;COMPUTE NEW Q VALUE

NEWST:
	MOVE 1,TODCLK		;CALCULATE ACTUAL WAITING TIME
	SUB 1,FKPGST(7)
	ADDM 1,FKTIME(7)	;DON'T COUNT WAIT TIME
;	IDIV 1,IRJAV		;DIVIDE BY AV NUMBER RUNNABLE FORKS
	CAIGE 1,^D1000		;ABOVE MIN WAIT TIME?
	JRST NEWST2		;NO FOLLOW REGULAR ALGORITHM
	HRRZ 2,FKSTAT(7)
	CAIN 2,TCITST		;TTY INPUT?
	JRST NEWST1		;YES, BE MORE GENEROUS
NEWST2:	HLRZ 2,FKQ(7)		;CURRENT Q
	JUMPE 2,R		;NO CHANGE IF HIGHEST
	CAIGE 2,MAXQ		;LOW Q?
	JRST NEWST4		;NO, DO Q'S 1 TO MAXQ-1 ALGORITHM
	CAIL 1,LOWQT		;LOW Q - WAITED FULL QUANTUM?
	JRST PSSKD1		;YES, CAN BE HI-Q
	CAIGE 1,^D500		;.GE. MINIMAL WAIT?
	RET			;NO
	MOVEI 1,MAXQ-1		;YES, REQUE ON MAXQ-1
	JRST NEWST3

NEWST4:	HRRZ 3,FKQ(7)		;COMPUTE TIME USED ON CURRENT QUEUE
	MOVN 3,3
	ADD 3,QBASE+1(2)
	CAMGE 1,3		;WAIT TIME LONGER THAN THAT?
	JRST [	ADDM 1,FKQ(7)	;NO, GIVE CREDIT FOR WAIT, LEAVE
		RET]		;FORK ON SAME QUEUE
	ADD 3,QBASE(2)		;ADD TIME USED ON EARLIER QUEUES
	CAML 1,3		;WAIT TIME LONGER THAN THAT?
	JRST PSSKD1		;YES, HI-QUEUE THE FORK
	MOVEI 1,-1(2)		;NO, BUMP FORK UP ONE LEVEL
	JRST NEWST3

PSSKD1:				;REINIT ON QUEUE 0 AND CLEAR WS
NEWST1:	MOVEI 2,6		;TTYIN COMPLETED -- IF LONG WAIT,
	HRRM 2,FKNR(7)
	SETZ 1,			;INIT ON QUEUE 0
NEWST3:	MOVE 2,QBASE+1(1)
	HRLI 2,0(1)		;CONSTRUCT NEW Q WORD
	MOVEM 2,FKQ(7)
	MOVE 2,TODCLK
	MOVEM 2,FKTIME(7)
	RET

;GIVEN Q NUMBER IN 1, SETUP Q WORD FOR THAT Q WITH 'ONE-SHOT'
;HIGH PRIORITY

PSSKD2:	MOVE 2,TBASE		;REQUEUE WITH PRIORITY EQUAL TO QUEUE 0
	SUB 2,TBASE(1)
	MOVN 3,TFACTR(1)
	ASH 2,0(3)
	ADD 2,TODCLK
	MOVEM 2,FKTIME(7)	;YES
	MOVE 2,QBASE(1)		;GIVE QUEUE 0 QUANTUM
	ADD 2,QBASE+1
	HRLI 2,0(1)		;CONSTRUCT FKSTAT WORD
	MOVEM 2,FKQ(7)
	RET

;SCHEDULE BEST JOB TO RUN NOW

SCDRUN:	MOVEI 6,GOLST		;LIST OF READY JOBS
	MOVEI 4,-1		;LOWEST NUMBER SO FAR
	PUSH P,[0]		;FLAG GOLST SEARCH
SCHEDC:	MOVEI 5,0(6)
	HRRZ 6,0(5)
	JUMPE 6,SCHEDD		;LIST EMPTY, NO MORE TO TEST
	MOVEI 7,@FKPT6M		;COMPUTE FORK INDEX
	CALL CORFCT		;GET PRIORITY VALUE
	CAIL 1,0(4)		;LOWEST YET?
	JRST SCHEDC		;NO
	SKIPL SCDRN1		;RUN ONLY SPECIFIED FORK
	JRST [	HLRZ 2,FKJOB(7)	;GET, THIS FORKS JOB NUMBER
		CAME 2,SCDRN1	;RUN THIS ONE?
		JRST SCHEDC	;NO, IGNORE
		JRST .+1]
	MOVEI 4,0(1)		;YES, REMEMBER NEW VALUE
	MOVEI 3,0(5)		;AND LOCATION
	JUMPE 4,SCHEDD		;NO NEED TO SEARCH FURTHER
	JRST SCHEDC

SCHEDD:	MOVNI 7,1
	CAIN 4,-1		;ANY JOB FOUND?
	JRST SCHEDE		;NO, TRY NEXT LIST IF ANY
	HRRZ 6,0(3)		;REMOVE FROM READY LIST
	HRRZ 2,0(6)
	HRRM 2,0(3)
	SKIPE 0(P)		;TEST FOR GOLST
	JRST [ CAMN 6,LOLSTL	;IS LOLST
		MOVEM 3,LOLSTL
		SOS NLOJOB
		JRST SCHEDF ]
	CAMN 6,GOLSTL
	MOVEM 3,GOLSTL
	SOS NGOJOB
SCHEDF:	MOVEI 7,@FKPT6M		;RETURN FORK INDEX
IFDEF CRSUM,<
;   THIS CODE ADDED FOR TIME IN BALANCE SET AND ON GOLIST (& LOLIST)
	CALL TIMMES		;UPDATE TOTAL GOLIST AND BALSET
	MOVE 1,BALTIM		;GET TIME ON QUE
	TLNN 2,-1		;ANYTHING IN BALANCE SET
	JRST .+3
	ADDM 1,JOBAL(10)	;ADD TO TIME IN BALANCE SET
	JRST .+2
	ADDM 1,JOBGO(10)	;ADD TIME IN GO LIST
	SOS 2			;DECREMENT # FORKS IN GO LIST
	MOVEM 2,JOBQNM(10)	;SAVE UPDATED QUE NUMBERS
;   END OF CODE FOR TIME IN BALANCE SET AND ON GOLIST
>
SCHDF1:	POP P,6
	RET

SCHEDE:	SKIPE 0(P)		;TRIED LOLST ALREADY
	JRST SCHDF1		;YES RETURN
	SETOM  0(P)		;SET FLAG FOR LOLST
	MOVEI 6,LOLST
	JRST SCHEDC		;TRY AGAIN

;REMOVE ENTRIES FROM LOLST AND PUT ON GOLST
INTERN REMOLO

REMOLO:	
	HRRZ 6,LOLST
	JUMPE 6,R		;NO MORE ENTRIES
	HRRZ 2,0(6)
	HRRM 2,LOLST
	MOVEI 2,LOLST
	CAMN 6,LOLSTL		;END OF LIST
	MOVEM 2,LOLSTL		;FIX UP LIST HEADER
	SOS NLOJOB		
	MOVEI 7,@FKPT6M
IFNDEF CRSUM,<
	CALL GOCONC		;PUT ON GOLST
>
IFDEF CRSUM,<
;   THIS CODE ADDED FOR TIME IN BALANCE SET AND ON GOLIST (& LOLIST)
	CALL GOCONT		;PUT ON GOLST
;   END OF CODE FOR TIME IN BALANCE SET AND ON GOLIST
>
	JRST REMOLO		;TRY SOME MORE


;CLOCK ROUTINES


;SCHEDULER CLOCK UPDATE

APCLK:	SETZM APCLKC		;CLEAR REQUEST FLAG
	MOVEM 1,CLKAC1		;SAVE COUPLE AC'S
	MOVEM 2,CLKAC2
	SETZM PIAPRX		;TO NOTE WHEN NEXT 1 MS INT OCCURS
	MOVE 1,TODCLK		;CLOCK UPDATED BY 1MS INTERRUPT
	SUBM 1,OLDTCK		;COMPUT NUMBER MS. SINCE LAST UPDATE
	EXCH 1,OLDTCK		;SAVE 'NOW' IN OLDTCK
	ADDM 1,JOBRTT
	MOVN 1,1
	ADDM 1,RJQNT		;UPDATE PROCESS RUNTIM
	SKIPG RJQNT
	AOS SKEDF3		;TIME IS UP
	SKIPE CPUID		;ONLY DO OTHER CLOCKS ON CPU0
	JRST APCLK4
	MOVSI 2,-NPCLKS		;UPDATE PROCESS CLOCKS
APCLK3:
	ADDM 1,BEGCLK(2)	;UPDATE (BEGCLK IS FIRST OF TABLE)
	SKIPG BEGCLK(2)		;TIMED OUT?
	AOS SKEDF3		;YES, NOTIFY SCHED
	AOBJN 2,APCLK3
APCLK4:
	MOVE 2,CLKAC2		;RESTORE AC2
	MOVE 1,CLKAC1
	JRST APCLKX

;HALT JOB

HLTJB:	HRRE 2,CTRLTT
 	JUMPL 2,HLTJB1		;IF JOB DETACHED
IFE SUMEX,<
	SETZM TTPSI(2)		;CLEAR TTY WORDS
	SETOM TTFORK(2)
>
IFN SUMEX,<
	CALL TTCLZ
>
HLTJB1:	MOVE 5,JOBNO
	SETZM CTRLTT		;CLEAR CONTROL TTY WORDS
	HRRZS JOBPT(5)
	MOVEI 1,400000
	SETO 2,
	DIC			;DEACTIVATE ALL INTERRUPTS
;;;	MOVNI 1,1
;;;	CLOSF
;;;	JFCL
;;;	RELD			;RELEASE ALL DEVICES
;;;	JFCL
	MOVEI 1,-4
	KFORK			;KILL ALL INFERIOR FORKS
	MOVE 7,FORKX		;THIS FORK.
;;;	HLLZ 2,FKPGS(7)		;FORKS PT
;;;	MOVSI 6,-1000
;;;	CALL CLRM0		;CLEAR UPT
;
	SETO 1,0
	MOVSI 2,400000
HLTJB2:	SKIPE UPTA(2)	;ANYTHING THERE
	PMAP
	MOVEI 6,0(2)
	CAIGE 6,777
	AOJA 2,HLTJB2		;REMOVE ALL PAGES
;
	SETOM PRIMRY	;SWITCH BACK TO PRIMARY JFN
;
	MOVNI 1,1
	CLOSF
	JFCL
	MOVNI 1,1
	RELD		;RELEASE ALL DEVICES
	JFCL
;
	MOVE 6,[XWD PJMPG-PPMPG,JOBMAP-JSB]
	HRLZ 2,FKJOB(7)		;GET SPTN OF JSB
	CALL CLRM0		;CLEAR ANY PAGES MAPPED IN JOB AREA
	SKIPGE JOBPMF
	JRST HLTJB4		;NO PMF
	SETO 1,
	HRLZ 2,JOBPMF
;;;	MOVSI 6,-1000
	MOVE 6,PMFCNT	;MAKE RELEASE OF PMF MORE EFFICIENT
	JUMPE 6,HLTJB5
	ADDI 6,1
	CAILE 6,1000
	MOVEI 6,1000
	MOVN 6,6
	HRLZ 6,6
;
	HRRI 2,0(6)
	PMAP			;DELETE CONTENTS OF PMF
	AOBJN 6,.-2
HLTJB5:
	HRRZ 1,JOBPMF
	SETOM JOBPMF		;ENABLE CLOSE OF PMF
	CLOSF			;CLOSE PMF - NO JSYS' AFTER HERE
	JFCL
HLTJB4:	SETZM PSB+UPTPG
	SETZM PSB+UACPG		;CURRENTLY CAN ONLY BE PSB
	MOVE 6,[XWD CPTPG+1-PSBPG,CPTPG+1]
	HRLZ 2,FKPGS(7)
	CALL CLRM0		;CLEAR PAGES IN PP AREA
;
	HRLZ 2,FKJOB(7)
	MOVE 6,[XWD -1,4]	;SEE IF PAGE 4 WAS MAPPED AGAIN
	SKIPE JSB+4
	CALL CLRM0
;
	HRRZ 1,FKJOB(7)		;JSB
	CALL WTSPT		;WAIT FOR IT TO BE UNSHARED
	CALL WTFPGS		;WAIT FOR PSB AND UPT TO BE IN NO MAPS
	AOS INSKED
	ENTSKD		;ENTER SCHED
	MOVE 1,JOBNO		;RELEASE JOB NUMBER
	SETZM JOBDIR(1)		;CLEAR DIRECTORY NUMBER
	SETOM JOBRT(1)		;INDICATE JOB NUMBER NOT IN USE
	ADDI 1,JOBPT
	HLOCKI PILCK
	EXCH 1,FREJOB		;PUT SLOT ON FREE LIST
	MOVEM 1,@FREJOB
	HULOCK PILCK
	OKPI
	SOS DNJOBS	;DECR DYN NUMBER OF JOBS
	JRST HLTFK2		;FLUSH THIS LAST FORK

HLTFK1:	AOS INSKED
	ENTSKD		;ENTER SCHEDULER
HLTFK2:	PUSH P,1
HLTFK3:	SLOCK SKDLCK		;PROTECT BALSET TABLES
	JRST [ CALL PRTST	;WAIT
		JRST HLTFK3]
	POP P,1
	DLOCK SYSLCK		;PROTECT LATER USE OF SPT
	CALL REMBSJ		;REMOVE FORK FROM BAL SET
IFN SUMEX,<
;   THIS CODE ADDED FOR TIME IN BALANCE SET AND ON GOLIST (& LOLIST)
	HLRZ 2,FKJOB(7)		;GET JOB NUMBER
	HRLZI 1,1
	ADDM 1,JOBQNM(2)	;WAS REMOVED FROM BAL SET WHILE WAITING
	MOVN 1,BALTIM		;CORRECT TIME AND NUMBER OF FORKS IN
	ADDM 1,JOBAL(2)		;BALANCE SET
;   END OF CODE FOR TIME IN BALANCE SET AND ON GOLIST
>
	MOVEI 1,(1B0)
	HRLM 1,FKPT(7)		;NOTE FORK NOT IN BALSET
	HRROS CGFLG		;FORCE GC
	HRRZ 1,FKJOB(7)		;JSB
	LDB 2,[POINT 14,SPT(1),13] ;SHARE COUNT NOW 1?
	CAIE 2,1		;LAST USE OF JSB?
	JRST [	MOVSI 2,-1B31	;NO, REDUCE SHARE COUNT
		ADDM 2,SPT(1)
		JRST .+2]
	CALL DESPT		;YES, DELETE IT (LOGOUT CASE)
	HLRZ 1,FKPGS(7)		;UPT
	CALL DESPT		;DELETE IT
	HRRZ 1,FKPGS(7)
	CALL DESPT		;DEASSIGN PSB
	CALL USYSLK		;RELEASE SYSLCK IF WE LOCKED IT
	ULOCK SKDLCK		;RELEASE SCHEDULER LOCK
	MOVNI 1,1
	XOR 1,CPUID		;SET UP FORKX DEPENDING ON CPU
	MOVEM 1,FORKX
	PUSH P,7
	CALL GCCOR		;CLEAN UP PAGES
	POP P,7
	HRRZ 1,FKWSP(7)		;MAKE SURE FORK CLEANED UP
	HRRZ 2,FKCNO(7)
	CAIN 1,0
	CAIE 2,0
;;;	BUG(CHK,<FORK NOT PROPERLY DELETED>)
	JFCL
	ADDI 7,FKPT
	HLOCKI PILCK
	EXCH 7,FREFK		;PUT FORK NUMBER ON FREE LIST
	TLO 7,400000
	MOVEM 7,@FREFK
	HULOCK PILCK
	OKPI			;RELEASE LOCK
	JRST SCHED0		;NOW THERE IS NOTHING LEFT OF JOB...

CLRM0:	SETZ 1,
CLRM1:	HRRI 2,0(6)		;PUT PAGE NUMBER WITH PTN
	CALL SETPT
	AOBJN 6,CLRM1
	RET

;WAIT FOR PSB AND UPT TO HAVE SHARE COUNT OF 1

WTFPGS:	HRRZ 1,FKPGS(7)		;PSB
	CALL WTSPT
	HLRZ 1,FKPGS(7)		;UPT
WTSPT:	PUSH P,4
WTSPT2:	JSP 4,WTSPTT		;TEST PAGE NOW
	JRST WTSPT1		;MUST WAIT
	POP P,4			;NOW OK
	RET

WTSPT1:	MOVSI 1,0(1)
	HRRI 1,WTSPTT
	JSYS EDISMS
	HLRZ 1,1
	JRST WTSPT2

WTSPTT:	LDB 2,[POINT 14,SPT(1),13]	;GET SHARE COUNT
	CAIE 2,1
	JRST 0(4)
	JRST 1(4)

;PRELIMINARY FORK INIT

FKSET:	MOVE 1,PSB+PSBPG	;SETUP USER MAP WORD
	MOVEM 1,PSB+UACPG	;SAME AS PSB UNTIL OVERFLOW
	MOVE 1,[IOWD NUPDL,UPDL]
	MOVEM 1,UPP		;MON ROUTINES PDL
	MOVE 1,[IOWD 1000,PSIPGA]
	MOVEM 1,PSIPT		;PSI STORAGE STACK
	MOVEI 1,<UACB>B39	;SETUP AC BASE
	MOVEM 1,ACBAS
	MOVEM 1,ACBAS1
	SETACB 1
	MOVE 1,ICAPT
	MOVEM 1,CAPT
	MOVE 1,INTDF0		;INTERRUPT SWITCHES
	MOVEM 1,INTDFF
	MOVE 1,MJRST0
	MOVEM 1,MJRSTF
	SETZM NSKED
	MOVE 1,RSKEDN
	MOVEM 1,RSKED
	MOVSI 1,<MOVEM 1,0>B53
	MOVEM 1,PATU40		;SETUP INSTRUCTION PART FOR COMPAT
	MOVEM 1,PATUPC		;ENTRY PROCEDURE
	SETOM SLOWF
	SETOM INTDF
	SETOM TRAPC
	SETOM FKTAB
	MOVEI 1,FKTAB+1
	HRLI 1,-1(1)
	BLT 1,FKTAB+NLFKS/2-1
	MOVE 2,FORKX
	HLRZ 1,FKPGS(2)		;GET SPTN OF PAGE TABLE
	LSH 1,^D9		;CONSTRUCT SHARE POINTER
	TLO 1,RWXB-XCTB+SHRBIT
	MOVEM 1,PSB+UPTPG
	MOVE 6,FORKX
	TLNE 7,NEWJBF		;NEW JOB TOO?
	JRST FKSET1		;YES
	HRRZ 1,FKJOB(6)		;GET JSB
	MOVSI 2,1B31
	ADDM 2,SPT(1)		;BUMP SHARE COUNT
	LSH 1,^D9
	TLO 1,RWXB+SHRBIT	;CONSTRUCT SHARE POINTER
	MOVEM 1,PSB+JSBPG
	MOVEI 1,FKSET2
FKSET3:	MOVEM 1,PIPC
	SETZM PIOLDS
	MOVE 1,PSB+JSBPG	;GET JSB POINTER
	TLC 1,SHRBIT+INDBIT	;MAKE INTO INDIRECT POINTER
	ADDI 1,JOBMAP-JSB+1	;FIRST WORD OF JOB PT
	MOVEI 2,PJMPG+1		;STARTING AFTER JSB,
	MOVEM 1,PSB(2)		;FILL MON MAP WITH IND POINTERS
	ADDI 2,1
	CAIGE 2,PPMPG
	AOJA 1,.-3
	JRST PIRQR		;DEBREAK - RUN IN NORMAL MODE

;INIT NEW JOB

FKSET1:	MOVEI 2,0(7)		;GET NUMBER OF CONTROLLING TTY
;
	HLOCKI PILCK
	SKIPN FREJOB
	JSR BUGHLT
	MOVE 1,@FREJOB		;ASSIGN JOB NUMBER
	EXCH 1,FREJOB
	AOS DNJOBS	;INCR DYNAMIC NUMBER OF JOBS
	HULOCK PILCK
	OKPI
;
	SUBI 1,JOBPT
	MOVEM 1,JOBNO
	HRLM 1,FKJOB(6)		;JOB NUMBER TO FORK TABLE
	MOVSM 2,JOBPT(1)	;TTY ASSIGNED TO JOB
	HRLM 1,TTFORK(2)	;JOB CONTROLLED BY TTY
;
	PUSH P,1
	MOVSI 1,TTSTOP		;LOAD STOP CHARACTER
	MOVEM 1,TTRUBA(2)	;CLEAR RUBOUT SPECIAL ACTION WOORD
	POP P,1
;
	MOVE 2,FORKX
	HRRM 2,JOBPT(1)		;TOP FORK OF JOB
	SETZM JOBRT(1)		;JOB RUNTIME
;
;  I4 CHANGE
	MOVE 2,ISKIN1
	MOVEM 2,JOBISK(1)
	MOVE 2,ISKIN2
	MOVEM 2,JOBQNT(1)
;
	HRRZ 1,FKJOB(6)		;JSB
	LSH 1,^D9
	TLO 1,RWXB+SHRBIT
	MOVEM 1,PSB+JSBPG	;SETUP JSB
	MOVE 1,JOBNO
	HLRZ 2,JOBPT(1)		;CONTROLLING TTY
	MOVEM 2,CTRLTT		;IN JSB
	MOVEI 1,EXEC0
	JRST FKSET3

FKSET2:	SETZ 0,			;START WITH 0 AC'S
	MOVEI 17,1
	BLT 17,16
	SETZ 17,
	AOS INSKED
	ENTSKD
	MOVSI 1,UMODF
	MOVEM 1,PPC
	MOVEI 1,HALTT
	JRST DISMSE

INTDF0:	SOS INTDF		;NORMAL CONTENTS OF INTDFF
MJRST0:	JRSTF @FPC		;NORMAL CONTENTS OF MJRSTF
CHNSON:	EXP 1B9+1B11+1B15+1B16+1B17+1B18+1B20	;ALWAYS ON PSI CHANS

;PSEUDO-INTERRUPT SYSTEM

NEWFKF==1B20			;INITIATE NEW FORK - PI FLAG
NEWJBF==1B21			;INITIATE NEW JOB - PI FLAG
PSIIF==1B22			;CHANNEL INTERRUPT REQUESTED IN FKINTB
PSIT1F==1B23			;TERMINAL CODE INTERRUPT, PHASE 1
PSIT2F==1B24			;TERMINAL CODE INTERRUPT, PHASE 2
SUSFKR==1B25			;SUSPEND FORK REQUEST
PSIWTF==1B26			;JOB WAS IN WAIT STATUS
PSILOB==1B27			;LOGOUT JOB REQUEST
FRZB1==1B28			;DIRECT FREEZE HAS BEEN DONE
FRZB2==1B29			;INDIRECT FREEZE HAS BEEN DONE
FRZBB==FRZB1+FRZB2		;BOTH BITS FOR EXTERNAL REFS

;SCHEDULER CAUSES JOB TO BE STARTED HERE ON PI REQUEST
;SAVED PC IN PIPC
;PIMSK CONTAINS INTERRUPT REQUEST WORD

PIRQ:	MOVEM P,PIAC+17
	MOVEI P,PIAC		;SAVE USER AC'S
	BLT P,PIAC+16
	MOVE P,PIPDL		;SET UP LOCAL STACK
	MOVE 7,PIMSK		;INTERRUPT REQUEST WORD
	MOVE 6,FORKX
	SETZ 2,
	TLNE 7,PSIWTF		;WAS JOB IN WAIT STATUS?
	MOVE 2,FKSTAT(6)	;YES, GET OLD STATUS
	MOVEM 2,PIOLDS		;SAVE OLD STATUS, OR 0 IF WAS RUNNING
	TLNE 7,NEWFKF		;START NEW FORK?
	JRST FKSET		;YES
	TLNE 7,PSIT1F
	JRST PSIT1		;TERMINAL, PHASE 1
	TLNE 7,PSIT2F
	JRST PSIT2		;TERMINAL, PHASE 2
PSITR1:	TLNE 7,PSIIF+SUSFKR+PSILOB
	JRST PSII		;CHANNEL INTERRUPT SPEC. BY FKINTB
PIRQR:	CALL UNPIR		;LEAVE PI STATE
PSIDF1:	SKIPN 1,PIOLDS		;WAS RUNNING BEFORE PSI?
	JRST SCHED0		;YES
	JRST DISMSE		;NO, REPLACE ON WAIT LIST

UNPIR:	AOS INSKED		;ENTER SCHEDULER
	MOVE 1,[XWD PIAC,PAC]
	BLT 1,PAC+17		;PUT AC'S BACK
	IFN KIFLG,<JSP 7,KISSAV>
	MOVE 1,PIPC
	MOVEM 1,PPC
	MOVSI 1,200000
	MOVE 7,FORKX
	ANDCAM 1,FKINT(7)
	RET

PIPDL:	IOWD NPIPDL,PIPDB	;INTERRUPT ROUTINES LOCAL PDL

;REQUEST INTERRUPT
;AC1 CONTAINS INTERRUPT NUMBER
;AC2 CONTAINS FORK INDEX

PSIRQ0:	MOVE 2,FORKX		;REQUEST INTERRUPT IN CURRENT FORK
PSIRQF:	NOSKED			;REQUEST INTERRUPT, FORK IN AC2
	CALL PSIRQ
	OKSKED
	RET

;ENTERED FROM SCHEDULER REQUEST PROCESSOR

PSIRQ:	MOVE 1,BITS(1)
PSIRQB:	
	HLOCKI PSILCK
	IORM 1,FKINTB(2)	;SET BIT IN INTERRUPT WAITING BUFFER
	MOVSI 1,400000+PSIIF	;REGULAR INTERRUPT FLAG
	IORM 1,FKINT(2)
	CAMN 2,FORKX		;FOR THIS FORK?
	JRST	[HULOCK PSILCK
		OKPI
		RET ]
PSIR4:	SKIPGE NOPILK
	JSR BUGCHK		;BETTER BE NOPI HERE
	HLRZ 1,FKPT(2)		;NO, GET STATUS OF FORK
	CAIN 1,WTLST		;NOW WAITING?
	AOS ISKED		;YES, CAUSE CHECK

;SET NEW SCHED STATUS FOR PSI'D FORK

	PUSH P,7
	MOVEI 7,0(2)
	HLRZ 1,FKQ(7)		;CURRENT QUEUE
	CAIG 1,1		;HIGH ONES?
	JRST PSIR61
	MOVEI 1,1		;SET PRIORITY TO QUEUEUE 1
	PUSH P,3
	CALL PSSKD2		;SET SHORT QUANTUM, HIGH PRIORITY
	POP P,3
PSIR61:	
	HULOCK PSILCK
	OKPI
	MOVEI 2,0(7)
	POP P,7
	RET

;TERMINAL INTERRUPT
;PHASE ONE - CALLED FROM TERM SERVICE ROUTINES
; 2/ LINE NO.,   3/ INTERRUPT CODE
;SEND TO TOP FORK TO FIND PROPER DESTINATION

TTPSRQ:	HLRZ 2,TTFORK(2)	;GET JOB USING THIS TTY
	ANDCMI 2,600000		;FLUSH EXTRANEOUS BITS
	HRRZ 2,JOBPT(2)		;GET INDEX OF TOP FORK
	MOVSI 1,1B18+PSIT1F	;PHASE ONE REQUEST
	HLOCKI PSILCK
	IORM 1,FKINT(2)
	HRRM 3,FKINT(2)		;INTERRUPT CODE
	JRST PSIR4		;SET NEW STATUS

;ROUTINES TO HANDLE INTERRUPT CONDITIONS AS SPECIFIED BY BITS
;IN LEFT HALF OF FKINT

;TERMINAL INTERRUPT, PHASE ONE
;THIS CODE RUN IN TOP FORK ONLY

PSIT1:	MOVE 6,BITS(7)
	HLRZ 1,FORKN		;START WITH TOP FORK
	SETO 5,
	TDNE 6,FKPSIE(1)	;TERM CODE ON IN FORK?
	MOVEI 5,0(1)		;YES, REMEMBER FORK
	JLOCK
	CALL PSIT1A		;LOOK AT ALL INFERIORS
	JUMPL 5,[ANDCAM 6,TTSPSI ;NOT FOUND, SO TURN OFF CODE
		SKIPL 2,CTRLTT
		ANDCAM 6,TTPSI(2)
		JULOCK
		JRST PSITR1]
	HRRZ 2,SYSFK(5)		;GET SYSTEM INDEX OF FORK TO GET INTERPT
	JULOCK
	CAMN 2,FORKX		;THIS FORK?
	JRST PSIT2		;YES, GO DIRECTLY TO PHASE TWO
	NOSKED
	HLOCKI PSILCK
	HRRM 7,FKINT(2)		;NO, SETUP TO INTERRUPT PROPER FORK
	MOVSI 1,PSIT2F+400000	;PHASE TWO REQUEST FLAG
	IORM 1,FKINT(2)
	CALL PSIR4
	OKSKED
	JRST PSITR1

;SEARCH FORK STRUCTURE FOR FORK TO INTERRUPT

PSIT1A:	ADD 1,INFERP		;LOOK AT INFERIOR LIST
PSIT1B:	LDB 1,1			;GET NEXT IN LIST
	JUMPE 1,R		;RETURN AT END OF LIST
	HRRZ 2,SYSFK(1)		;CHECK STATE OF FORK
	HLRZ 3,FKPT(2)		;SEE IF FORK FROZEN OR HALTED
	CAIE 3,WTLST
	JRST PSIT1D		;NOT ON WAIT LIST
	HRRZ 3,FKSTAT(2)
	CAIN 3,FRZWT		;FROZEN?
	JRST PSIT1C		;YES
	CAIE 3,HALTT		;HALTED OR FORCED TERM?
	CAIN 3,FORCTM
	JRST PSIT1C		;YES
PSIT1D:	TDNE 6,FKPSIE(1)	;FORK HAS CODE ENABLED?
	MOVEI 5,0(1)		;YES, REMEMBER IT
	HRLM 1,0(P)		;REMEMBER CURRENT FORK
	CALL PSIT1A		;CHECK INFERIORS
	HLRZ 1,0(P)		;RECOVER CURRENT
PSIT1C:	ADD 1,PARALP		;DO PARALLELS
	JRST PSIT1B

;FORK STRUCTURE POINTERS

SUPERP:	POINT 12,FKPTRS,11	;SUPERIOR
PARALP:	POINT 12,FKPTRS,23	;PARALLEL
INFERP:	POINT 12,FKPTRS,35

;TERMINAL INTERRUPT, PHASE TWO

PSIT2:	MOVEI 1,0(7)
	CALL GETCHA
	LDB 2,2
	MOVE 1,BITS(2)		;AND SET BIT IN INT. WAITING WORD
	AND 1,PSICHM		;BUT ONLY FOR ENABLED CHANNELS
	IORM 1,PSIBW
	JRST PSII		;THEN GO PROCESS IT

;SUSPEND FORK REQUEST

PIRSFK:	MOVE 1,PIPC
	CALL PITEST		;NOW INTERRUPTABLE?
	JRST PIRSF1		;NO
	MOVEI 3,SUSWT		;SUSPENDED FORK TEST
PIRSK1:	MOVE 2,FORKX
	MOVSI 1,SUSFKR
	ANDCAM 1,FKINT(2)
	CALL UNPIR		;LEAVE INTERRUPT STATE
	IORM 1,FKINT(7)		;KEEP INTERRUPT STARTING BIT
	MOVEI 1,0(3)		;SUSWT OR FRZWT
	HRL 1,PIOLDS		;WITH OLD STATUS
	JRST DISMSE		;DISMISS

PIRSF1:	MOVE 7,FORKX
	MOVSI 1,SUSFKR		;TURN REQUEST BIT BACK ON
	IORM 1,FKINT(7)
	JRST PSIDFR		;AND SET DEFERRED INTERRUPTS

SUSWT:	JRST 0(4)		;SCHEDULER TEST FOR SUSPENDED FORK

;LOGOUT REQUEST

PIRLGO:	MOVE 1,PIPC
	CALL PITEST		;OK TO INTERRUPT?
	JRST [	MOVE 7,FORKX	;NO, REMEMBER REQUEST
		MOVSI 1,PSILOB
		IORM 1,FKINT(7)
		JRST PSIDFR]
	SETZM PIOLDS		;MAKE FORK RUNNABLE
	MOVEI 1,FLOGO
	EXCH 1,PIPC
	SKIPGE SLOWF
	JRST [	MOVEM 1,FPC	;IN USER MODE, SIMULATE JSYS
		JRST PIRQR]
	MOVE 2,PIAC+17		;IN MON MODE, SIMULATE PUSHJ
	PUSH 2,1
	MOVEM 2,PIAC+17
	JRST PIRQR

;PROCESS INTERRUPT(S) FOR THIS FORK AS SPECIFIED BY FKINTB

PSII:
	IFN KIFLG,<JRSTF @[1B6+.+1]>  ;TURN ON UXCT FLAG
	MOVE 1,MJRST0		;NORMALIZE ALL DEFER TRAPS
	MOVEM 1,MJRSTF
	MOVE 1,INTDF0
	MOVEM 1,INTDFF
	TLNE 7,SUSFKR		;FORK SUSPENSION REQUEST?
	JRST PIRSFK		;YES
	TLNE 7,PSILOB		;LOGOUT REQUEST?
	JRST PIRLGO
	MOVE 2,FORKX
	MOVEI 1,0
	EXCH 1,FKINTB(2)	;RESET FKINTB TO 0
	IORM 1,PSIBW		;INCLUDE IN PROCESS WAITING BREAKS
	MOVE 1,PSICHM		;USERS ENABLED CHANNELS
	IOR 1,CHNSON		;WITH ALWAYS ON CHANNELS
	IOR 1,SUPCHN		;WITH SUPERIOR RESERVED CHANNELS
	SKIPE 3,PIOLDS		;WAS FORK WAITING?
	JRST [	SKIPN FORKN		;AND NOT TOP FORK?
		JRST .+1	;NO
		MOVEI 3,0(3)	;YES, HALT OR FORCED TERM?
		CAIE 3,HALTT
		CAIN 3,FORCTM
		SETZ 1,		;YES, FLUSH BREAKS
		JRST .+1]
	ANDB 1,PSIBW		;FLUSH DISABLED CHANS
	JUMPE 1,PIRQR		;RETURN IF NO BREAKS WAITING
	MOVE 1,PIPC		;PROCESS PC
	CALL PITEST		;CAN PROCESS BE INTERRUPTED NOW?
	JRST PSIDFR		;NO, GO SETUP DEFERRED INTERRUPT
PSIS:	MOVE 1,PSIBW
	TDNE 1,MONCHN		;MONITOR RESERVED CHANNEL?
	JRST PSIMB		;YES
	AND 1,SUPCHN		;LOOK AT SUPERIOR RESERVED CHANS
	JUMPN 1,PSIN1		;TERMINATE IF ANY
	MOVE 1,PSIBW
	AND 1,CHNSON		;LOOK AT SPECIAL CHANNELS
	SKIPE PSISYS		;IF THIS PROCESS NOT TAKING PSI'S,
	JUMPN 1,PSIN1		;TERMINATE IT IF ANY SPECIALS
	ANDCM 1,PSICHM		;AND'ING WITH USER'S 'OFF' CHANNELS
	JUMPN 1,PSIN1		;TERMINATE CAUSE CHANNEL NOT ACTIVE
	SKIPE PSISYS		;PSI SYSTEM ON?
	JRST PIRQR		;NO
	SKIPN LEVCHN		;THIS PROCESS TAKING INTERRUPTS?
	JRST PSIN1		;NO, GO TRANSMIT THE PSI
	MOVE 1,PSIBW		;FIND HIGHEST PRIORITY INTERRUPT
	MOVEI 2,0		;NOW WAITING
	MOVSI 3,1
PSIS1:	JUMPL 1,PSIS2		;THIS CHANNEL HAS WAITING BREAK?
PSIS4:	LSH 1,1			;NO, SHIFT TO NEXT CHANNEL
	ADDI 2,1		;COUNT CHANNEL NUMBER
	JUMPN 1,PSIS1		;KEEP LOOKING IF ANY BITS LEFT

;AC3 NOW CONTAINS LEVEL OF HIGHEST PRIORITY INTERRUPT FOUND
;AC5 CONTAINS CORRESPONDING CHANNEL NUMBER

	JUMPE 3,PSID1		;NO LEVEL ASSIGNED? GO XMIT INTERRUPT
	MOVE 1,BITS(3)
	CAMG 1,PSIBIP		;OK TO BREAK ON THIS LEVEL?
	JRST [	MOVE 2,PSIBW	;NO, .GE. PRIORITY LEVEL IN PROGRESS
		TDNN 2,CHNSON	;BREAKS ON PANIC CHNS WAITING?
		JRST PIRQR	;NO, HOLD WAITING BREAKS
		JRST PSIN1]	;YES, MUST TERMINATE
	IORM 1,PSIBIP		;YES, REMEMBER  BREAK THIS LEVEL
	HRRZ 1,LEVCHN		;GET ADR OF USER'S CHANNEL TABLE
	ADDI 1,0(5)		;COMPUTE ADR OF USER'S CHANNEL WORD
	UMOVE 1,0(1)		;GET ADR OF USER'S INT ROUTINE
	HRLI 1,UMODF		;USER MODE ON, OTHER FLAGS OFF
	EXCH 1,PIPC		;SET TO START THERE, GET OLD PC
	TLNN 1,UMODF		;WAS IN USER MODE?
	JRST PSISM		;NO, MUST SAVE MONITOR CONTEXT
PSIS5:	SETZM PIOLDS
	HLRZ 2,LEVCHN		;GET ADR OF USER'S LEVEL TABLE
	ADDI 2,-1(3)		;COMPUTE ADR OF USER'S LEVEL WORD
	UMOVE 2,0(2)		;GET ADR OF PC WORD FOR THIS LEVEL
	TRNN 2,777760		;ADDRESS IS AC?
	MOVEM 1,PIAC(2)		;YES, STRANGE BUT ALLOW IT
	TRNE 2,777760		;NORMALLY,
	UMOVEM 1,0(2)		;STORE BREAK PC IN USER'S MEMORY
PSID3:	MOVE 1,BITS(5)		;CLEAR WAITING BREAK BIT FOR THIS CHANNEL
	ANDCAM 1,PSIBW
	JRST PIRQR		;TO USER

PSIS2:	HRRZ 4,LEVCHN		;GET ADR OF USER'S CHANNEL TABLE
	ADDI 4,0(2)		;COMPUTE ADR OF USER'S CHANNEL WORD
	XCTUU [HLRZ 4,0(4)]	;GET LEVEL NUMBER FOR THIS CHANNEL
	CAILE 4,NPILEV		;LEGAL LEVEL?
	SETZ 4,			;NO, TREAT AS 0
	CAIG 3,0(4)		;OLD LEVEL GREATER THAN CURRENT?
	JRST PSIS4		;NO
	MOVEI 3,0(4)		;YES, REMEMBER NEW LEVEL
	MOVEI 5,0(2)		;AND CHANNEL NUMBER
	JRST PSIS4		;RESUME SCAN

;MONITOR ROUTINE IS SHORTSTOPPING INTERRUPTS - SIMULATE  JSYS MONBK

PSIMB:	HRRZ 1,MONBK		;ROUTINE ADDRESS
	EXCH 1,PIPC		;GET OLD PC
	SETZM PIOLDS
	HLRZ 2,MONBK		;RET LOC
	MOVEM 1,0(2)		;STORE RETURN
	JRST PIRQR

;SPECIAL ROUTINE TO SAVE STATE OF INTERRUPTED MONITOR
;ROUTINE

PSISM:	MOVS 2,BITS(3)		;NO, REMEMBER MONITOR INTERRUPT
	IORM 2,PSIBIP		;IN RH OF BIP WORD
	MOVE 7,PSIPT		;STORAGE STACK POINTER
	HLRE 6,7		;SEE IF ENOUGH ROOM
	MOVN 6,6		;GET POSITIVE COUNT
	CAIGE 6,NUPDL+<EUACB-UACB>+30
	BUG(HLT,<PSI STORAGE STACK OVERFLOW>)
	MOVE 10,7		;SAVE POINTER
	PUSH 7,1
	MOVSI 6,-NSAVC		;SAVE VULNERABLE CELLS
	PUSH 7,@SAVCT(6)
	AOBJN 6,.-1
	MOVSI 6,UPDL		;STORE ENTIRE MONITOR STACK
	HRRI 6,1(7)
	ADD 7,[XWD NUPDL,NUPDL]
	NOSKED
	BLT 6,0(7)
	MOVSI 1,PIAC		;STORE CURRENT MONITOR AC'S
	HRRI 1,1(7)		;NOW LIVING IN PIAC
	ADD 7,[XWD 20,20]
	BLT 1,0(7)
	IFN KIFLG,<
	MOVEI 1,KIASTK		;MOVE AC BLOCK 1 TO TOP OF STACK
	ADD 1,KXUPT
	MOVE 2,KXUPT
	XCTUM [BLT 1,KIASTK+17(2)]>
	HRRZ 1,ACBAS		;STORE ALL AC BLOCKS IN USE
	HRRZ 2,ACBAS1
	CAIGE 1,0(2)
	MOVEI 1,0(2)
	SUBI 1,-1(2)		;COMPUTE NUMBER OF BLOCKS IN USE
	LSH 2,^D18+4
IFN KIFLG,<MOVE 2,KXUPT
	ADDI 2,KIASTK
	HRLZ   2,2 >	;ACTUAL TOP OF AC STACK
	MOVE 4,2
	HRRI 2,1(7)
	LSH 1,4
	HRLI 1,0(1)		;NUMBER OF WORDS BOTH HALFS
	ADD 7,1
	BLT 2,0(7)
	PUSH 7,1		;SAVE COUNT FOR DEBRK
	PUSH 7,ACBAS		;AND CURRENT ACBAS
	HRRI 4,PIAC		;RECOVER USER AC'S AT TIME OF MON CALL
	BLT 4,PIAC+17
	OKSKED
	MOVE 1,UPDL		;USER PC AT MONITOR CALL
	PUSH 7,10		;PSI STACK BEFORE ALL THIS PUSHING
	PUSH 7,1
	MOVEM 7,PSIPT
	TLZ 1,UMODF		;SO HE CAN TELL IT WAS MON INTERRUPT
	SETOM SLOWF
	JRST PSIS5		;FINISH INTERRUPT START

;XMIT INTERRUPT TO SUPERIOR FORK

PSIT:	HRRZ 2,FORKN
	MOVE 2,FKPTRS(2)	;POINTERS RELATIVE TO FORK
	LSH 2,-^D24		;SUPERIOR FORK POINTER
	HRRZ 2,SYSFK(2)		;SYSTEM FORK INDEX
	JRST PSIRQF		;REQUEST INTERRUPT

;THIS FORK WON'T TAKE INTERRUPT, DISMISS IT AND RECORD WHY

PSID1:	MOVEI 2,0(5)		;CHANNEL WITH NO LEVEL ASSIGNED
	JRST PSIN2

PSIN1:	MOVE 1,PSIBW		;INTERRUPTS OFF OR NO LEVCHN
	JFFO 1,.+1		;CALCULATE CHANNEL NUMBER
PSIN2:	MOVEM 2,FORCTC		;SAVE CHANNEL NUMBER FOR STATUS
	MOVE 1,BITS(2)		;JUST ONE CHANNEL AT A TIME
	ANDCAM 1,PSIBW		;RESET WAITING BIT
	CALL FKTMI		;GIVE FORK TERM INTERRUPT
	MOVEI 3,FRZWT		;FORK FROZEN STATE TEST
	MOVE 1,CAPENB
	TLNE 1,(1B17)		;SUPERIOR WANTS FROZEN STEAD HALT?
	JRST PIRSK1		;YES, GO FREEZE
	CALL UNPIR		;LEAVE PI STATE, MOVE AC'S ETC.
	MOVE P,PI7P
	MOVEI 1,FORCTM
	JRST DISMSE		;THIS ONE IS BEING DISMISSED

FORCTM:	JRST 0(4)		;SCHEDULER TEST FOR FORCED TERM FORK

;INTERRUPT SUPERIOR FORK ON TERMINATION

FKTMI:	PUSH P,1
	HRRZ 1,FORKN
	SKIPN 1
	SKIPA 1,[^D35]		;TERMINATING TOP FORK, GIVE CH 35
	MOVEI 1,^D19		;19 IS FORK TERMINATED
	CALL PSIT		;TRANSMIT IT
	POP P,1
	RET

GETCHA:	MOVEI 2,0(1)
	IDIVI 2,6
	ADDI 2,PSICHA
	HLL 2,CH6TAB(3)
	RET

;DEFERRED INTERRUPT LOGIC
;SET TRAPS TO RECHECK INTERRUPTS WHEN STATE CHANGES

PSIDFR:	MOVE 1,MJRST1
	MOVEM 1,MJRSTF
	MOVE 1,INTDF1
	MOVEM 1,INTDFF
	CALL UNPIR		;LEAVE BREAK STARTING STATE
	IORM 1,FKINT(7)		;BUT LEAVE PENDING BIT
	JRST PSIDF1		;RESUME

MJRST1:	JRSTF @[PSISV0]
INTDF1:	JSYS PSISV1

PSISV1:	XWD PIPC,.+1
	SOS INTDF
	JRSTF @[PSISV2]

PSISV0:	MOVEM 1,PIPC		;SAVE AC1
	MOVE 1,FPC		;FPC NOW CONTAINS USER'S PC
	EXCH 1,PIPC
PSISV2:	MOVEM P,PIAC+17		;SAVE USER'S AC17
	MOVEI P,PIAC		;AND AC'S 0-16
	BLT P,PIAC+16
	MOVE P,PIPDL		;RESTORE INTERRUPT STARTING STATE
	SETZM PIOLDS
PSISV3:	MOVE 2,FORKX
	MOVE 7,FKINT(2)
	JRST PSII		;ENTER MAIN SEQUENCE

;TEST FOR IMMEDIATE OR DEFERRED INTERRUPT
;SKIP => IMMEDIATE
;NOSKIP => DEFERRED
;CALLED WITH TEST USER PC IN AC1

PITEST:	TLNE 1,UMODF		;USER MODE?
	JRST RSKP		;YES, IMMEDIATE
	SKIPL SLOWF		;NO, SLOW CODE?
	SKIPL INTDF		;YES, INTERRUPTABLE
	RET			;NO, DEFER
	SKIPN NSKED		;IN CASE NOSKED W/O NOINT
	SKIPL TRAPC		;IN PAGER TRAP, OR
	RET			;YES, DEFER
	JRST RSKP		;IMMEDIATE

;DEBREAK

.DEBRK:	SKIPN PSIBIP		;ANY BREAKS IN PROGRESS?
IFE SUMEX,<
	XCT MJRSTF		;NO, ACTS AS NOP
>
IFN SUMEX,<
	JRST	[EXCH	1,FPC
		MOVEM	1,SAVFPC ;SAVE FOR DEBUGGING
		EXCH	1,FPC
		XCT	MJRSTF]
>
	MOVEM 1,TW1		;SAVE USER AC1,2
	MOVEM 2,TW2
	MOVE 2,FORKX
	MOVSI 1,200000
	IORM 1,FKINT(2)		;SET INTERRUPT STARTING BIT
	MOVE 2,TW2
	MOVE 1,TW1
	MOVEM P,PIAC+17		;ENTER INTERRUPT STARTING STATE
	MOVEI P,PIAC
	BLT P,PIAC+16
	MOVE P,PIPDL
	SETZM PIOLDS
PSIDBK:	MOVE 2,PSIBIP		;BREAKS NOW IN PROGRESS
	JFFO 2,.+2		;FIND HIGHEST ONE
	JRST 4,.		;IMPOSSIBLE
	HLRZ 1,LEVCHN		;COMPUTE ADDRESS OF RETURN PC
	ADDI 1,-1(3)
	UMOVE 1,0(1)
	TRNN 1,777760		;ADDRESS IS AC?
	SKIPA 1,PIAC(1)		;YES
	UMOVE 1,0(1)		;GET RETURN PC FROM USER MEMORY
	MOVS 2,BITS(3)
	TDNE 2,PSIBIP		;WAS THIS MONITOR INTERRUPT?
	JRST PSIS7		;YES, GO UNWIND
PSIS8:	TLZ 1,7037		;FLUSH TROUBLESOME BITS
	TLO 1,UMODF		;MAKE SURE USER MODE IS ON
	MOVEM 1,PIPC		;SET TO DEBREAK AT THAT ADDRESS
PSIS6:	MOVE 1,BITS(3)
	ANDCAM 1,PSIBIP		;CLEAR BIP THIS LEVEL
	JRST PSISV3		;GO CHECK FOR OTHER INTERRUPTS AND RETURN

PSIS7:	ANDCAM 2,PSIBIP		;CLEAR MON BREAK FLAG FOR THIS LEVEL
	MOVE 7,PSIPT
	POP 7,4			;PC GIVEN TO USER
	POP 7,PSIPT		;TOP OF THIS BLOCK OF PSI STORAGE
	TLON 1,UMODF		;IF IT WAS DIDDLED AT ALL,
	CAME 1,4
	JRST PSIS8		;DON'T RESUME MON ROUTINE
	POP 7,2
	MOVEM 2,ACBAS
	SETACB 2
	POP 7,4
	SUB 7,4
	HRRZ 5,ACBAS1
	LSH 5,4
	IFN KIFLG,<MOVEI 5,KIASTK   ;ACTUAL TOP OF STACK
	ADD 5,KXUPT >
	MOVE 2,5		;SAVE ACB ADDRESS
	HRLI 5,1(7)
	ADDI 4,0(5)
	NOSKED
	BLT 5,-1(4)		;RESTORE AC BLOCKS
	MOVSI 5,PIAC		;PUT USER CURRENT AC'S INTO TOP BLOCK
	HRRI 5,0(2)
	BLT 5,17(2)
	IFN KIFLG,<
	MOVEI 5,KIASTK		;PUT TOP OF STACK BACK IN AC BLOCK1
	ADD 5,KXUPT
	HRLZ 5,5
	XCTMU [BLT 5,17]>
	SUB 7,[XWD 20,20]
	MOVEI 2,PIAC
	HRLI 2,1(7)
	BLT 2,PIAC+17		;RESTORE MONITOR AC'S
	SUB 7,[XWD NUPDL,NUPDL]
	MOVEI 2,UPDL
	HRLI 2,1(7)
	BLT 2,UPDL+NUPDL-1	;RESTORE STACK
	OKSKED
	MOVEI 2,NSAVC-1
	POP 7,@SAVCT(2)
	SOJGE 2,.-1
	POP 7,PIPC		;ACTUAL MON INTERRUPT PC
	SETZM SLOWF
	SETOM INTDF
	JRST PSIS6		;NOW DEBRK
;
;
;    TABLE OF VULNERABLE CELLS

SAVCT:	KI40
	60
	MPP
	FPC
	PIOLDS
	XMENTR
   IFN KIFLG,<
	KIMAC1
	KIMAC2>
NSAVC==.-SAVCT

