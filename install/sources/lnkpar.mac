UNIVERSAL LNKPAR - PARAMETERS FOR LINK-10
SUBTTL	D.M.NIXON/DMN		13-JUL-74


;***COPYRIGHT 1973, 1974  DIGITAL EQUIPMENT CORP., MAYNARD, MASS.***

SEARCH	C,SCNMAC	;SEARCH C.MAC SYMBOL TABLE

CUSTVR==0		;CUSTOMER VERSION
DECVER==26	;DEC VERSION
DECMVR==0		;DEC MINOR VERSION
DECEVR==221		;DEC EDIT VERSION

	LOC	137	;KEEPS MACRO HAPPY
.JBVER:	CUSTVR*1B2+DECVER*1B11+DECMVR*1B17+DECEVR
	RELOC


SUBTTL	CONDITIONAL ASSEMBLY SWITCHES

ND FTOVERLAY,1		;1= OVERLAY MODULE REQUIRED
ND FTENEX,1		;1=TENEX VERSION (WILL NOT RUN ON TOPS10)
ND DEBSW,0		;1=DEBUGGING VERSION
ND .OSJOB,1		;1= OLD STYLE JOBXXX SYMBOLS IN INITIAL TABLE
ND FTCN6,0		;1= PUT .JBCN6 (& JOBCN6) IN INITIAL SYMBOL TABLE
ND .FORLB,0		;-1= FORSE, 0 OR +1= FOROTS
ND .EXSYM,1		;1 =EXTENDED SYMBOLS VERSION
ND .NWBLK,1		;1 =NEW BLOCK TYPES (1000-1777)
ND .ASBLK,1		;1 =ASCIZ TEXT BLOCK
ND FMXFOR,1		;NON-ZERO =FORTRAN-10 / F40 LIBRARY COMPATIBILITY
			;-1 FOR MIXFOR BY DEFAULT, +1 FOR BY SWITCH ONLY
ND FTKIONLY,1		;1= KI10 D.P. INST (DMOVE, DMOVEM)
ND FTMANTIS,0		;1= MANTIS AS FORTRAN DEBUGGER (INSTEAD OF FORDDT)
ND FTVM,0		;1= REQUIRES VIRTUAL MEMORY (6.01 OR LATER)
ND FTSINGLE,1		;1= SINGLE SEGMENT VERSION
ND FTFORK,0		;1= RUN IN SEVERAL FORKS (NOT YET IMPLEMENTED)
ND FTOPTION,1		;1= INCLUDE OSCAN CODE (VERY SLOW)
;DEPENDENT CONDITIONALS

IFN FTVM!FTENEX,<FTSINGLE==1>
IFN FTVM,<FTKIONLY==1>

;ASSEMBLY PARAMETERS

ND LN.PDL,50		;LENGTH OF PUSH-DOWN LIST
ND LN.PPD,^D60		;POLISH PUSHDOWN STACK
ND LN.EPD,^D20		;EMERGENCY PUSH DOWN STACK LENGTH
ND LN.LPP,^D55		;LINES PER PAGE OF DATA
ND LN.CPL,^D72		;CHAR PER LINE ON TTY
ND LN.DRB,6		;LENGTH OF SFD NESTING
ND PPDL,60		;LENGTH OF POLISH PUSHDOWN STACK
ND .L,3			;LENGTH OF BASIC SYMBOL BLOCK
ND PATSP.,100		;LENGTH TO LEAVE IN SYMBOL TABLE FOR PATCHING
ND LN.WD,2000		;SIZE OF CORE WINDOW (IF POSSIBLE)
ND .IPS,^D128		;INTERNAL PAGE SIZE (MAKE ^D512 FOR VM)
ND .IPM,.IPS-1		;MASK FOR ABOVE
ND .DBS,^D128		;DSK BLOCK SIZE (TO DISTINGUISH FROM ABOVE)
ND .DBM,.DBS-1		;MASK
ND .CORX,4*1000		;MINIMUM SIZE TO USE FOR CORE UUO (UNLESS FAILS)
ND .HS%,^D90		;% OF HASH TABLE TO FILL BEFORE REHASHING
ND .LVL,0		;CUTOFF LEVEL FOR ASSEMBLING ERROR MESSAGES
ND .DLVL,0		;CUTOFF FOR SEEING ERROR DURING DEBUGGING
ND .NLVL,0		;CUTOFF FOR SEEING ERROR IN NORMAL NODE
ND .ELVL,40		;CUTOFF FOR ERRORS ON TTY
ND .NSEV,40		;CUTOFF FOR FATAL ERROR IN NORMAL MODE
ND .BSEV,20		;CUTOFF FOR FATAL ERROR IN BATCH MODE
ND .VLVL,1		;DEFAULT VERBOSITY OF ERROR MESSAGES
ND .IBR,5		;NUMBER OF BUFFERS IN INPUT RING (DEFAULT)
ND .EXC,^D9		;SIZE OF BASIC LINKED BLOCKS FOR INCLUDE/EXCLUDE
ND I.PRM,^D251		;INITIAL PRIME NUMBER FOR HASHING
ND E.PRM,^D227		;PRIME NUMBER USED TO HASH LONG ERROR MESSAGES
ND LN.12,20		;NUMBER OF LINKS IN BLOCK TYPE 12
ND %HISEG,400000	;HIGH SEGMENT ORIGIN
IFN FTVM,<
ND LC.ORG,040000	;START OF CODE AREA
ND LS.ORG,400000	;START OF LOCAL SYMBOLS
ND GS.ORG,500000	;START OF GLOBAL SYMBOLS
>
IFN FTENEX,<
ND LC.ORG,040000	;START OF CODE AREA
ND LS.ORG,200000	;START OF LOCAL SYMBOLS
ND GS.ORG,300000	;START OF GLOBAL SYMBOLS
>
IFN FTVM!FTENEX,<
ND .PGSIZ,1000		;KNOWN PAGE SIZE
>
ND .SPA,4000		;DEFAULT SIZE FOR BUFFER ON /SPACE SWITCH
ND .SPL,10		;DEFAULT SPACE IN LINKS OTHER THAN ROOT (FOR ARL ERROR)
ND .OVPSP,0		;DEFAULT PATCH SPACE IN LINKS OTHER THAN ROOT
ND LN.OVL,^D128*^D10*2	;MAX. NO. OF OVERLAYS ALLOWED
SUBTTL	REVISION HISTORY

;START OF VERSION 1A
;46	ADD KLUDGE FEATURE
;47	INTEGRATE WITH SCAN %4
;52	ADD ASCIZ TEXT BLOCK
;54	ADD KIONLY D.P. MACROS
;60	ADD /VERSION SWITCH
;65	TENEX SPEEDUP
;102	ADD FLAG FOR NO END BLOCK
;104	ADD FLAG FOR FAIL LOCAL BLOCKS
;105	ADD SYMBOL (LN.12) FOR LENGTH OF LINKS IN BLOCK TYPE 12
;107	REPLACE KLUDGE BY MIXFOR

;START OF VERSION 1B
;124	ADD FLAGS FOR /ONLY SWITCH

;START OF VERSION 2
;135	ADD OVERLAY FACILITY
;137	ADD SUPPORT FOR PLOT PACKAGE
;143	ADD BIT FOR INCLUDE MODE SEARCH
;145	IMPLEMENT /USERLIB & /NOUSERLIB
;147	TURN ON MIXFOR FEATURE
;161	ADD LANGUAGE SPECIFICATION TO /USERLIB
;167	CHANGE ARGUMENTS TO /OTSEG SWITCH
;170	INTEGRATE PLOT STUFF WITH BLISS CODE
;175	CHANGE /RESET TO /NODE
;206	ADD FLAGS FOR CHAINED FIXUP IF NOT ALL IN CORE
;221	GET PROTECTION OF XPN FILE RIGHT
SUBTTL	STANDARD MNEMONICS--REGISTERS, BITS, UUOS

;AC NAMES
;MUST NOT BE REDEFINED, ALL LOCAL ACCS MUST BE DEFINED IN TERMS OF THESE

FL=0		;FLAGS (LH=PERMANENT, RH=TEMPORARY)
T1=1		;VERY TEMPORARIES
T2=2
T3=3
T4=4

P1=5		;PRESERVED TEMPORARIES
P2=6
P3=7
P4=10

W1=11		;MORE PERMANENT
W2=12
W3=13

R1=14		;EVEN MORE PERMANENT
R2=15
R3=16
R==R1		;ALTERNATIVE NAME

P=17		;PUSH-DOWN POINTER

;I/O CHANNELS

;DEFINE I/O CHANNEL DATA

DEFINE IODATA <
;;REAL CHANNELS

 XXX	(ZC,0,.IODPR)		;GETSEG AND SCAN/WILD ONLY
 XXX	(DC,1,.IOBIN)		;READ DATA FILE
 XXX	(MC,2,.IOASC)		;MAP CHANNEL (OUTPUT)
 XXX	(RC,3,.IOASC)		;RECORD LOG FILE CHANNEL
 XXX	(OC,4,.IODPR)		;OVERLAY CHANNEL
 XXX	(LC,5,.IODPR)		;LOW SEG CODE OVERFLOW 
 XXX	(HC,6,.IODPR)		;HIGH SEG CODE OVERFLOW
 XXX	(SC,7,.IODPR)		;LOCAL SYMBOL OVERFLOW
 XXX	(GC,10,.IODPR)		;GLOBAL SYMBOL OVERFLOW
 XXX	(FC,11,.IODPR)		;FIXUP OVERFLOW
 XXX	(TC,12,.IODPR)		;TEMP CHAN (USED TO REPROCESS FIXUPS ETC)

;;PSEUDO-CHANNELS, USED TO HOLD LOOKUP/ENTER INFO

 XXXX	(%RC,RC,.IOASC)		;LOG FILE
 XXXX	(%SC,MC,.IODPR)		;SYMBOL FILE
 XXXX	(%VC,DC,.IODPR)		;SAVE/SSAVE FILE
 XXXX	(%XC,LC,.IODPR)		;XPN FILE
 XXXX	(%OC,OC,.IODPR)		;OVERLAY FILE
 XXXX	(%PC,0,-1)		;PLOT CHANNEL (WILL BE 17 AT RUN TIME)
>

DEFINE XXX (A,B,C)<
 A==:B
 %%==:B+1
>
DEFINE XXXX (A,B,C)<
 A==:%%
 %%==%%+1
>

IODATA
PURGE	XXX,XXXX,%%

OPDEF	HALT	[HALT]	;PUT IN CREF LISTING
OPDEF	ERRUUO	[1B8]	;ERROR UUO
;PERMANENT FLAGS (LH)

L.HSO==400		;LOAD HIGH SEGMENT ONLY
L.LSO==200		;LOAD LOW SEGMENT ONLY
L.FNS==100		;FORCED LOAD TO NORMAL SEGMENTS (DEFAULT)
L.FHS==40		;FORCED LOAD TO HIGH SEGMENT
L.FLS==20		;FORCED LOAD TO LOW SEGMENT
L.SPD==10		;DO SOMETHING SPECIAL FOR DEBUGGER
L.ISA==4		;IGNORE STARTING ADDRESS BLOCKS
L.SYM==2		;LOAD LOCAL SYMBOLS
L.LIB==1		;IN LIBRARY SEARCH MODE

;TEMPORARY FLAGS (RH)

R.TWSG==(1B0)		;TWOSEGMENT PROGRAM
R.LOD==(1B1)		;LOADING IN PROGRESS (BETWEEN TYPE 6 & TYPE 5)
R.INC==(1B2)		;IN SPECIAL /INC MODE (DON'T LOAD IF NOT INCLUDED)

R.HSO==L.HSO		;LOAD HIGH SEGMENT ONLY
R.LSO==L.LSO		;LOAD LOW SEGMENT ONLY
R.FNS==L.FNS		;FORCED LOAD TO NORMAL SEGMENTS (DEFAULT)
R.FHS==L.FHS		;FORCED LOAD TO HIGH SEGMENT
R.FLS==L.FLS		;FORCED LOAD TO LOW SEGMENT
R.SPD==L.SPD		;DO SOMETHING SPECIAL FOR DEBUGGER
R.ISA==L.ISA		;IGNORE STARTING ADDRESS BLOCKS
R.SYM==L.SYM		;LOAD LOCAL SYMBOLS
R.LIB==L.LIB		;LIBRARY SEARCH MODE

;PRIMARY SYMBOL BITS

PT.SGN==400000		;SIGN BIT (MUST BE SET)
PT.EXT==200000		;EXTENDED TRIPLET REQUIRED
PT.SYM==100000		;SYMBOL TYPE
PT.TTL==040000		;SPECIAL TITLE BLOCK (DDT)
PT.RLC==020000		;RELOCATION COUNTER TYPE
PT.OTH==010000		;OTHER TYPE (RANDOM BLOCKS)

;FLAG BITS IN PRIMARY SYMBOL TRIPLET
PS.GLB==004000		;GLOBAL SYMBOL
PS.ENT==002000		;ENTRY POINT
PS.COM==001000		;COMMON
PS.REQ==000400		;GLOBAL REQUEST
PS.UDL==000200		;UNDEFINED VALUE (LH)
PS.UDR==000100		;UNDEFINED VALUE (RH)
PS.UDF==PS.UDL!PS.UDR	;UNDEFINED VALUE (BOTH HALVES)
PS.LCL==000040		;LOCAL SYMBOL
PS.DDT==000020		;HALF-KILLED (TO DDT)
PS.MDF==000004		;MULTIPLY DEFINED
PS.FXP==000002		;REFERENCE IN FIXUP TABLE
PS.REL==000001		;SYMBOL IS RELOCATABLE

;RIGHT HALF SIDE

PS.EXO==400000		;EXTENDED TRIPLET REQUIRED (FUTURE)
PS.BGS==200000		;COPIED FROM A BOUND GLOBAL TABLE
PS.RBG==100000		;RELOCATABLE BOUND GLOBAL
PS.NOE==040000		;NOT AN ENTRY FOR OVERLAYS
PS.NRQ==020000		;NOT A REQUEST (IF UNDEF) FOR OVERLAY

PS.TYP==17		;MASK FOR OUTPUT TYPE
PS.UND==0		;UNDEFINED
PS.LOG==1		;LOGICAL
PS.SPI==2		;S.P. INTEGER
PS.SPR==4		;S.P. REAL
PS.OCT==6		;OCTAL
PS.LBL==7		;LABEL
PS.DPR==10		;D.P. REAL
PS.DPI==11		;D.P. INTEGER
PS.DO==12		;D.P. OCTAL
PS.CMP==14		;COMPLEX
PS.AS==17		;ASCII STRING

;BITS IN "OTHER" BLOCKS

PO.IND==004000		;BLOCK IS POINTER TO WHERE REAL BLOCK MOVED TO

;FLAG BITS IN PRIMARY TITLE BLOCK

PT.FAK==002000		;TITLE DEFINED BY LINK-10 NOT USER
PT.BLK==001000		;FAIL LOCAL BLOCK
;SECONDARY TRIPLET BITS

S.SGN==(1B0)		;SIGN BIT (MUST BE OFF)
S.SYM==(1B1)		;SYMBOL TYPE
S.TTL==(1B2)		;TITLE BLOCK
S.RLC==(1B3)		;RELOCATION CTRS
S.LST==(1B4)		;LAST SECONDARY TRIPLET

;SECONDARY SYMBOL BITS
S.NAM==(1B6)		;LONG NAME
S.COM==(1B7)		;COMMON (SIZE OF IT)
S.FXP==(1B8)		;POINTER TO FIXUP CHAIN
S.PVS==(1B9)		;PARTIAL VALUE ONLY (SYMBOL FIXUP NEEDED)
S.RBG==(1B10)		;BOUND GLOBAL DEFINED IN RELOCATABLE LINK


;SECONDARY TITLE BITS
S.PRC==(1B6)		;PROCESSOR USED TO COMPILE PROGRAM
S.CRE==(1B7)		;CREATION DATE AND TIME
S.VER==(1B10)		;VERSION
S.DEV==(1B11)		;DEVICE AND UFD
S.NAM==(1B12)		;FILE NAME AND EXT
S.SFD==(1B13)		;SFD
S.SEG==(1B14)		;RELOCATION CTRS FOR LOW/HIGH


;CORRESPONDING BITS IN OLD RADIX-50 SYMBOLS

R5.DDT==400000		;HALF-KILLED TO DDT
R5.REQ==200000		;GLOBAL REQUEST
R5.LCL==100000		;LOCAL SYMBOL
R5.GLB==040000		;GLOBAL SYMBOL

;AND BITS IN ADDITIVE GLOBAL REQUESTS
R5.FXA==(1B0)		;ADDITIVE GLOBAL FIXUP
R5.FXL==(1B1)		;LEFT HALF FIXUP
R5.FXS==(1B2)		;SYMBOL TABLE FIXUP
R5.FXC==(1B3)		;RIGHT HALF CHAINED FIXUP

;FLAGS IN FIXUP BLOCK FIRST WORD (LEFT HALF)

FP.SGN==(1B0)		;SIGN BIT (MUST BE ON FOR PRIMARY)
FP.SYM==(1B1)		;SYMBOL BLOCK FIXUP (ADDITIVE GLOBAL)
FP.PTR==(1B2)		;RIGHT HALF IS POINTER TO CHAIN OF FIXUPS
FP.POL==(1B3)		;POLISH FIXUP BLOCK
FP.LBT==(1B4)		;LOADER BLOCK TYPE (USUALLY 1)
FP.F4==(1B5)		;OLD FORTRAN TABLES
FP.PRU==(1B6)		;PAGE FAULT RIGHT-HALF FIXUP UNDEFINED
FP.TTL==(1B7)		;STUFF FOR TITLE BLOCKS (SEG  POINTERS)

;OTHER FIXUP FLAGS FOR SYMBOL TRIPLETS ONLY

FS.FXR==(1B10)		;RIGHT HALF FIXUP (R5.FXR)
FS.FXL==(1B11)		;LEFT HALF FIXUP (R5.FXL)
FS.FXF==(1B12)		;FULL WORD FIXUP
FS.FXS==(1B13)		;SYMBOL TABLE FIXUP (R5.FXS)
FS.FXC==(1B14)		;RIGHT HALF CHAINED FIXUP (R5.FXC)

FS.REL==PS.REL		;DEFINING SYMBOL WAS RELOCATABLE


;FIXUP TYPES

;CORE FIXUPS
DEFINE CFIXUPS<
X CR
X CL
X CF
X AR
X AL
X AF
X RR
X RL
X RF
>

;SYMBOL TABLE FIXUPS
DEFINE SFIXUPS<
X AR
X AL
X AF
X TL
X SG
>

;DEFINE CORE FIXUP OFFSETS
DEFINE X (A)<
 CPF.'A==%%
 %%==%%+1
>
%%==0
CFIXUPS

;DEFINE SYMBOL TABLE FIXUPS
DEFINE X (A)<
 SPF.'A==%%
 %%==%%+1
>
%%==0
SFIXUPS
;COMPILER TYPES

DEFINE PROCESSORS<
X UNKNOWN,UNK
X F40,F40
X COBOL,CBL
X ALGOL,ALG
X NELIAC,NLI
X PLI,PLI
X BLISS,BLI
X SAIL,SAI
X FORTRAN,FOR
X MACRO,MAC
X FAIL,FAI
X BCPL,BCP
X MIDAS,MID
>
;***NOTE***	ADD NEW ITEMS IN KEYWORDS MACRO ALSO

CT.LEN==0
CT.BIT==1B0

DEFINE X (A,B)<
 CT.'B==CT.LEN
 CT.LEN==CT.LEN+1
 B'BIT==CT.BIT
 CT.BIT==CT.BIT_-1
>

PROCESSORS

IFE CT.BIT,<PRINTX TOO MANY PROCESSORS>
PURGE X,CT.BIT

CT.ANY=-CT.UNK
;CPUS

DEFINE CPUS<
X UNKNOWN,UNK
X KA10,KA
X KI10,KI
>

CP.LEN==0
CP.BIT==1B0

DEFINE X (A,B)<
 CP.'B==CP.LEN
 CP.LEN==CP.LEN+1
 B'BIT==CP.BIT
 CP.BIT==CP.BIT_-1
>

CPUS

IFE CP.BIT,<PRINTX TOO MANY CPUS>
PURGE X,CP.BIT
;RELOCATION TABLE POINTERS
RC.SG==0	;SEGMENT NUMBER
RC.NM==1	;NAME
RC.IV==2	;INITIAL VALUE
RC.CV==3	;CURRENT VALUE
RC.OF==4	;OFFSET IN SEGMENT RELATIVE TO 0 OR 400000
RC.HL==5	;HIGHEST LOC LOADED
RC.LB==6	;POINTER TO TAB.LB(SEG)
RC.WD==7	;POINTER TO LW.S0(SEG)
RC.PG==^D8	;POINTER TO UW.S0(SEG)

RC.INC==^D9	;SIZE OF EACH BLOCK



;STANDARD ENTRY POINTS FOR EXECUTE ONLY HIGH SEGS

IFE FTSINGLE,<
%%UUO==0		;UUO ENTRY
%%RET==1		;CPOPJ
%%ST==2		;SEGMENT START
>

SUBTTL	PROTOTYPE SCAN BLOCK

F.NXT==:0			;POINTER TO NEXT FILE AREA
F.SWP==:F.NXT+1			;POINTER TO SWITCH BLOCKS
F.ZER==:F.NXT+2			;START OF AREA FOR SPEC STORAGE
F.DEV==:F.ZER+.FXDEV		;DEVICE
F.NAME==:F.ZER+.FXNAM		;NAME
F.NAMM==:F.ZER+.FXNMM		;NAME MASK
F.EXT==:F.ZER+.FXEXT		;EXT,,MASK
F.MOD==:F.ZER+.FXMOD		;MODIFIER WORD
F.PROT==:F.MOD			;OUTPUT PROTECTION
F.MODM==:F.ZER+.FXMOM		;MODIFIER MASK
F.DIR==:F.ZER+.FXDIR		;DIRECTORY
F.DIRM==:F.ZER+.FXDIM		;DIRECTORY MASK
F.BFR==:F.ZER+.FXBFR		;/BEFORE
F.SNC==:F.ZER+.FXSNC		;/SINCE
F.ABF==:F.ZER+.FXABF		;/ABEFORE
F.ASN==:F.ZER+.FXASN		;/ASINCE
F.FLI==:F.ZER+.FXFLI		;FILE MIN SIZE (WORDS)
F.FLM==:F.ZER+.FXFLM		;FILE MAX SIZE (WORDS)
F.EST==:F.ZER+.FXEST		;/ESTIMATE
F.VER==:F.ZER+.FXVER		;/VERSION

F.LEN==:F.ZER+.FXLEN		;LENGTH REQUIRED FOR FILE SPECS

SUBTTL	PROTOTYPE DATA BLOCK

I.ZER==:0		;BASE
I.MOD==:I.ZER		;MODE OF OPEN
I.DEV==:I.MOD+1		;DEVICE
I.BUF==:I.MOD+2		;BUFFER HEADERS
I.DVZ==:I.MOD+3		;DEVSIZ WORD
I.RNG==:I.MOD+4		;POINTER TO RING BUFFERS
I.SCN==:I.MOD+5		;POINTER TO SPECIAL SCAN MOD WORD
I.CHN==:I.MOD+6		;CHAN NUMBER IN AC FIELD (TO FORM I/O INSTS)
I.SWT==:I.MOD+7		;SWITCHES STILL TO DO
			;AFTER OPEN (LH) ,, AFTER CLOSE (RH)
LN.OPN==I.SWT-I.MOD+1	;LENGTH OF "OPEN" BLOCK

I.RIB==:I.ZER+LN.OPN	;START OF LOOKUP/ENTER BLOCK
I.PPN==:I.RIB+.RBPPN	;DIRECTORY NAME OR POINTER
I.NAM==:I.RIB+.RBNAM	;FILENAME
I.EXT==:I.RIB+.RBEXT	;EXTENSION
I.PRV==:I.RIB+.RBPRV	;PRIVS, MODE, TIME DATE
I.SIZ==:I.RIB+.RBSIZ	;SIZE (OLD STYLE LOOKUP PPN)
I.VER==:I.RIB+.RBVER	;VERSION
I.EST==:I.RIB+.RBEST	;ESTIMATED LENGTH
I.ALC==:I.RIB+.RBALC	;ALLOCATED LENGTH
I.LDV==:I.RIB+.RBDEV	;LOGICAL UNIT NAME

LN.RIB==:I.LDV-I.RIB+1	;LENGTH OF ENTER BLOCK


;INDEX FOR FULL PATH
I.ARG==:0
I.SSW==:1
I.SFD==:2
I.END==:I.SFD+LN.DRB
LN.SFD==:I.END-I.ARG+1	;LENGTH OF SFD BLOCK
LN.IO==:LN.OPN+LN.RIB+LN.SFD	;TOTAL LENGTH REQUIRED

SUBTTL	MACROS


DEFINE VERSION<
	LOC	137
.JBVER:	CUSTVR*1B2+DECVER*1B11+DECMVR*1B17+DECEVR
	RELOC
>

DEFINE SEGMENT<
 IFE %HISEG-400000,<	TWOSEG>
 IFN %HISEG-400000,<	TWOSEG	%HISEG>
	RELOC %HISEG
>


DEFINE	U (SYMBOL,LENGTH)<
 SYMBOL=.ZZ
 IFB <LENGTH>,<.ZZ==.ZZ+1>
 IFNB <LENGTH>,<.ZZ==.ZZ+LENGTH>
 IFG .ZZ-.TEMP-.TLEN,<PRINTX Too much TEMP space used>
>

;TO CLEAR TEMP SPACE IN EACH MODULE
DEFINE ZAPTMP <
	MOVE	T1,[.TEMP,,.TEMP+1]
	SETZM	.TEMP
	BLT	T1,.TEMP+.TLEN-1
>
;DEFINE AREAS FOR LOADING INTO

DEFINE AREAS <
	XXX	(DY)	;DYNAMIC DATA
	XXX	(LC)	;LOW SEG CODE
	XXX	(HC)	;HIGH SEG CODE
	XXX	(RT)	;RELOCATION TABLE
	XXX	(LS)	;LOCAL SYMBOLS
	XXX	(FX)	;FIXUPS
	XXX	(BG)	;BOUND GLOBALS
	XXX	(GS)	;GLOBAL SYMBOLS
>

;MACRO TO MULTIPLEX OUTPUT TO LOG AND TTY
DEFINE	OUTVIA (SUBROUTINE)<
	PUSHJ	P,TTYCHK
	 PUSHJ	P,SUBROUTINE
>

;MACRO TO CLEAR ^O
DEFINE CLEARO<
	SKPINC
	  JFCL
>

;MACRO TO XLIST ERROR TEXT
DEFINE .ASCIZ (TEXT)<
	XLIST
 ASCIZ	\TEXT\
	LIST
>

DEFINE SPUSH (AC) <
 IRP AC,<
	PUSH	P,AC
>>

DEFINE SPOP (AC) <
 IRP AC,<
	POP	P,AC
>>


;MACRO TO ENTER DDT IF LOADED AND DEBUG CONDITION IS TRUE
DEFINE .JDDT (MODULE,LABEL,INST)<
 IFE DEBSW,<>
 IFN DEBSW,<
  IRP INST,<
	INST
  >
	PUSHJ	P,ENTDDT
	  .JDDTX (MODULE,LABEL,\<.-LABEL>)
	OPDEF	CONTINUE [JRSTF	@.JBOPC]
>>

DEFINE	.JDDTX	(MODULE,LABEL,INCREMENT)<
 JFCL	[ASCIZ	\MODULE:	LABEL + INCREMENT\]
>

IFN FTVM!FTENEX,<
 OPDEF	IOR.	[IORI]		;IMMEDIATE MODE
>
IFE FTVM!FTENEX,<
 OPDEF	IOR.	[IOR]		;FROM MEMORY
>

;MACRO TO STORE INTO USER CODE
IFE FTOVERLAY,<
	OPDEF	CSTORE	[MOVEM	W1,(P3)]
>
IFN FTOVERLAY,<
	DEFINE CSTORE,<
	XWD	CS.LHS##,CS.RHS##
>>

;MACRO TO GENERATE USER LIBRARIES BY DEFAULT
;CALL IS
;MAKLIB	LANGUAGE,DEVICE,FILE,EXP,PRJ,PRG,<SFD LIST>
;TO GENERATE THEM PUT ABOVE DEFINITIONS INTO USELIB MACRO
DEFINE USELIB <
>
;DOUBLE AND TRIPLE WORD MOVES
DEFINE TMOVE (AC,M)<
 IFL <Z M>-<@>,<
	MOVE	AC,M
	DMOVE	AC+1,1+M
 >
 IFGE <Z M>-<@>,<
	MOVEI	AC+2,M
	DMOVE	AC,(AC+2)
	MOVE	AC+2,2(AC+2)
>>

DEFINE TMOVEM (AC,M)<
	MOVEM	AC,M
	DMOVEM	AC+1,1+M
>

IFE FTKIONLY,<
 DEFINE DMOVE (AC,M)<
  IFL <Z M>-<@>,<
	MOVE	AC,M
	MOVE	AC+1,1+M
  >
  IFGE <Z M>-<@>,<
	MOVEI	AC+1,M
	MOVE	AC,(AC+1)
	MOVE	AC+1,1(AC+1)
 >>

 DEFINE DMOVEM (AC,M)<
	MOVEM	AC,M
	MOVEM	AC+1,1+M
 >
>;END IFE FTKIONLY

DEFINE SMOVE (AC,M)<
 IFE M,<
	TDZA	AC,AC
 >
 IFN M,<
	SKIPA	AC,[M]
>>
;THESE MACROS TO MOVE WORD PHYSICALLY (BUT NOT LOGICALLY) ADJACENT
;USED INCASE DATA BASE CHANGES

DEFINE DGET (AC,M1,M2)<
 IFE <M1>-<M2>+1,<
	DMOVE	AC,M1
 >
 IFN <M1>-<M2>+1,<
	MOVE	AC,M1
	MOVE	AC+1,M2
>>

DEFINE DSTORE (AC,M1,M2)<
 IFE <M1>-<M2>+1,<
	DMOVEM	AC,M1
 >
 IFN <M1>-<M2>+1,<
	MOVEM	AC,M1
	MOVEM	AC+1,M2
>>

DEFINE TGET (AC,M1,M2,M3)<
 IFE <M1>-<M2>+1,<
	DMOVE	AC,M1
	MOVE	AC+2,M3
 >
 IFN <M1>-<M2>+1,<
	MOVE	AC,M1
	DGET	AC+1,M2
>>

DEFINE TSTORE (AC,M1,M2,M3)<
 IFE <M1>-<M2>+1,<
	DMOVEM	AC,M1
	MOVEM	AC+2,M3
 >
 IFN <M1>-<M2>+1,<
	MOVEM	AC,M1
	DSTORE	AC+1,M2
>>
;BLOCK TYPE DISPATCH MACRO

DEFINE LITYPE(F,L)<
 IF1,<BLOCK <L-F+1>/2>	;ALLOCATE ENOUGH SPACE
 IF2,<
  ZZ.=F
  ZZH.=<L-F+1>/2
  REPEAT ZZH.,<
   PTYPE \ZZH.,\ZZ.
   ZZ.=ZZ.+1
   ZZH.=ZZH.+1
 >>
 DEFINE PTYPE (X,Y)<
  IFDEF T.'X,<
   IFDEF T.'Y,<
    T.'X,,T.'Y
   >
   IFNDEF T.'Y,<
    T.'X,,T.ERR
  >>
  IFNDEF T.'X,<
   IFDEF T.'Y,<
    T.ERR,,T.'Y
   >
   IFNDEF T.'Y,<
    T.ERR,,T.ERR
>>>>

SUBTTL	ERROR/LOG MACROS

;.ERR. MACRO GENERATES USUAL CALLS TO ERROR/LOG MODULE
;GENERAL FORM IS .ERR.	(TYP,FLG,VER,LVL,SEV,CODE,TXT)
;TYP	IS OFFSET TO LOG/ERROR ENTRY
;FLG	IS SOME FLAGS FOR SPECIAL CASES, SUCH AS
;		.EP	CODE IS POINTER TO ERROR WORD
;		.EC	ERROR OUTPUT IS CONTINUED
;		.EE	ERROR MAY BE EDITED AND JOB CONTINUE

;VER	IS VERBOSITY LEVEL (NOT USED YET)
;LVL	IS ASSIGNED TYPE-OUT LEVEL
;SEV	IS ASSIGNED SEVERITY LEVEL
;CODE	IS ASSIGNED MESSAGE NMEMONIC
;TXT	IS TEXT OF MESSAGE

DEFINE	.ERR.	(TYP,FLG,VER,LVL,SEV,CODE,TXT)<
 SALL
 IFL L%MAX-LVL,<LVL=L%MAX>
 %LVL==LVL-.LVL
 IFGE %LVL,<
  IFL V%MAX-VER,<VER=V%MAX>
  IFL S%MAX-SEV,<SEV=S%MAX>
  IF2,<
   IFNB <CODE>,<
    IFNDEF .ER'CODE,<EXTERN .ER'CODE>
  >>
  IFNB <TYP>,<
   ERRUUO	ER%'TYP
  >
  IFNB <CODE>,<
   IFNB <TXT>,<
   EXP <FLG>+<VER>B<B%VER>+<SEV>B<B%SEV>+<LVL>B<B%LVL>+<[.ER'CODE::ASCIZ \CODE \
								   ASCIZ \TXT\]>>
   IFB <TXT>,<
   EXP <FLG>+<VER>B<B%VER>+<SEV>B<B%SEV>+<LVL>B<B%LVL>+<.ER'CODE>>
  >
  IFB <CODE>,<
   EXP <FLG>+<VER>B<B%VER>+<SEV>B<B%SEV>+<LVL>B<B%LVL>+<[ ASCIZ \TXT\]>>
  >
 XALL
>

;CONTINUED ERROR WORDS HAVE SIMILAR FORM
;DIFFERENCES ARE
;TYP	IS STORED IN LVL FIELD
;VER	IS USUALLY BLANK
;LVL	IS USUALLY BLANK
;SEV	IS USUALLY BLANK
;CODE	IS LOCATION OF ERROR POINTER
;

DEFINE	.ETC.	(TYP,FLG,VER,LVL,SEV,CODE,TXT)<
 SALL
 IFGE %LVL,<
  IFNB <CODE>,<
   EXP <FLG>+<ET%'TYP>B<B%LVL>+<CODE>
  >
  IFB <CODE>,<
   IFNB <TXT>,<
    EXP <FLG>+<ET%'TYP>B<B%LVL>+<[ ASCIZ \TXT\]>
   >
   IFB <TXT>,<
    EXP <FLG>+<ET%'TYP>B<B%LVL>
  >>
 >
 XALL
>



;DEFINE ALL MAIN ERROR TYPES

DEFINE ERRTYPE <
 XXX	(MS);;		ASCII MESSAGE
 XXX	(LRE);;		LOOKUP/RENAME/ENTER ERROR
 XXX	(I);;		INIT/OPEN ERROR
 XXX	(ST);;		STATUS ERROR
>

DEFINE XXX (TYPE) <
 ER%'TYPE==:ZZ
 ZZ==ZZ+1
>
ZZ==0
ERRTYPE

;DEFINE ALL CONTINUATION ERROR TYPES

DEFINE ETCTYPE <
 XXX	(STR);;		ASCIZ STRING
 XXX	(SBX);;		SIXBIT WORD
 XXX	(OCT);;		OCTAL WORD
 XXX	(DEC);;		DECIMAL WORD
 XXX	(FSP);;		FILE SPEC
 XXX	(ASC);;		ASCII CHARACTER
 XXX	(COR);;		CORE SIZE (K OR P)
 XXX	(JMP);;		GOTO ADDRESS
>
DEFINE XXX (TYPE)<
 ET%'TYPE==:ZZ
 ZZ==ZZ+1
>
ZZ==0
ETCTYPE
PURGE XXX,ZZ
;DEFINE SPECIAL VALUES USED IN .ERR. AND .ETC. MACROS

;BIT POSITIONS
B%VER==:^D5		;VERBOSITY FIELD
B%SEV==:^D11		;SEVERITY FIELD
B%LVL==:^D17		;LEVEL FIELD

;VERBOSITY
V%S==:1			;SHORT (CODE ONLY)
V%M==:2			;MEDIUM (ONE LINE)
V%L==:3			;LONG (MUCH MORE)


;SEVERITY
S%I==:1			;INFORMATION ONLY
S%W==:^D8		;WARNING (NOT FATAL)
S%B==:^D16		;FATAL IN BATCH MODE
S%E==:^D24		;FATAL UNLESS EDITED
S%F==:37		;ALWAYS FATAL

;LOG LEVEL CUTOFF
L%I==:1			;INFORMATION ONLY
L%W==:^D8		;WARNING (NOT FATAL)
L%F==:37		;ALWAYS VISIBLE

;MAXIMUM VALUES
V%MAX==:3
L%MAX==:37
S%MAX==:37

DEFINE LEVELS (ITEM,LEVEL)<
 IRPC LEVEL,<
  ITEM'%I'LEVEL==:ITEM'%I+LEVEL
>>

LEVELS S,<1234567>
LEVELS L,<1234567>

;FLAGS 
.EP==1B0		;WORD IS A POINTER
.EC==1B1		;WORD IS CONTINUED
.EE==1B2		;ERROR CAN BE EDITED

%ENT==1B0		;ENTER ERROR
%LKP==1B1		;LOOKUP ERROR
%REN==1B2		;RENAME ERROR
SUBTTL	SWITCH MACROS

;SWTCHS MACRO CONTAINS ALL KNOW SWITCHES
;IT IS EXPANDED IN VARIOUS PLACES  (LNKSCN, LNKWLD)
;FORM IS SWMAC A,B,C,D,E,F,G,H,I
;WHERE
;SWMAC IS A MACRO REDINED ON EACH CALL TO SWTCHS
;A	IS A MACRO KNOWN TO SCNMAC (SL, SP, OR SS)
;B	IS THE SWITCH NAME IN SIXBIT
;C	IS STORAGE (NULL UNLESS MULTIPLE WORD) GENERATES A TOKEN#
;D	IS PROCESSOR REQUIRED (SP)
;	OR KEY WORD LIST (SL)
;	OR VALUE (SS)
;E	IS ABBREVIATION FOR DEFAULT VALUES (SP)
;	OR DEFAULT KEY VALUE (SL)
;	OR NULL (SS)
;F	IS SIZE OF BLOCK REQUIRED TO STORE SWITCH (SINGLE OCCURANCE)
;G	IS "." IF SWITCH ACTION IS DIFFERENT IF SEEN BEFORE FILE NAME
;	THAN IF SEEN AFTER FILE NAME, NULL IF NOT
;H	IS "*" IF SWITCH WILL ALWAYS BE UNIQUE TO ONE CHARACTER
;I	IS DISPATCH IF SWITCH HAS TWO VALUES
;	I.E. /SWITCH:SYMBOL:VALUE

;THE SWITCHES NEED NOT BE IN ALPHABETICAL ORDER
;TO ADD A NEW ONE  JUST PUT IN TABLE
;AND DEFINE ALL SYMBOLS REQUIRED BY SWTCHS EXPANSION

DEFINE SWTCHS<
SWMAC	SP,BACKSPACE,,.SWDEC,MTP,3,.
SWMAC	SP,COMMON,,.SWSYM,SYM,4,.,,.DECNW
SWMAC	SL,CONTENT,,CONK,1,3
SWMAC	SP,CORE,2,.SWDPK,COR,4
SWMAC	SS,COUNTER,,0,,3,.
SWMAC	SL,CPU,,CPUK,1,3
SWMAC	SL,DDEBUG,,DEBK,1,3
SWMAC	SL,DEBUG,,DEBK,1,3,.,*
SWMAC	SL,DEFAULT,,DEFK,1,3,.
SWMAC	SP,DEFINE,,.SWSYM,SYM,4,,,.DECNW
SWMAC	SS,ENTRY,,0,,3,.
SWMAC	SP,ERRORLEVEL,,.SWDEC,ERR,3
SWMAC	SP,ESTIMATE,,.SWDEC,EST,3
SWMAC	SP,EXCLUDE,,.SWSYM,SYM,3,.
SWMAC	SS,EXECUTE,,0,,3,,*
SWMAC	SS,FOROTS,,0,,3
SWMAC	SS,FORSE,,0,,3
SWMAC	SP,FRECOR,,.SWDEC,FRC,3
SWMAC	SS,GO,,0,,3,,*
SWMAC	SP,HASHSIZE,,.SWDEC,HAS,3
SWMAC	SP,INCLUDE,,.SWSYM,SYM,3,.
SWMAC	SP,LINK,,.SWSIX,SYM,3
SWMAC	SS,LOCALS,,0,,3,.,*
SWMAC	SS,LOG,,0,,3
SWMAC	SP,LOGLEVEL,,.SWDEC,LOG,3
SWMAC	SL,MAP,,MAPK,1,3,,*
SWMAC	SP,MAXCOR,2,.SWDPK,COR,4
SWMAC	SL,MPSORT,,MPSK,1,3
SWMAC	SL,MTAPE,,MTPK,1,3,.
SWMAC	SL,NEWPAGE,,HYLK,1,3,.
SWMAC	SP,NODE,,.SWSXD,SYM,3
SWMAC	SP,NOENTRY,,.SWSYM,SYM,3,.
SWMAC	SS,NOINITIAL,,0,,3
SWMAC	SS,NOLOCAL,,0,,3,.,*
SWMAC	SP,NOREQUESTS,,.SWSIX,SYM,3,.
SWMAC	SS,NOSEARCH,,0,,3,.
SWMAC	SS,NOSTART,,0,,3,.
SWMAC	SS,NOSYMBOL,,0,,3
SWMAC	SL,NOSYSLIBRARY,,LIBK,1,3
SWMAC	SL,NOUSERLIBRARY,,LIBK,1,3
SWMAC	SL,ONLY,,ONLK,1,3
SWMAC	SL,OTSEGMENT,,OTSK,1,3
SWMAC	SL,OVERLAY,,OVLK,1,3,.
SWMAC	SP,PATCHSIZE,,.SWDEC,PAT,3
SWMAC	SL,PLOT,,PLTK,1,4,,,.DECNW
SWMAC	SS,REQUEST,,0,,3,.
SWMAC	SP,REQUIRE,,.SWSYM,SYM,3
SWMAC	SP,RESET,,.SWSXD,SYM,3
SWMAC	SS,REWIND,,0,,3,.
SWMAC	SP,RUNCOR,2,.SWDPK,COR,4
SWMAC	SP,RUNAME,,.SWSIX,SYM,3
SWMAC	SP,SAVE,2,.SWDPK,SAV,4
SWMAC	SS,SEARCH,,0,,3,.,*
SWMAC	SL,SEGMENT,,SEGK,1,3,.
SWMAC	SP,SEVERITY,,.SWOCT,SEV,3
SWMAC	SP,SET,,.SWSYM,SYM,4,.,,.SYOSW
SWMAC	SP,SKIP,,.SWDEC,MTP,3,.
SWMAC	SP,SPACE,,.SWDEC,SPA,3
SWMAC	SP,SSAVE,2,.SWDPK,SAV,4
SWMAC	SP,START,,.SWSYO,STA,3,.
SWMAC	SL,SYMBOL,,SYMK,1,3
SWMAC	SL,SYMSEG,,SEGK,2,3
SWMAC	SL,SYSLIBRARY,,LIBK,1,3,.
SWMAC	SL,SYSORT,,SYSK,1,3
SWMAC	SL,TEST,,DEBK,1,3,.
SWMAC	SS,UNDEFINED,,0,,3,.,*
SWMAC	SS,UNLOAD,,0,,3
SWMAC	SL,USERLIBRARY,,LIBK,1,3
SWMAC	SP,VALUE,,.SWSYM,SYM,3,.
SWMAC	SL,VERBOSITY,,VERK,2,3
SWMAC	SP,VERSION,,.SWVER,SYM,3
SWMAC	SS,XPN,,0,,3
SWMAC	SS,ZERO,,0,,3
IFN FMXFOR,<
SWMAC	SS,MIXFOR,,0,,3
SWMAC	SS,NOMIXFOR,,0,,3
 >
>


COMMENT	\SWITCHES HANDLED DIRECTLY BY SCAN
ABEFORE
ASINCE
BEFORE
DENSITY
ERNONE
ERPROTECTION
ERSUPERSEDE
ESTIMATE
*HELP
LENGTH
MESSAGE
NOOPTION
NOPHYSICAL
NOSTRS
OKNONE
OKPROTECTION
OKSUPERSEDE
OPTION
PARITY
PHYSICAL
PROTECTION
RUN
RUNCORE
RUNOFFSET
SINCE
STRS
VERSION
\



SUBTTL	DEFAULT VALUES
;.C==^D256*2000-1		;ALL OF CORE
.C==^D128*2000-1		;SCAN CANNOT HANDLE BIT 18 ON
.NULARG==,,-1			;SCAN BARFS ON 0
;*** NOTE **** SCAN CANNOT HANDLE MAXIMUM SIZE GREATER THAN 377777


DEFINE	DEFVALUES<
DM	COR,.C,0,0
DM	ERR,L%MAX-1,0,L%W-1
DM	EST,<<.C+1>_-8>,0,0
DM	HAS,^D13001,^D101,^D101
DM	LOG,L%MAX-1,0,0
DM	MTP,.C,1,1
DM	PAT,.C,PATSP.,PATSP.
DM	SAV,.C,0,.NULARG
DM	SEV,S%MAX-1,0,S%W
DM	SPA,.C,.SPA,.SPA
DM	STA,.C,0,.C
DM	SYM,.C,0,0
DM	VER,V%MAX,0,0
DM	FRC,.C,4000,4000
DM	SPC,.C,.SPA,.SPA

>
SUBTTL	KEY WORDS

;NOTE - CON ARGS ARE PAIRS AS <FLAG,NOFLAG>
;	  EXCEPT FOR <DEFAULT> , ORDER MUST BE <DEFAULT,ALL,NONE>
;NOTE - DEBUG ARGS ARE REALLY PAIRS AS <COMPILER,DEBUG AID>

DEFINE KEYWORDS<
KEYMAC	CON,<DEFAULT,ALL,NONE,GLOBAL,NOGLOBAL,LOCALS,NOLOCAL,ENTRY,NOENTRY,UNDEFINED,NOUNDEFINED,RELOCATABLE,NORELOCATABLE,ABSOLUTE,NOABSOLUTE,COMMON,NOCOMMON,ZERO,NOZERO>
KEYMAC	CPU,<KA10,KI10>
IFE FTMANTIS,<
KEYMAC	DEB,<,MACRO,DDT,*FORTRAN,FORDDT,*COBOL,COBDDT,SAIL,SDDT,FAIL,SDDT>
>
IFN FTMANTIS,<
KEYMAC	DEB,<MACRO,DDT,FORTRAN,MANTIS,*COBOL,COBDDT>
>
KEYMAC	DEF,<INPUT,OUTPUT>
KEYMAC	HYL,<LOW,HIGH>
KEYMAC	LIB,<ANY,F40,COBOL,ALGOL,NELIAC,PL1,BLISS,SAIL,FORTRAN,MACRO,FAIL,BCPL,MIDAS>
KEYMAC	MAP,<END,NOW,ERROR,INCREMENTAL>
KEYMAC	MPS,<UNSORTED,ALPHABETICAL,NUMERICAL>
KEYMAC	MTP,<MTWAT.,MTREW.,MTEOF.,MTSKR.,MTBSR.,MTEOT.,MTUNL.,MTBLK.,MTSKF.,MTBSF.,MTDEC.,MTIND.>
KEYMAC	ONL,<BOTH,LOW,HIGH>
KEYMAC	OTS,<DEFAULT,NONSHARABLE,SHARABLE,LOW,HIGH>
KEYMAC	OVL,<DEFAULT,ABSOLUTE,RELOCATABLE,TREE,NETWORK,PURE,WRITABLE,PATH,NOPATH,SINGLE,MULTIPLE,LOGFILE,NOLOGFILE,WARNING,NOWARNING>
KEYMAC	PLT,<INCHES,LEAVES,STEPS>
KEYMAC	SEG,<DEFAULT,LOW,HIGH>
KEYMAC	SYM,<RADIX50,TRIPLET>
KEYMAC	SYS,<UNSORTED,ALPHABETICAL,NUMERICAL>
KEYMAC	VER,<SHORT,MEDIUM,LONG>
>

\

SUBTTL	PRE-DEFINED KEYWORDS

DEFINE KEYMAC (A,B)<
 IFIDN <A><CPU>,<
  %%==0
  IRP B,<
   $'A'B==:%%
   %%==%%+1
>>>

KEYWORDS

DEFINE KEYMAC (A,B)<
 IFIDN <A><SEG>,<
  %%==0
  IRP B,<
   $'A'B==:%%
   %%==%%+1
>>>

KEYWORDS
SUBTTL	LIBRARY SETTING BITS

;THIS SETS MORE BITS THAN ACTUALLY EXIST BUT ONLY THE REQUIRED ONES
;ARE USED

DEFINE X (A,B)<
 IFIDN <B><UNK>,<
  $LIBDEFAULT==UNKBIT
 >
 $LIB'A==B'BIT
>

PROCESSORS
SUBTTL	MAP FORMAT  AND CONTENTS

DEFINE  KEYMAC (A,B)<
 IFIDN <A><CON>,<
  C%BIT==1B0
  %%==0
  IRP B,<
   IFN %%&1,<
    C%'B==:C%BIT
    C%ALL==:C%ALL!C%BIT
    C%BIT==C%BIT_-1
    IFE C%BIT,<PRINTX	TOO MANY MAP CONTENT KEY WORDS>
   >
   %%==%%+1
>>>

KEYWORDS
C%DEFAULT==:C%GLOBAL!C%ENTRY!C%RELOC!C%ABSOL!C%COMMON

PURGE	KEYMAC,C%BIT,%%

DEFINE	KEYMAC (A,B)<
 IFIDN <A><MAP>,<
  %%==0
  IRP B,<
   IFIDN <B><INCREMENTAL>,<
    $'A'B==:-1
   >
   IFDIF <B><INCREMENTAL>,<
    $'A'B==:<%%==%%+1>
   >
>>>

KEYWORDS

	PURGE	KEYMAC,%%

SUBTTL	OVERLAY TYPE KEY WORDS

DEFINE	KEYMAC (A,B)<
 IFIDN <A><OVL>,<
  %%==1B35
  IRP B,<
   $OV'B==%%
   IFN <%%==%%_1>&<-1,,0>,<PRINTX	TOO MANY OVERLAY TYPES>
>>>

KEYWORDS
$OVDEFAULT==$OVABSOLUTE!$OVTREE!$OVPURE!$OVSINGLE

	PURGE	KEYMAC,%%
SUBTTL	TEXEX JSYS

IFN FTENEX,<
	OPDEF	JSYS	[104B8]
	OPDEF	SEVEC	[JSYS	204]
	OPDEF	GEVEC	[JSYS	205]
	OPDEF	GET	[JSYS	200]
	OPDEF	GTJFN	[JSYS	 20]
	OPDEF	CIS	[JSYS	141]
	OPDEF	DIR	[JSYS	130]
	OPDEF	PBOUT	[JSYS	 74]
	OPDEF	PSOUT	[JSYS	 76]
	OPDEF	PMAP	[JSYS	56]
	OPDEF	CFORK	[JSYS	152]

DEFINE	OUTSTR (TEXT)<
	HRROI	1,TEXT
	PSOUT
>

DEFINE	OUTCHR (ACC)<
 IFN ACC-1,<
	HRRZ	1,ACC
 >
	PBOUT
>

>;END IFN FTENEX
END

