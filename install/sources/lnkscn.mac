TITLE	LNKSCN - INTERFACE TO SCAN FOR LINK-10
SUBTTL	D.M.NIXON/DMN	14-MAY-74


;***COPYRIGHT 1973, 1974  DIGITAL EQUIPMENT CORP., MAYNARD, MASS.***

ENTRY	LNKSCN
SEARCH	LNKPAR,LNKLOW,C,SCNMAC
EXTERN	LNKLOD,LNKCOR,LNKLOG,.TYOCH


CUSTVR==0		;CUSTOMER VERSION
DECVER==2		;DEC VERSION
DECMVR==0		;DEC MINOR VERSION
DECEVR==165		;DEC EDIT VERSION


VERSION

SEGMENT
SUBTTL	COMMUNICATION WITH SCAN

EXTERN	.ISCAN,.TSCAN,.OSCAN
EXTERN	.POPJ1,.SWDEC,.SWOCT,.SWSIX,F.NAM,.OCTNW
;COMMUNICATION WITH .TYOCH
EXTERN	.TCHAR,.TCRLF,.TDECW,.TOCTW,.TSIXN,.TSTRG,.TIAUC


;ACCUMULATORS

C==P4		;CHARACTER INPUT

SUBTTL	REVISION HISTORY

;START OF VERSION 1A
;37	ADD GARBAGE COLLECTOR AT CLANS
;47	INTEGRATE WITH SCAN %4
;52	ADD ASCIZ TEXT BLOCK
;60	ADD /VERSION SWITCH, MOVE .INSUB TO LNKSCN.MAC
;71	ADD PEF MESSAGE

;START OF VERSION 1B
;121	(12145)	.VERSW DOESN'T PRESERVE P4, /VER:1(20) FAILS

;START OF VERSION 2
;141	TURN ON ASCII TEXT BLOCK
;145	ADD /USERLIB & /NOUSERLIB SWITCHES
;147	TURN ON MIXFOR FEATURE
;150	REMOVE EDIT #71 (PEF MESSAGE)
;151	(12491) CALL .OSCAN CORRECTLY
;165	INTEGRATE WITH SCAN %5(356), REMOVE .VERSW
SUBTTL	DEFAULT VALUES

DEFVALUES
SUBTTL	INITIALIZE SCANNER

LNKSCN:	JFCL	.+1		;NORMAL ENTRY
IFN .ASBLK,<
	SKIPE	F.ASCI		;CALLED TO SCAN INCORE TEXT?
	JRST	SCNTXT		;YES>
	.ERR.	(MS,0,V%L,L%I,S%I,SNL,<Scanning new command line>)
	MOVE	T1,[.TEMP,,.TEMP+1]
	SETZM	.TEMP
	BLT	T1,TMPEND	;CLEAR ALL TEMP DATA USED
	SETZ	T1,		;SCAN CAN USE TTCALLS
	PUSHJ	P,.TYOCH##	;SINCE PROBLEM WITH EXECUTE ONLY HACK
	MOVE	T1,.ISBLK	;DATA BLOCK FOR .ISCAN
	SKIPL	OSCANF		;ONLY INITIALIZE ONCE
	PUSHJ	P,.ISCAN	;INITIALIZE COMMAND SCANNER
	SKIPE	T1,TTYSUB	;NOW WE CAN SET LINE BUFFERING ROUTINE
	PUSHJ	P,.TYOCH##	;UNLESS STILL ZERO
SUBTTL	MAIN LOOP FOR COMMAND SCANNING

MAINLP:	MOVE	T1,.JBREL	;SET .JBFF OUTSIDE CORE RANGE
	MOVEM	T1,.JBFF	;INCASE /HELP
	MOVE	T1,.TSBLK	;DATA BLOCK FOR .TSCAN
	PUSHJ	P,.TSCAN	;GET THE COMMAND
IFN FTOPTION,<
	SKIPE	OSCANF		;-1 IF ALREADY DONE FOR THIS LOAD
	JRST	MAINL1		;NOT FIRST TIME
	PUSH	P,F.INZR	;SAVE LIST OF FILE SPECS
	SETZM	F.INZR		;CLEAR F.INZR
	PUSHJ	P,CLANZ		; AND  F.NXZR TO PUT OSCAN FIRST
	MOVE	T1,.OSBLK	;DATA BLOCK FOR OPTION FILE
	PUSHJ	P,.OSCAN	;READ USER OPTION PROFILE
	MOVEI	T2,F.INZR	;START OF NEW LIST
	MOVE	T1,T2		;NOT YET END OF LIST
	HRRZ	T2,(T1)		;LIST TERMINATED?
	JUMPN	T2,.-2		;NO
	POP	P,T2		;GET PREVIOUS LIST
	HRRM	T2,(T1)		;LINK INTO NEW LIST
	SETZM	SWFLAG		;CLEAR SWITCH SEEN FLAG
>;END OF IFN FTOPTION
	SETOM	OSCANF		;ONLY ONCE
MAINL1:	SKIPN	F.INZR		;ANYTHING TO LOAD?
	JRST	MAINLP		;NO, TRY AGAIN
	MOVE	T1,F.INZR	;POINT TO CURRENT DATA BLOCK
	ADDI	T1,F.ZER	;POINT TO START OF SCAN INFO
	MOVEM	T1,F.WLZR	;FOR WILD
	MOVE	T1,LOGSUB	;RESET LOG DEVICE
	PUSHJ	P,.TYOCH	;SINCE SCAN WIPES IT OUT
	SKIPL	GOTO		;SEEN /G YET?
	JRST	MAINRT		;NO, LOAD WHAT WE HAVE
	SETZM	GOTO		;DON'T CONFUSE LNKLOD
	PUSHJ	P,.KLIND##	;IF CCL MODE DELETE TEMP FILE
MAINRT:	IFN FTOVERLAY,<
	SKIPE	OVERLW		;LOADING IN OVERLAY MODE
	JRST	LNKOV1##	;YES
>
	JRST	LNKLOD		;AND LOAD THIS



;HERE FOR PREMATURE END-OF-FILE
;THIS SHOULD NOT HAPPEN, SO WARN USER

;EOFERR:	.ERR.	(MS,,V%L,L%F,S%F,PEF,<Premature End-of-File on command file>)
.ISBLK:	4,,.+1
	0
	OFFSET,,'LNK'
	USRIN,,0
	0
;	0,,EOFERR

.TSBLK: 9,,.+1
	IOWD LNKSWL,LNKSWN
	LNKSWD,,LNKSWM
	0,,LNKSWP
	-1
	CLANS,,0
	AIN,,AOUT
	0
	0,,FS.MOT!FS.MIO
	0,,USRSWT

IFN FTOPTION,<
.OSBLK: 4,,.TSBLK+1
>;END OF IFN FTOPTION

;SUBROUTINE TO CLEAR ANSWER AREA

CLRRET:	PUSHJ	P,DY.RET##	;RESTORE SPACE

CLANS:				;CLEAR START OF PARAMS
	SKIPN	T1,F.INZR	;NEED TO GARBAGE COLLECT?
	JRST	CLANZ		;NO
	SKIPE	T3,1(T1)	;YES, ANY SWITCHES FOR THIS SPEC?
	JRST	CLANSW		;YES, RETURN THEM FIRST
	HRRZ	T2,0(T1)	;GET NEXT POINTER
	MOVEM	T2,F.INZR	;STORE BACK FOR NEXT TIME ROUND
	MOVEI	T2,F.LEN	;LENGTH WE ALLOCATED
	JRST	CLRRET		;RETURN SPACE

CLANSW:	EXCH	T1,T3		;PUT ADDRESS OF SWITCH IN T1
	TLNN	T1,-1		;LEFT HALF SWITCH?
	JRST	CLANRS		;NO, TRY RIGHT
	HLRZ	T1,T1		;FOR INDEXING
	MOVE	T2,0(T1)	;LENGTH,,NEXT POINTER
	HRLM	T2,1(T3)	;STORE BACK IN (F.INZR)+1
	HLRZ	T2,T2		;LENGTH
	JRST	CLRRET		;RETURN SPACE

CLANRS:	MOVE	T2,0(T1)	;LENGTH,,NEXT POINTER
	HRRZM	T2,1(T3)	;STORE BACK IN (F.INZR)+1
	HLRZ	T2,T2		;LENGTH
	JRST	CLRRET		;RETURN SPACE

CLANZ:	SETZM	F.NXZR		;FOR SCAN
	SETZM	SWFLAG		;CLEAR SWITCH SEEN INDICATOR
CPOPJ:	POPJ	P,		;RETURN

;SUBROUTINES TO ALLOCATE FILE AREAS
;EXITS WITH T1 = ADDRESS
;T2 = LENGTH

;SUBROUTINE TO ALLOCATE OUTPUT FILE AREA

AOUT:				;FALL INTO AIN TO GET SPACE

;SUBROUTINE TO ALLOCATE INPUT FILE AREA

AIN:	MOVEI	T2,F.LEN	;SET LENGTH
	SKIPGE	F.NXZR		;SET NEGATIVE IF SWITCHES SEEN
	JRST	AIN4		;BLOCK IS ALREADY SETUP
	SETZM	SWFLAG		;CLEAR GARBAGE IN SWFLAG
	SKIPE	T1,LOGSUB	;IF WE HAVE A REAL LOG FILE
	PUSHJ	P,.TYOCH##	;RESET LOG OUTPUT ROUTINE
	PUSHJ	P,DY.GET##	;GET SOME FREE SPACE
	SKIPN	LOGSUB		;DID WE RESET TTY OUTPUT
	JRST	AIN0		;NO
	MOVE	T2,T1		;SAVE T1
	MOVE	T1,TTYSUB	;GET TTY ROUTINE BACK
	PUSHJ	P,.TYOCH##	;RESET TTY
	MOVE	T1,T2		;RESTORE CORE POINTER
AIN0:	SKIPE	F.INZR		;FIRST ONE?
	JRST	AIN1		;NO
	MOVEM	T1,F.INZR	;SET FIRST ADDRESS POINTER
	JRST	AIN2		;FIXUP SIZE AND ADDRESS FOR SCAN

AIN1:	HRRM	T1,@F.NXZR	;STORE POINTER TO THIS
AIN2:	MOVEM	T1,F.NXZR	;ADVANCE TO IT
	SETZM	(T1)		;CLEAR FORWARD POINTER
	SETZM	1(T1)		;AND SWITCH POINTER
AIN3:	ADDI	T1,F.ZER	;PASS OVER HEADER WORDS
	SUBI	T2,F.ZER	;SINCE SCAN DOESN'T KNOW ABOUT THEM
	POPJ	P,		;RETURN

AIN4:	HRRZS	T1,F.NXZR	;GET CURRENT BLOCK
	HRRZS	(T1)		;CLEAR DUMMY FILE BLOCK FLAG
	SETZM	SWFLAG		;CLEAR SWITCH SEEN FLAG
	JRST	AIN3		;AND RETURN
SUBTTL	HERE TO HANDLE SWITCHES

;HERE FOR GLOBAL SWITCHES (LHS)
;ENTER FROM SCAN WITH VALUE IN P3 AND TOKEN IN T2
;AND DELIMITER CHARACTER IN C=P4
;SPECIAL ACTION IS REQUIRED IF DELIMITER IS ":"
;SINCE SCAN HAS NOT YET RETURNED THE FILE SPEC BLOCK THE FIRST SWITCH
;MUST ALLOCATE A DUMMY BLOCK.
;IT DOES THIS BY CALLING AIN AND MARKS THE BLOCK BY
;-1 IN LEFT OF F.NXZR AND -1 IN LEFT OF @F.NXZR
;THE SWITCHES ARE IN CHAINED BLOCK
;ALL GLOBAL SWITCHES, THOSE BEFORE THE FILE NAME ARE CHAINED TO THE
;LEFT HALF OF (@F.NXZR)+1, AND ALL LOCAL SWITCHES TO THE RIGHT HALF.
;THE SWITCHES ARE IN BLOCKS WHOSE STRUCTURE IS
;WORD COUNT ,, LINK TO NEXT SWITCH
;TOKEN VALUE
;VALUE
;REST DEPENDS UPON TOKEN #

;WHEN THE FILE SPEC IS RETURNED THE LEFT HALVES OF F.NXZR AND @F.NXZR
;ARE CLEARED.

USRSWT:	SETZM	VALUE		;INCASE SECOND VALUE REQUIRED
	LDB	T3,[POINT 6,T2,11]	;GET BYTE SIZE
	CAILE	T3,^D36		;MULTI-WORD?
	JRST	[CAIE	T3,77		;YES, WE CAN ONLY HANDLE DOUBLE WORDS
		JRST	SWTERR		;ERROR
		MOVE	P3,.NMUL##+1	;GET HIGH VALUE
		MOVEM	P3,VALUE	;SAVE AS 2ND ARG
		MOVE	P3,.NMUL##	;GET FIRST ARG
		SETZM	.NMUL##		;CLEAR INCASE NO ARG NEXT TIME
		SETZM	.NMUL##+1	;
		JRST	.+1]		;AND CONTINUE
	PUSH	P,P3		;SAVE VALUE
	HRRZ	T2,T2		;CLEAR BYTE POINTER FROM LEFT
	PUSH	P,T2		;AND TOKEN
	CAIN	T2,%GO%		;IS THIS /G?
	SETOM	GOTO		;YES, MARK SO WE CAN DELETE TMP FILE
IFN FTOVERLAY,<
	CAIN	T2,%OV%		;/OVERLAY?
	HRROS	OVERLW		;YES, MARK SEEN IT
>
	CAIE	C,":"		;SECOND VALUE SEEN?
	JRST	USRSW1		;NO
	HRRZ	T2,SWTTAB(T2)	;GET DISPATCH
	JUMPE	T2,USRSW1	;NO SUCH LUCK (GET ERROR FROM SCAN)
	PUSHJ	P,(T2)		;READ VALUE
	MOVEM	P3,VALUE	;AND STORE IT
USRSW1:	SKIPE	F.NAM		;GLOBAL IF FILE NAME NOT YET SEEN
	JRST	USRLSW		;NO, IT'S LOCAL
USRGSW:	SKIPGE	F.NXZR		;IF FIRST SWITCH FOR THIS FILE SPEC
	JRST	USRGS1		;NO, FILE AREAS ALREADY SETUP
	PUSHJ	P,AIN		;ALLOCATE A BLOCK
	SUBI	T1,1		;BACKUP POINTER TO SWITCHS
	HRROS	-1(T1)		;MARK AS ONLY A DUMMY
	HRROS	F.NXZR		;MARK DUMMY BLOCK SET UP
USRGS1:	MOVE	T2,(P)		;GET TOKEN #
	HLRZ	T2,SWTTAB(T2)	;SIZE OF SWITCH AREA
	SKIPE	T1,LOGSUB	;IF WE HAVE A REAL LOG FILE
	PUSHJ	P,.TYOCH##	;RESET LOG OUTPUT ROUTINE
	PUSHJ	P,DY.GET##	;GET REQUIRED SPACE
	HRLZM	T2,(T1)		;STORE SIZE AND CLEAR LINK
	POP	P,1(T1)		;STORE TOKEN
	POP	P,2(T1)		;AND VALUE
	MOVE	T3,VALUE	;GET 2ND VALUE (OR 0)
	CAILE	T2,3		;SEE IF 2ND VALUE EXPECTED
	MOVEM	T3,3(T1)	;YES
	SKIPN	LOGSUB		;DID WE RESET TTY OUTPUT
	JRST	.+5		;NO
	PUSH	P,T1		;SAVE T1
	MOVE	T1,TTYSUB	;GET TTY ROUTINE BACK
	PUSHJ	P,.TYOCH##	;RESET TTY
	POP	P,T1
	SKIPL	T2,SWFLAG	;SEE IF FIRST SWITCH
	JRST	USRGS2		;YES IT IS
	HRROM	T1,SWFLAG	;STORE NEW POINTER
	HRRM	T1,(T2)		;AND LINK IN
USRRET:	POPJ	P,

USRGS2:	HRROM	T1,SWFLAG	;STORE POINTER AND FLAG GLOBAL
	MOVE	T2,F.NXZR	;GET POINTER TO  BLOCK
	HRLM	T1,1(T2)	;LINK SWITCH CHAIN TO FILE CHAIN
	JRST	USRRET

SWTERR:	.ERR.	(MS,,V%L,L%F,S%F,IST,<Inconsistency in switch table>)

;HERE FOR LOCAL SWITCHES (RHS)

USRLSW:	SKIPGE	F.NXZR		;IF FIRST SWITCH FOR THIS FILE SPEC
	JRST	USRLS1		;NO, FILE AREAS ALREADY SETUP
	PUSHJ	P,AIN		;ALLOCATE A BLOCK
	SUBI	T1,1		;BACKUP POINTER TO SWITCHS
	HRROS	-1(T1)		;MARK AS ONLY A DUMMY
	HRROS	F.NXZR		;MARK DUMMY BLOCK SET UP
USRLS1:	MOVE	T2,(P)		;GET TOKEN #
	HLRZ	T2,SWTTAB(T2)	;SIZE OF SWITCH AREA
	SKIPE	T1,LOGSUB	;IF WE HAVE A REAL LOG FILE
	PUSHJ	P,.TYOCH##	;RESET LOG OUTPUT ROUTINE
	PUSHJ	P,DY.GET##	;GET REQUIRED SPACE
	HRLZM	T2,(T1)		;STORE SIZE AND CLEAR LINK
	POP	P,1(T1)		;STORE TOKEN
	POP	P,2(T1)		;AND VALUE
	MOVE	T3,VALUE	;GET 2ND VALUE (OR 0)
	CAILE	T2,3		;SEE IF 2ND VALUE EXPECTED
	MOVEM	T3,3(T1)	;YES
	SKIPN	LOGSUB		;DID WE RESET TTY OUTPUT
	JRST	.+5		;NO
	PUSH	P,T1
	MOVE	T1,TTYSUB	;GET TTY ROUTINE BACK
	PUSHJ	P,.TYOCH##	;RESET TTY
	POP	P,T1
	SKIPG	T2,SWFLAG	;SEE IF FIRST SWITCH
	JRST	USRLS2		;YES IT IS
	HRRZM	T1,SWFLAG	;STORE NEW POINTER
	HRRM	T1,(T2)		;AND LINK IN
	POPJ	P,

USRLS2:	HRRZM	T1,SWFLAG	;STORE POINTER AND FLAG LOCAL
	MOVE	T2,F.NXZR	;GET POINTER TO  BLOCK
	HRRM	T1,1(T2)	;LINK SWITCH CHAIN TO FILE CHAIN
	POPJ	P,

SUBTTL	GENERATE SWITCH TABLES

;GENERATE SWITCH TABLES
DEFINE SWMAC (A,B,C,D,E,F,G,H,I)<
 IFB <C>,<
  A H'B,TK.,D,E
 >
 IFNB <C>,<
  A H'B,<POINT 65-C,TK.,35>,D,E
 >
 IF1,<
  IFIDN <B><GO>,<
   IFNDEF %GO%,<
    %GO%==TK.
  >>
  IFIDN <B><OVERLAY>,<
   IFNDEF %OV%,<
    %OV%==TK.
  >>
  TK.==TK.+1
 >
 IF2,<
  IFG .-LNKSWP,<TK.==TK.+1>
>>

TK.==0			;INITIAL CONDITION
DOSCAN (LNKSW)
DEFINE KEYMAC (A,B)<
KEYS A'K,<B>>

KEYWORDS
SUBTTL	GENERATE SIZE TABLE FOR SWITCH STORAGE

DEFINE SWMAC (A,B,C,D,E,F,G,H,I)<
 IF1,<
	F,,0
 >
 IF2,<
  IFNB <I>,<IFNDEF I,<EXTERN I>>
	F,,I
>>

SWTTAB:	SWTCHS



SUBTTL	ASCIZ TEXT BLOCK

IFE .ASBLK,<USRIN==0>		;USE INCHWL ROUTINE IN SCAN

IFN .ASBLK,<
USRIN:	SKIPE	F.ASCI		;READING ASCIZ TEXT FROM CORE?
	JRST	TXTIN		;YES
	INCHWL	C		;NO
	POPJ	P,

SCNTXT:	MOVE	T1,[POINT 7,1]	;FORM BYTE POINTER
	ADDM	T1,F.ASCI	;FOR READIN
	MOVEI	T1,^D127*5	;MAX BYTE COUNT FOR THIS BUFFER
	MOVEM	T1,F.ASCC	;FOR SOSGE LOOP
	JRST	MAINLP		;READ INCORE TEXT

TXTIN:	SOSGE	F.ASCC		;BUFFER STILL CONTAINS DATA?
	JRST	NXTTXT		;NO, GET NEXT BUFFER	
	ILDB	C,F.ASCI	;READ A CHAR
	JUMPN	C,CPOPJ		;RETURN IF NOT NULL
	SKIPA	C,F.ASCC	;NO OF CHAR LEFT
NXTTXT:	TDZA	C,C		;ENTER HERE WHEN BUFFER EMPTY
	IDIVI	C,5		;NO OF WORDS LEFT
	SUBI	C,^D127		;NO. TO BACKUP
	ADDB	C,F.ASCI	;TO START OF BLOCK
	PUSH	P,T1		;SCAN USES T1 FOR CALLS
	HRRZ	T1,C		;GIVE BLOCK BACK
	MOVEI	T2,^D128
	MOVE	C,(C)		;STORE POINTER TO NEXT BLOCK OR 0
	MOVEM	C,F.ASCI	;NEW POINTER
	PUSHJ	P,DY.RET##	;RETURN SPACE
	POP	P,T1		;RESTORE T1
	JUMPE	C,TXTFIN	;FINISHED IF NOTHING TO LINK TO
	MOVE	C,[POINT 7,1]	;ASCII BYTE POINTER
	ADDM	C,F.ASCI	;FOR READIN
	MOVEI	C,^D127*5	;MAX BYTE COUNT FOR THIS BUFFER
	MOVEM	C,F.ASCC	;FOR SOSGE LOOP
	JRST	TXTIN		;GET NEXT CHAR

TXTFIN:	SETOB	C,F.ASCI	;RETURN EOL CHAR
	POPJ	P,

>;END IFN .ASBLK
SUBTTL .INSUB - SPECIAL INPUT SUBROUTINES NOT YET IN SCAN

;***COPYRIGHT (C) 1973 DIGITAL EQUIPMENT CORP., MAYNARD, MASS.***

ENTRY	.SYMSW,.SWSYM,.SYOSW,.SWSYO,.SXDSW,.SWSXD
ENTRY	.DPKSW,.SWDPK

N==P3
C==P4

;.SYMSW -- INPUT A SIXBIT SYMBOL FROM COMMAND STRING
;.SYMSC  -- DITTO (CHARACTER ALREADY IN C)
;TERMINATES AT FIRST NON-SYMBOL CHARACTER
;THROWS AWAY ANY CHARACTERS BEYOND THE FIRST SIX
;CALL:	PUSHJ	P,.SYMSC/.SYMSW
;	RETURN WITH WORD IN N
;USES T1    UPDATES C (SEPARATOR)

.SYMSW::PUSHJ	P,.TIAUC##	;PRIME THE PUMP

.SYMSC::MOVEI	N,0		;CLEAR NAME
	MOVE	T1,[POINT 6,N]	;INITIALIZE BYTE POINTER FOR WORD

SYMS1:  PUSHJ	P,.TICAN##	;SEE IF CHARACTER IS ALPHA-NUMERIC
SYMS2:	  JRST	[CAIE	C,"%"	;SEE IF ALLOWED RADIX-50 CHARACTER
		CAIN	C,"$"	;DITTO
		JRST	.+1	;YES
		CAIN	C,"."	;LAST CHANCE
		JRST	.+1	;YES
		POPJ	P,]	;NO--ALL DONE
SYMS3:	SUBI	C," "-' '	;CONVERT TO SIXBIT
	TLNE	T1,(77B5)	;DON'T OVERFLOW
	IDPB	C,T1		;STORE CHARACTER
	PUSHJ	P,.TIAUC##	;GO GET ANOTHER CHARACTER
	JRST	SYMS1		;LOOP BACK TO PROCESS IT


;HERE WHEN SWITCH VALUE IS A ONE WORD SIXBIT SYMBOL

.SWSYM::PUSHJ	P,.SYMSW	;GET THE WORD
	JRST	.SWDPB##	;AND STORE IT

;.SYOSW -- INPUT A SIXBIT SYMBOL OR OCTAL WORD FROM COMMAND STRING
;.SYOSC  -- DITTO (CHARACTER ALREADY IN C)
;TERMINATES AT FIRST NON-SYMBOL CHARACTER (AFTER FIRST #)
;THROWS AWAY ANY CHARACTERS BEYOND THE FIRST SIX (IF SYMBOL)
;ASSUMES OCTAL IF FIRST CHAR IS #, OR FIRST 6 CHAR ARE 0-7
;ASSUMES SYMBOLIC IF ANY OF FIRST 6 CHARS ARE ALPHABETIC OR SPECIAL
;CALL:	PUSHJ	P,.SYOSC/.SYOSW
;	RETURN WITH WORD IN N
;USES T1    UPDATES C (SEPARATOR)

.SYOSW::PUSHJ	P,.TIAUC##	;PRIME THE PUMP

.SYOSC::MOVEI	N,0		;CLEAR NAME
	MOVE	T1,[POINT 6,N]	;INITIALIZE BYTE POINTER FOR WORD

SYOS1:	PUSHJ	P,.TICAN##	;SEE IF CHARACTER IS ALPHA-NUMERIC
	  JRST	[CAIN	C,"#"		;NO, BUT IS IT OCTAL
		JRST	.OCTNW		;YES, ITS ONLY OCTAL
		CAIE	C,"%"		;TEST FOR SPECIAL SYMBOL CHARS
		CAIN	C,"$"		;AND SWITCH TO SYMBOLIC MODE
		JRST	SYMS3		;YES
		CAIN	C,"."		;LAST CHANCE
		JRST	SYMS3		;TO BE SYMBOLIC
		JRST	SYOS2]		;END OF OCTAL NUMBER
	TLNN	T1,(77B5)	;SEEN SIX YET?
	JRST	SYOS2		;YES, AND ALL NUMERIC, SO MUST BE OCTAL
	CAIL	C,"0"		;IF ALPHABETIC
	CAILE	C,"7"
	JRST	SYMS3		;WE'VE GOT A SYMBOL
	SUBI	C," "		;CONVERT TO SIXBIT
	IDPB	C,T1		;DON'T KNOW WHICH YET
	PUSHJ	P,.TIAUC##	;GO GET ANOTHER CHARACTER
	JRST	SYOS1		;PROCESS IT

;HERE WHEN SIXBIT WORD IS OCTAL (THROUGH FIRST SIX CHARS)
;CONVERT SIXBIT SYMBOL INTO RIGHT JUSTIFIED OCTAL

SYOS2:	PUSH	P,N+1		;GET A SPARE ACC
	LSHC	N,-^D36		;LEFT JUST SYMBOL IN LOWER ACC, CLEAR RECEIVING ACC
	LSH	N+1,3		;GET RID OF TOP 3 BITS
	LSHC	N,3		;SHIFT IN LOWER 3 BITS (OCTAL NUMBER)
	JUMPN	N+1,.-2		;LOOP FOR ALL SYMBOL
	POP	P,N+1		;RESTORE ACC
SYOS3:	CAIL	C,"0"		;SEE IF OCTAL
	CAILE	C,"7"
	POPJ	P,		;NO, DONE
	LSH	N,3		;YES, MULTIPLY NUMBER
	ADDI	N,-"0"(C)	;INCORPORATE DIGIT
	PUSHJ	P,.TIAUC##	;GET NEXT CHAR
	JRST	SYOS3		;LOOP BACK

;HERE WHEN SWITCH VALUE IS A ONE WORD SIXBIT SYMBOL OR OCTAL WORD

.SWSYO::PUSHJ	P,.SYOSW	;GET THE WORD
	JRST	.SWDPB##	;AND STORE IT
;.SXDSW -- INPUT A SIXBIT SYMBOL OR DECIMAL WORD FROM COMMAND STRING
;.SXDSC  -- DITTO (CHARACTER ALREADY IN C)
;TERMINATES AT FIRST NON-SYMBOL CHARACTER (AFTER FIRST #)
;THROWS AWAY ANY CHARACTERS BEYOND THE FIRST SIX (IF SYMBOL)
;ASSUMES OCTAL IF FIRST CHAR IS #, DECIMAL IF FIRST 6 CHAR ARE 0-9
;ASSUMES SYMBOLIC IF ANY OF FIRST 6 CHARS ARE ALPHABETIC OR SPECIAL
;CALL:	PUSHJ	P,.SXDSC/.SXDSW
;	RETURN WITH WORD IN N
;USES T1    UPDATES C (SEPARATOR)

.SXDSW::PUSHJ	P,.TIAUC##	;PRIME THE PUMP

.SXDSC::PUSHJ	P,.CKNEG##	;SEE IF NEGATIVE, ALSO CLEAR N
	MOVE	T1,[POINT 6,N]	;INITIALIZE BYTE POINTER FOR WORD

SXDS1:	PUSHJ	P,.TICAN##	;SEE IF CHARACTER IS ALPHA-NUMERIC
	  JRST	[CAIN	C,"#"		;NO, BUT IS IT OCTAL
		JRST	.OCTNW		;YES, ITS ONLY OCTAL
		JRST	SXDS2]		;END OF DECIMAL NUMBER
	TLNN	T1,(77B5)	;SEEN SIX YET?
	JRST	SXDS2		;YES, AND ALL NUMERIC, SO MUST BE DECIMAL
	CAIL	C,"0"		;IF ALPHABETIC
	CAILE	C,"9"
	JRST	SYMS3		;WE'VE GOT A SYMBOL
	SUBI	C," "		;CONVERT TO SIXBIT
	IDPB	C,T1		;DON'T KNOW WHICH YET
	PUSHJ	P,.TIAUC##	;GO GET ANOTHER CHARACTER
	JRST	SXDS1		;PROCESS IT

;HERE WHEN SIXBIT WORD IS NUMERIC  (THROUGH FIRST SIX CHARS)
;CONVERT SIXBIT SYMBOL INTO RIGHT JUSTIFIED DECIMAL

SXDS2:	PUSH	P,N+1		;GET A SPARE ACC
	MOVE	N+1,N		;PUT SIXBIT IN LOWER ACC
	SETZ	T1,		;START WITH ZERO
SXDS3:	SETZ	N,		;RECIEVING ACC
	LSHC	N,6		;GET NEXT CHAR
	IMULI	T1,^D10		;MAKE ROOM
	ADDI	T1,-'0'(N)	;ADD IN NEW DIGIT
	JUMPN	N+1,SXDS3	;MORE TO DO
	POP	P,N+1		;RESTORE ACC
	MOVE	N,T1		;PUT IN RIGHT ACC
SXDS4:	CAIL	C,"0"		;SEE IF DECIMAL
	CAILE	C,"9"
	PJRST	.SENEG##	;ALL DONE, NOW SEE IF SHOULD BE NEGATED
	IMULI	N,^D10		;YES, MULTIPLY NUMBER
	ADDI	N,-"0"(C)	;INCORPORATE DIGIT
	PUSHJ	P,.TIAUC##	;GET NEXT CHAR
	JRST	SXDS4		;LOOP BACK

;HERE WHEN SWITCH VALUE IS A ONE WORD SIXBIT WORD OR DECIMAL WORD

.SWSXD::PUSHJ	P,.SXDSW	;GET THE WORD
	JRST	.SWDPB##	;AND STORE IT

;.DPKSW -- INPUT A DECIMAL PAGE OR CORE SIZE FROM COMMAND STRING
;.DPKSC  -- DITTO (CHARACTER ALREADY IN C)
;FORM IS /CORE:NK OR /CORE:LK+HK
;IF IT STARTS WITH #, THEN OCTAL TYPEIN
;TERMINATES AT FIRST NON-DECIMAL CHARACTER
;IF SUFFIX IS P USES PAGE SIZE, IF K USE CORE SIZE
;THROWS AWAY ANY CHARACTERS BEFORE THE LAST 10 OR SO
;CALL:	PUSHJ	P,.DPKSC/.DPKSW
;	RETURNS WITH DOUBLE WORD IN .NMUL, .NMUL+1
;USES T1	UPDATES C (SEPARATOR)

.DPKSW::PUSHJ	P,.TIAUC##	;PRIME THE PUMP

.DPKSC::SETZB	N,.NMUL##	;CLEAR STORAGE AREA
	SETZM	.NMUL##+1
DPKIN0:	CAIN	C,"#"		;SEE IF OCTAL FLAGGED
	PJRST	.OCTNW##	;YES--GO READ OCTAL FIELD
	CAIN	C,"-"		;IN CASE NEGATIVE
	JRST	.DPKSW		;JUST IGNORE SIGN, BUT TEST FOR OCTAL AGAIN
DPKIN1:	CAIL	C,"0"		;SEE IF DECIMAL
	CAILE	C,"9"		; ..
	PJRST	DPKMUL		;NO--AT END, SO HANDLE SUFFIX
	IMULI	N,^D10		;YES--MULTIPLY NUMBER
	ADDI	N,-"0"(C)	;INCORPORATE DIGIT
	PUSHJ	P,.TIAUC##	;GET NEXT CHARACTER
	JRST	DPKIN1		;LOOP BACK FOR MORE

;DPKMUL -- HANDLE P OR K SUFFIX MULTIPLIER
;	P FOR #1000, K FOR #2000
;CALL:	MOVE	N,NUMBER
;	PUSHJ	P,DPKMUL
;	RETURN	WITH NUMBER MULTIPLIED BY SUFFIX
;USES T1  (MULTIPLIER--RETURNED)	UPDATES C (SEPARATOR)

DPKMUL:	MOVEI	T1,0		;INITIALIZE SUFFIX MULTIPLIER
	CAIN	C,"K"		;K = 2 000
	MOVEI	T1,^D10
	CAIN	C,"P"		;P = 1 000
	MOVEI	T1,^D9
	LSH	N,(T1)		;APPLY TO NUMBER
	JUMPN	T1,.TIAUC##	;IF SUFFIX--GET ONE MORE CHARACTER
	POPJ	P,

;HERE WHEN SWITCH VALUE IS A CORE OR PAGE SIZE 

.SWDPK::PUSHJ	P,.DPKSW	;GET THE NUMBER
	MOVEM	N,.NMUL##	;STORE LOW
	CAIE	C,"+"		;SEE IF ANY MORE
	JRST	.SWDPB##	;NO, STORE WHAT WE HAVE
	PUSHJ	P,.TIAUC##	;GET NEXT CHARACTER
	PUSHJ	P,DPKIN0	;AND SEE WHAT IT IS
	MOVEM	N,.NMUL##+1	;STORE HIGH
	JRST	.SWDPB##	;AND RETURN
ENTRY	.SWVER

;HERE WHEN SWITCH VALUE IS A VERSION NUMBER

.SWVER::PUSHJ	P,.VERSW##	;GET THE WORD
	JRST	.SWDPB##	;AND STORE IT
SUBTTL	STORAGE DATA

.ZZ==.TEMP			;BASE
U	(VALUE)

TMPEND==.ZZ

SCNLIT:
END	LNKSCN
